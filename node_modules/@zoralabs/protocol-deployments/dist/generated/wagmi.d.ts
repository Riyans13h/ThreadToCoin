/**
 * - [__View Contract on Base Basescan__](https://basescan.org/address/0xd77038a7f400E8242d2916f7EB5741e689d4aE25)
 * - [__View Contract on Base Sepolia Basescan__](https://sepolia.basescan.org/address/0xE4Ec8cE893Cd41965b1aE27F1ad9798F207427aE)
 */
export declare const buySupplyWithSwapRouterHookABI: readonly [{
    readonly type: "constructor";
    readonly inputs: readonly [{
        readonly name: "_factory";
        readonly internalType: "contract IZoraFactory";
        readonly type: "address";
    }, {
        readonly name: "_swapRouter";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "_poolManager";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "sender";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "coin";
        readonly internalType: "contract ICoin";
        readonly type: "address";
    }, {
        readonly name: "hookData";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "afterCoinDeploy";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly stateMutability: "payable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "factory";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "contract IZoraFactory";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "interfaceId";
        readonly internalType: "bytes4";
        readonly type: "bytes4";
    }];
    readonly name: "supportsInterface";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "pure";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "data";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "unlockCallback";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "AddressZero";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "balance";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "CoinBalanceNot0";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "balance";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "CurrencyBalanceNot0";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "Erc20NotReceived";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "HookNotImplemented";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "InvalidSwapRouterCall";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "NotFactory";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "OnlyPoolManager";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "error";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "SwapReverted";
}];
/**
 * - [__View Contract on Base Basescan__](https://basescan.org/address/0xd77038a7f400E8242d2916f7EB5741e689d4aE25)
 * - [__View Contract on Base Sepolia Basescan__](https://sepolia.basescan.org/address/0xE4Ec8cE893Cd41965b1aE27F1ad9798F207427aE)
 */
export declare const buySupplyWithSwapRouterHookAddress: {
    readonly 8453: "0xd77038a7f400E8242d2916f7EB5741e689d4aE25";
    readonly 84532: "0xE4Ec8cE893Cd41965b1aE27F1ad9798F207427aE";
};
/**
 * - [__View Contract on Base Basescan__](https://basescan.org/address/0xd77038a7f400E8242d2916f7EB5741e689d4aE25)
 * - [__View Contract on Base Sepolia Basescan__](https://sepolia.basescan.org/address/0xE4Ec8cE893Cd41965b1aE27F1ad9798F207427aE)
 */
export declare const buySupplyWithSwapRouterHookConfig: {
    readonly address: {
        readonly 8453: "0xd77038a7f400E8242d2916f7EB5741e689d4aE25";
        readonly 84532: "0xE4Ec8cE893Cd41965b1aE27F1ad9798F207427aE";
    };
    readonly abi: readonly [{
        readonly type: "constructor";
        readonly inputs: readonly [{
            readonly name: "_factory";
            readonly internalType: "contract IZoraFactory";
            readonly type: "address";
        }, {
            readonly name: "_swapRouter";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "_poolManager";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "sender";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "coin";
            readonly internalType: "contract ICoin";
            readonly type: "address";
        }, {
            readonly name: "hookData";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "afterCoinDeploy";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly stateMutability: "payable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "factory";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "contract IZoraFactory";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "interfaceId";
            readonly internalType: "bytes4";
            readonly type: "bytes4";
        }];
        readonly name: "supportsInterface";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "pure";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "data";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "unlockCallback";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "AddressZero";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "balance";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "CoinBalanceNot0";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "balance";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "CurrencyBalanceNot0";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "Erc20NotReceived";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "HookNotImplemented";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "InvalidSwapRouterCall";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "NotFactory";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "OnlyPoolManager";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "error";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "SwapReverted";
    }];
};
/**
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x77777775C5074b74540d9cC63Dd840A8c692B4B5)
 * - [__View Contract on Op Mainnet Optimism Explorer__](https://optimistic.etherscan.io/address/0x77777775C5074b74540d9cC63Dd840A8c692B4B5)
 * - [__View Contract on Base Basescan__](https://basescan.org/address/0x77777775C5074b74540d9cC63Dd840A8c692B4B5)
 * - [__View Contract on Arbitrum One Arbiscan__](https://arbiscan.io/address/0x77777775C5074b74540d9cC63Dd840A8c692B4B5)
 * - [__View Contract on Blast Blastscan__](https://blastscan.io/address/0x77777775C5074b74540d9cC63Dd840A8c692B4B5)
 * - [__View Contract on Base Sepolia Basescan__](https://sepolia.basescan.org/address/0x77777775C5074b74540d9cC63Dd840A8c692B4B5)
 * - [__View Contract on Zora Explorer__](https://explorer.zora.energy/address/0x77777775C5074b74540d9cC63Dd840A8c692B4B5)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x77777775C5074b74540d9cC63Dd840A8c692B4B5)
 * - [__View Contract on Op Sepolia Blockscout__](https://optimism-sepolia.blockscout.com/address/0x77777775C5074b74540d9cC63Dd840A8c692B4B5)
 * - [__View Contract on Zora Sepolia Zora Sepolia Explorer__](https://sepolia.explorer.zora.energy//address/0x77777775C5074b74540d9cC63Dd840A8c692B4B5)
 */
export declare const callerAndCommenterABI: readonly [{
    readonly type: "constructor";
    readonly inputs: readonly [{
        readonly name: "_comments";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "_zoraTimedSale";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "_swapHelper";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "_sparksValue";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "UPGRADE_INTERFACE_VERSION";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "acceptOwnership";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "commenter";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "quantity";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "collection";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "excessRefundRecipient";
        readonly internalType: "address payable";
        readonly type: "address";
    }, {
        readonly name: "maxEthToSpend";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "sqrtPriceLimitX96";
        readonly internalType: "uint160";
        readonly type: "uint160";
    }, {
        readonly name: "comment";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly name: "buyOnSecondaryAndComment";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "struct IComments.CommentIdentifier";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "commenter";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "contractAddress";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "nonce";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
    }];
    readonly stateMutability: "payable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "comments";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "contract IComments";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "contractName";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly stateMutability: "pure";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "contractVersion";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly stateMutability: "pure";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "eip712Domain";
    readonly outputs: readonly [{
        readonly name: "fields";
        readonly internalType: "bytes1";
        readonly type: "bytes1";
    }, {
        readonly name: "name";
        readonly internalType: "string";
        readonly type: "string";
    }, {
        readonly name: "version";
        readonly internalType: "string";
        readonly type: "string";
    }, {
        readonly name: "chainId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "verifyingContract";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "salt";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }, {
        readonly name: "extensions";
        readonly internalType: "uint256[]";
        readonly type: "uint256[]";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "permit";
        readonly internalType: "struct ICallerAndCommenter.PermitBuyOnSecondaryAndComment";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "commenter";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "quantity";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "collection";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "maxEthToSpend";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "sqrtPriceLimitX96";
            readonly internalType: "uint160";
            readonly type: "uint160";
        }, {
            readonly name: "comment";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "deadline";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "nonce";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }, {
            readonly name: "sourceChainId";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }, {
            readonly name: "destinationChainId";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }];
    }];
    readonly name: "hashPermitBuyOnSecondaryAndComment";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "permit";
        readonly internalType: "struct ICallerAndCommenter.PermitTimedSaleMintAndComment";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "commenter";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "quantity";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "collection";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "mintReferral";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "comment";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "deadline";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "nonce";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }, {
            readonly name: "sourceChainId";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }, {
            readonly name: "destinationChainId";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }];
    }];
    readonly name: "hashPermitTimedSaleMintAndComment";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "owner";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "initialize";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "owner";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "nonce";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly name: "nonceUsed";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "owner";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "pendingOwner";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "permit";
        readonly internalType: "struct ICallerAndCommenter.PermitBuyOnSecondaryAndComment";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "commenter";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "quantity";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "collection";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "maxEthToSpend";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "sqrtPriceLimitX96";
            readonly internalType: "uint160";
            readonly type: "uint160";
        }, {
            readonly name: "comment";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "deadline";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "nonce";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }, {
            readonly name: "sourceChainId";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }, {
            readonly name: "destinationChainId";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }];
    }, {
        readonly name: "signature";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "permitBuyOnSecondaryAndComment";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "struct IComments.CommentIdentifier";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "commenter";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "contractAddress";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "nonce";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
    }];
    readonly stateMutability: "payable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "permit";
        readonly internalType: "struct ICallerAndCommenter.PermitTimedSaleMintAndComment";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "commenter";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "quantity";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "collection";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "mintReferral";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "comment";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "deadline";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "nonce";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }, {
            readonly name: "sourceChainId";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }, {
            readonly name: "destinationChainId";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }];
    }, {
        readonly name: "signature";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "permitTimedSaleMintAndComment";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "struct IComments.CommentIdentifier";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "commenter";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "contractAddress";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "nonce";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
    }];
    readonly stateMutability: "payable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "proxiableUUID";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "renounceOwnership";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "secondarySwap";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "contract ISecondarySwap";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "commenter";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "quantity";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "collection";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "recipient";
        readonly internalType: "address payable";
        readonly type: "address";
    }, {
        readonly name: "minEthToAcquire";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "sqrtPriceLimitX96";
        readonly internalType: "uint160";
        readonly type: "uint160";
    }, {
        readonly name: "comment";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly name: "sellOnSecondaryAndComment";
    readonly outputs: readonly [{
        readonly name: "commentIdentifier";
        readonly internalType: "struct IComments.CommentIdentifier";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "commenter";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "contractAddress";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "nonce";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
    }];
    readonly stateMutability: "payable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "sparkValue";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "commenter";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "quantity";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "collection";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "mintReferral";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "comment";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly name: "timedSaleMintAndComment";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "struct IComments.CommentIdentifier";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "commenter";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "contractAddress";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "nonce";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
    }];
    readonly stateMutability: "payable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "newOwner";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "transferOwnership";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "newImplementation";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "data";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "upgradeToAndCall";
    readonly outputs: readonly [];
    readonly stateMutability: "payable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "zoraTimedSale";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "contract IZoraTimedSaleStrategy";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [];
    readonly name: "EIP712DomainChanged";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "version";
        readonly internalType: "uint64";
        readonly type: "uint64";
        readonly indexed: false;
    }];
    readonly name: "Initialized";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "commentId";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
        readonly indexed: true;
    }, {
        readonly name: "commentIdentifier";
        readonly internalType: "struct IComments.CommentIdentifier";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "commenter";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "contractAddress";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "nonce";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly indexed: false;
    }, {
        readonly name: "quantity";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }, {
        readonly name: "text";
        readonly internalType: "string";
        readonly type: "string";
        readonly indexed: false;
    }];
    readonly name: "MintedAndCommented";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "previousOwner";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "newOwner";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }];
    readonly name: "OwnershipTransferStarted";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "previousOwner";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "newOwner";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }];
    readonly name: "OwnershipTransferred";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "commentId";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
        readonly indexed: true;
    }, {
        readonly name: "commentIdentifier";
        readonly internalType: "struct IComments.CommentIdentifier";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "commenter";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "contractAddress";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "nonce";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly indexed: false;
    }, {
        readonly name: "quantity";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: true;
    }, {
        readonly name: "comment";
        readonly internalType: "string";
        readonly type: "string";
        readonly indexed: false;
    }, {
        readonly name: "swapDirection";
        readonly internalType: "enum ICallerAndCommenter.SwapDirection";
        readonly type: "uint8";
        readonly indexed: true;
    }];
    readonly name: "SwappedOnSecondaryAndCommented";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "implementation";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }];
    readonly name: "Upgraded";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "target";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "AddressEmptyCode";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "expected";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "actual";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "CommenterMismatch";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "implementation";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "ERC1967InvalidImplementation";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ERC1967NonPayable";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "deadline";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "ERC2612ExpiredSignature";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "FailedInnerCall";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "wrongDestinationChainId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "IncorrectDestinationChain";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "account";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "currentNonce";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly name: "InvalidAccountNonce";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "InvalidInitialization";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "InvalidSignature";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "NotInitializing";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "owner";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "OwnableInvalidOwner";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "account";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "OwnableUnauthorizedAccount";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "collection";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "SaleNotSet";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "UUPSUnauthorizedCallContext";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "slot";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly name: "UUPSUnsupportedProxiableUUID";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "currentName";
        readonly internalType: "string";
        readonly type: "string";
    }, {
        readonly name: "newName";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly name: "UpgradeToMismatchedContractName";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "expected";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "actual";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "WrongValueSent";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "target";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "AddressEmptyCode";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "account";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "AddressInsufficientBalance";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "AddressZero";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ERC1167FailedCreateClone";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "implementation";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "ERC1967InvalidImplementation";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ERC1967NonPayable";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "EndTimeCannotBeInThePast";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "FailedInnerCall";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "InsufficientFunds";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "InvalidInitialization";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "MarketAlreadyLaunched";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "MarketMinimumNotReached";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "MinimumMarketEthNotMet";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "NeedsToBeAtLeastOneSaleToStartMarket";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "NotInitializing";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "OnlyZoraRewardRecipient";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "owner";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "OwnableInvalidOwner";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "account";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "OwnableUnauthorizedAccount";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ReentrancyGuardReentrantCall";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "RequestMintInvalidUseMint";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ResetSaleNotAvailable";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "SaleAlreadySet";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "SaleEnded";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "SaleHasNotStarted";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "SaleInProgress";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "SaleNotSet";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "SaleV2AlreadyStarted";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "SaleV2Ended";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "SaleV2NotSet";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "StartTimeCannotBeAfterEndTime";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "UUPSUnauthorizedCallContext";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "slot";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly name: "UUPSUnsupportedProxiableUUID";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "WrongValueSent";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ZoraCreator1155ContractNeedsToSupportReduceSupply";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ADDRESS_DELEGATECALL_TO_NON_CONTRACT";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ADDRESS_LOW_LEVEL_CALL_FAILED";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "operator";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "user";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "Burn_NotOwnerOrApproved";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "CREATOR_FUNDS_RECIPIENT_NOT_SET";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "reason";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "CallFailed";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "Call_TokenIdMismatch";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "CallerNotZoraCreator1155";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "CanOnlyReduceMaxSupply";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "quantity";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "totalMinted";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "maxSupply";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "CannotMintMoreTokens";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "CannotReduceMaxSupplyBelowMinted";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "proposedAddress";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "Config_TransferHookNotSupported";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ERC1155_ACCOUNTS_AND_IDS_LENGTH_MISMATCH";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ERC1155_ADDRESS_ZERO_IS_NOT_A_VALID_OWNER";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ERC1155_BURN_AMOUNT_EXCEEDS_BALANCE";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ERC1155_BURN_FROM_ZERO_ADDRESS";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ERC1155_CALLER_IS_NOT_TOKEN_OWNER_OR_APPROVED";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ERC1155_ERC1155RECEIVER_REJECTED_TOKENS";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ERC1155_IDS_AND_AMOUNTS_LENGTH_MISMATCH";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ERC1155_INSUFFICIENT_BALANCE_FOR_TRANSFER";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ERC1155_MINT_TO_ZERO_ADDRESS";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ERC1155_MINT_TO_ZERO_ADDRESS";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ERC1155_SETTING_APPROVAL_FOR_SELF";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ERC1155_TRANSFER_TO_NON_ERC1155RECEIVER_IMPLEMENTER";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ERC1155_TRANSFER_TO_ZERO_ADDRESS";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ERC1967_NEW_IMPL_NOT_CONTRACT";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ERC1967_NEW_IMPL_NOT_UUPS";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ERC1967_UNSUPPORTED_PROXIABLEUUID";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "recipient";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "amount";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "ETHWithdrawFailed";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "FUNCTION_MUST_BE_CALLED_THROUGH_ACTIVE_PROXY";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "FUNCTION_MUST_BE_CALLED_THROUGH_DELEGATECALL";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "FirstMinterAddressZero";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "amount";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "contractValue";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "FundsWithdrawInsolvent";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "INITIALIZABLE_CONTRACT_ALREADY_INITIALIZED";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "INITIALIZABLE_CONTRACT_IS_NOT_INITIALIZING";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "INVALID_ADDRESS_ZERO";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "INVALID_ETH_AMOUNT";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "mintTo";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "merkleProof";
        readonly internalType: "bytes32[]";
        readonly type: "bytes32[]";
    }, {
        readonly name: "merkleRoot";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly name: "InvalidMerkleProof";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "InvalidMintSchedule";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "InvalidMintSchedule";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "InvalidPremintVersion";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "InvalidSignature";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "InvalidSignatureVersion";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "magicValue";
        readonly internalType: "bytes4";
        readonly type: "bytes4";
    }];
    readonly name: "InvalidSigner";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "MintNotYetStarted";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "Mint_InsolventSaleTransfer";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "Mint_InvalidMintArrayLength";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "Mint_TokenIDMintNotAllowed";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "Mint_UnknownCommand";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "Mint_ValueTransferFail";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "MinterContractAlreadyExists";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "MinterContractDoesNotExist";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "NewOwnerNeedsToBeAdmin";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "NoRendererForToken";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "NonEthRedemption";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ONLY_CREATE_REFERRAL";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "OnlyAllowedForRegisteredMinter";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "OnlyAllowedForTimedSaleStrategy";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "OnlyTransfersFromZoraMints";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "PremintDeleted";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "caller";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "recipient";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "amount";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "ProtocolRewardsWithdrawFailed";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "renderer";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "RendererNotValid";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "Renderer_NotValidRendererContract";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "SaleEnded";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "SaleHasNotStarted";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "targetContract";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "Sale_CannotCallNonSalesContract";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "expected";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "actual";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "TokenIdMismatch";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "UUPS_UPGRADEABLE_MUST_NOT_BE_CALLED_THROUGH_DELEGATECALL";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "user";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "limit";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "requestedAmount";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "UserExceedsMintLimit";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "user";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "role";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "UserMissingRoleForToken";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "WrongValueSent";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "premintSignerContractFailedToRecoverSigner";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "premintSignerContractNotAContract";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "AccessControlBadConfirmation";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "account";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "neededRole";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly name: "AccessControlUnauthorizedAccount";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "target";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "AddressEmptyCode";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "AddressZero";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ArrayLengthMismatch";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "CannotSparkOwnComment";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "commentAddress";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "commentTokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "replyAddress";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "replyTokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "CommentAddressOrTokenIdsDoNotMatch";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "CommentDoesntExist";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "expected";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "actual";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "CommenterMismatch";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "commentId";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly name: "DuplicateComment";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "implementation";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "ERC1967InvalidImplementation";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ERC1967NonPayable";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "deadline";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "ERC2612ExpiredSignature";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "EmptyComment";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "FailedInnerCall";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "wrongDestinationChainId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "IncorrectDestinationChain";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "actual";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "expected";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "IncorrectETHAmountForSparks";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "account";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "currentNonce";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly name: "InvalidAccountNonce";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "InvalidInitialization";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "InvalidSignature";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "MustSendAtLeastOneSpark";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "NoFundsRecipient";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "NotInitializing";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "NotSmartWallet";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "NotSmartWalletOwner";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "NotTokenHolderOrAdmin";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "OnlySparksContract";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "TransferFailed";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "UUPSUnauthorizedCallContext";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "slot";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly name: "UUPSUnsupportedProxiableUUID";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "currentName";
        readonly internalType: "string";
        readonly type: "string";
    }, {
        readonly name: "newName";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly name: "UpgradeToMismatchedContractName";
}];
/**
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x77777775C5074b74540d9cC63Dd840A8c692B4B5)
 * - [__View Contract on Op Mainnet Optimism Explorer__](https://optimistic.etherscan.io/address/0x77777775C5074b74540d9cC63Dd840A8c692B4B5)
 * - [__View Contract on Base Basescan__](https://basescan.org/address/0x77777775C5074b74540d9cC63Dd840A8c692B4B5)
 * - [__View Contract on Arbitrum One Arbiscan__](https://arbiscan.io/address/0x77777775C5074b74540d9cC63Dd840A8c692B4B5)
 * - [__View Contract on Blast Blastscan__](https://blastscan.io/address/0x77777775C5074b74540d9cC63Dd840A8c692B4B5)
 * - [__View Contract on Base Sepolia Basescan__](https://sepolia.basescan.org/address/0x77777775C5074b74540d9cC63Dd840A8c692B4B5)
 * - [__View Contract on Zora Explorer__](https://explorer.zora.energy/address/0x77777775C5074b74540d9cC63Dd840A8c692B4B5)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x77777775C5074b74540d9cC63Dd840A8c692B4B5)
 * - [__View Contract on Op Sepolia Blockscout__](https://optimism-sepolia.blockscout.com/address/0x77777775C5074b74540d9cC63Dd840A8c692B4B5)
 * - [__View Contract on Zora Sepolia Zora Sepolia Explorer__](https://sepolia.explorer.zora.energy//address/0x77777775C5074b74540d9cC63Dd840A8c692B4B5)
 */
export declare const callerAndCommenterAddress: {
    readonly 1: "0x77777775C5074b74540d9cC63Dd840A8c692B4B5";
    readonly 10: "0x77777775C5074b74540d9cC63Dd840A8c692B4B5";
    readonly 8453: "0x77777775C5074b74540d9cC63Dd840A8c692B4B5";
    readonly 42161: "0x77777775C5074b74540d9cC63Dd840A8c692B4B5";
    readonly 81457: "0x77777775C5074b74540d9cC63Dd840A8c692B4B5";
    readonly 84532: "0x77777775C5074b74540d9cC63Dd840A8c692B4B5";
    readonly 7777777: "0x77777775C5074b74540d9cC63Dd840A8c692B4B5";
    readonly 11155111: "0x77777775C5074b74540d9cC63Dd840A8c692B4B5";
    readonly 11155420: "0x77777775C5074b74540d9cC63Dd840A8c692B4B5";
    readonly 999999999: "0x77777775C5074b74540d9cC63Dd840A8c692B4B5";
};
/**
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x77777775C5074b74540d9cC63Dd840A8c692B4B5)
 * - [__View Contract on Op Mainnet Optimism Explorer__](https://optimistic.etherscan.io/address/0x77777775C5074b74540d9cC63Dd840A8c692B4B5)
 * - [__View Contract on Base Basescan__](https://basescan.org/address/0x77777775C5074b74540d9cC63Dd840A8c692B4B5)
 * - [__View Contract on Arbitrum One Arbiscan__](https://arbiscan.io/address/0x77777775C5074b74540d9cC63Dd840A8c692B4B5)
 * - [__View Contract on Blast Blastscan__](https://blastscan.io/address/0x77777775C5074b74540d9cC63Dd840A8c692B4B5)
 * - [__View Contract on Base Sepolia Basescan__](https://sepolia.basescan.org/address/0x77777775C5074b74540d9cC63Dd840A8c692B4B5)
 * - [__View Contract on Zora Explorer__](https://explorer.zora.energy/address/0x77777775C5074b74540d9cC63Dd840A8c692B4B5)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x77777775C5074b74540d9cC63Dd840A8c692B4B5)
 * - [__View Contract on Op Sepolia Blockscout__](https://optimism-sepolia.blockscout.com/address/0x77777775C5074b74540d9cC63Dd840A8c692B4B5)
 * - [__View Contract on Zora Sepolia Zora Sepolia Explorer__](https://sepolia.explorer.zora.energy//address/0x77777775C5074b74540d9cC63Dd840A8c692B4B5)
 */
export declare const callerAndCommenterConfig: {
    readonly address: {
        readonly 1: "0x77777775C5074b74540d9cC63Dd840A8c692B4B5";
        readonly 10: "0x77777775C5074b74540d9cC63Dd840A8c692B4B5";
        readonly 8453: "0x77777775C5074b74540d9cC63Dd840A8c692B4B5";
        readonly 42161: "0x77777775C5074b74540d9cC63Dd840A8c692B4B5";
        readonly 81457: "0x77777775C5074b74540d9cC63Dd840A8c692B4B5";
        readonly 84532: "0x77777775C5074b74540d9cC63Dd840A8c692B4B5";
        readonly 7777777: "0x77777775C5074b74540d9cC63Dd840A8c692B4B5";
        readonly 11155111: "0x77777775C5074b74540d9cC63Dd840A8c692B4B5";
        readonly 11155420: "0x77777775C5074b74540d9cC63Dd840A8c692B4B5";
        readonly 999999999: "0x77777775C5074b74540d9cC63Dd840A8c692B4B5";
    };
    readonly abi: readonly [{
        readonly type: "constructor";
        readonly inputs: readonly [{
            readonly name: "_comments";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "_zoraTimedSale";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "_swapHelper";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "_sparksValue";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "UPGRADE_INTERFACE_VERSION";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "acceptOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "commenter";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "quantity";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "collection";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "excessRefundRecipient";
            readonly internalType: "address payable";
            readonly type: "address";
        }, {
            readonly name: "maxEthToSpend";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "sqrtPriceLimitX96";
            readonly internalType: "uint160";
            readonly type: "uint160";
        }, {
            readonly name: "comment";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly name: "buyOnSecondaryAndComment";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "struct IComments.CommentIdentifier";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "commenter";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "contractAddress";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "tokenId";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "nonce";
                readonly internalType: "bytes32";
                readonly type: "bytes32";
            }];
        }];
        readonly stateMutability: "payable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "comments";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "contract IComments";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "contractName";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly stateMutability: "pure";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "contractVersion";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly stateMutability: "pure";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "eip712Domain";
        readonly outputs: readonly [{
            readonly name: "fields";
            readonly internalType: "bytes1";
            readonly type: "bytes1";
        }, {
            readonly name: "name";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "version";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "chainId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "verifyingContract";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "salt";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }, {
            readonly name: "extensions";
            readonly internalType: "uint256[]";
            readonly type: "uint256[]";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "permit";
            readonly internalType: "struct ICallerAndCommenter.PermitBuyOnSecondaryAndComment";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "commenter";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "quantity";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "collection";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "tokenId";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "maxEthToSpend";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "sqrtPriceLimitX96";
                readonly internalType: "uint160";
                readonly type: "uint160";
            }, {
                readonly name: "comment";
                readonly internalType: "string";
                readonly type: "string";
            }, {
                readonly name: "deadline";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "nonce";
                readonly internalType: "bytes32";
                readonly type: "bytes32";
            }, {
                readonly name: "sourceChainId";
                readonly internalType: "uint32";
                readonly type: "uint32";
            }, {
                readonly name: "destinationChainId";
                readonly internalType: "uint32";
                readonly type: "uint32";
            }];
        }];
        readonly name: "hashPermitBuyOnSecondaryAndComment";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "permit";
            readonly internalType: "struct ICallerAndCommenter.PermitTimedSaleMintAndComment";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "commenter";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "quantity";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "collection";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "tokenId";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "mintReferral";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "comment";
                readonly internalType: "string";
                readonly type: "string";
            }, {
                readonly name: "deadline";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "nonce";
                readonly internalType: "bytes32";
                readonly type: "bytes32";
            }, {
                readonly name: "sourceChainId";
                readonly internalType: "uint32";
                readonly type: "uint32";
            }, {
                readonly name: "destinationChainId";
                readonly internalType: "uint32";
                readonly type: "uint32";
            }];
        }];
        readonly name: "hashPermitTimedSaleMintAndComment";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "owner";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "initialize";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "owner";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "nonce";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly name: "nonceUsed";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "owner";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "pendingOwner";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "permit";
            readonly internalType: "struct ICallerAndCommenter.PermitBuyOnSecondaryAndComment";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "commenter";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "quantity";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "collection";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "tokenId";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "maxEthToSpend";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "sqrtPriceLimitX96";
                readonly internalType: "uint160";
                readonly type: "uint160";
            }, {
                readonly name: "comment";
                readonly internalType: "string";
                readonly type: "string";
            }, {
                readonly name: "deadline";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "nonce";
                readonly internalType: "bytes32";
                readonly type: "bytes32";
            }, {
                readonly name: "sourceChainId";
                readonly internalType: "uint32";
                readonly type: "uint32";
            }, {
                readonly name: "destinationChainId";
                readonly internalType: "uint32";
                readonly type: "uint32";
            }];
        }, {
            readonly name: "signature";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "permitBuyOnSecondaryAndComment";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "struct IComments.CommentIdentifier";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "commenter";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "contractAddress";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "tokenId";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "nonce";
                readonly internalType: "bytes32";
                readonly type: "bytes32";
            }];
        }];
        readonly stateMutability: "payable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "permit";
            readonly internalType: "struct ICallerAndCommenter.PermitTimedSaleMintAndComment";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "commenter";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "quantity";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "collection";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "tokenId";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "mintReferral";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "comment";
                readonly internalType: "string";
                readonly type: "string";
            }, {
                readonly name: "deadline";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "nonce";
                readonly internalType: "bytes32";
                readonly type: "bytes32";
            }, {
                readonly name: "sourceChainId";
                readonly internalType: "uint32";
                readonly type: "uint32";
            }, {
                readonly name: "destinationChainId";
                readonly internalType: "uint32";
                readonly type: "uint32";
            }];
        }, {
            readonly name: "signature";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "permitTimedSaleMintAndComment";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "struct IComments.CommentIdentifier";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "commenter";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "contractAddress";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "tokenId";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "nonce";
                readonly internalType: "bytes32";
                readonly type: "bytes32";
            }];
        }];
        readonly stateMutability: "payable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "proxiableUUID";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "renounceOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "secondarySwap";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "contract ISecondarySwap";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "commenter";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "quantity";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "collection";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "recipient";
            readonly internalType: "address payable";
            readonly type: "address";
        }, {
            readonly name: "minEthToAcquire";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "sqrtPriceLimitX96";
            readonly internalType: "uint160";
            readonly type: "uint160";
        }, {
            readonly name: "comment";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly name: "sellOnSecondaryAndComment";
        readonly outputs: readonly [{
            readonly name: "commentIdentifier";
            readonly internalType: "struct IComments.CommentIdentifier";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "commenter";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "contractAddress";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "tokenId";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "nonce";
                readonly internalType: "bytes32";
                readonly type: "bytes32";
            }];
        }];
        readonly stateMutability: "payable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "sparkValue";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "commenter";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "quantity";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "collection";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "mintReferral";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "comment";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly name: "timedSaleMintAndComment";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "struct IComments.CommentIdentifier";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "commenter";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "contractAddress";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "tokenId";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "nonce";
                readonly internalType: "bytes32";
                readonly type: "bytes32";
            }];
        }];
        readonly stateMutability: "payable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "newOwner";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "transferOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "newImplementation";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "data";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "upgradeToAndCall";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "zoraTimedSale";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "contract IZoraTimedSaleStrategy";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [];
        readonly name: "EIP712DomainChanged";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "version";
            readonly internalType: "uint64";
            readonly type: "uint64";
            readonly indexed: false;
        }];
        readonly name: "Initialized";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "commentId";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
            readonly indexed: true;
        }, {
            readonly name: "commentIdentifier";
            readonly internalType: "struct IComments.CommentIdentifier";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "commenter";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "contractAddress";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "tokenId";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "nonce";
                readonly internalType: "bytes32";
                readonly type: "bytes32";
            }];
            readonly indexed: false;
        }, {
            readonly name: "quantity";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: false;
        }, {
            readonly name: "text";
            readonly internalType: "string";
            readonly type: "string";
            readonly indexed: false;
        }];
        readonly name: "MintedAndCommented";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "previousOwner";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "newOwner";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }];
        readonly name: "OwnershipTransferStarted";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "previousOwner";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "newOwner";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }];
        readonly name: "OwnershipTransferred";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "commentId";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
            readonly indexed: true;
        }, {
            readonly name: "commentIdentifier";
            readonly internalType: "struct IComments.CommentIdentifier";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "commenter";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "contractAddress";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "tokenId";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "nonce";
                readonly internalType: "bytes32";
                readonly type: "bytes32";
            }];
            readonly indexed: false;
        }, {
            readonly name: "quantity";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: true;
        }, {
            readonly name: "comment";
            readonly internalType: "string";
            readonly type: "string";
            readonly indexed: false;
        }, {
            readonly name: "swapDirection";
            readonly internalType: "enum ICallerAndCommenter.SwapDirection";
            readonly type: "uint8";
            readonly indexed: true;
        }];
        readonly name: "SwappedOnSecondaryAndCommented";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "implementation";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }];
        readonly name: "Upgraded";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "target";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "AddressEmptyCode";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "expected";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "actual";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "CommenterMismatch";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "implementation";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "ERC1967InvalidImplementation";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ERC1967NonPayable";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "deadline";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "ERC2612ExpiredSignature";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "FailedInnerCall";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "wrongDestinationChainId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "IncorrectDestinationChain";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "account";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "currentNonce";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly name: "InvalidAccountNonce";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "InvalidInitialization";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "InvalidSignature";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "NotInitializing";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "owner";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "OwnableInvalidOwner";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "account";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "OwnableUnauthorizedAccount";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "collection";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "SaleNotSet";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "UUPSUnauthorizedCallContext";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "slot";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly name: "UUPSUnsupportedProxiableUUID";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "currentName";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "newName";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly name: "UpgradeToMismatchedContractName";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "expected";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "actual";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "WrongValueSent";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "target";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "AddressEmptyCode";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "account";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "AddressInsufficientBalance";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "AddressZero";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ERC1167FailedCreateClone";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "implementation";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "ERC1967InvalidImplementation";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ERC1967NonPayable";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "EndTimeCannotBeInThePast";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "FailedInnerCall";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "InsufficientFunds";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "InvalidInitialization";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "MarketAlreadyLaunched";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "MarketMinimumNotReached";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "MinimumMarketEthNotMet";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "NeedsToBeAtLeastOneSaleToStartMarket";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "NotInitializing";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "OnlyZoraRewardRecipient";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "owner";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "OwnableInvalidOwner";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "account";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "OwnableUnauthorizedAccount";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ReentrancyGuardReentrantCall";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "RequestMintInvalidUseMint";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ResetSaleNotAvailable";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "SaleAlreadySet";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "SaleEnded";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "SaleHasNotStarted";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "SaleInProgress";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "SaleNotSet";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "SaleV2AlreadyStarted";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "SaleV2Ended";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "SaleV2NotSet";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "StartTimeCannotBeAfterEndTime";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "UUPSUnauthorizedCallContext";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "slot";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly name: "UUPSUnsupportedProxiableUUID";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "WrongValueSent";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ZoraCreator1155ContractNeedsToSupportReduceSupply";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ADDRESS_DELEGATECALL_TO_NON_CONTRACT";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ADDRESS_LOW_LEVEL_CALL_FAILED";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "operator";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "user";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "Burn_NotOwnerOrApproved";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "CREATOR_FUNDS_RECIPIENT_NOT_SET";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "reason";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "CallFailed";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "Call_TokenIdMismatch";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "CallerNotZoraCreator1155";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "CanOnlyReduceMaxSupply";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "quantity";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "totalMinted";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "maxSupply";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "CannotMintMoreTokens";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "CannotReduceMaxSupplyBelowMinted";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "proposedAddress";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "Config_TransferHookNotSupported";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ERC1155_ACCOUNTS_AND_IDS_LENGTH_MISMATCH";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ERC1155_ADDRESS_ZERO_IS_NOT_A_VALID_OWNER";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ERC1155_BURN_AMOUNT_EXCEEDS_BALANCE";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ERC1155_BURN_FROM_ZERO_ADDRESS";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ERC1155_CALLER_IS_NOT_TOKEN_OWNER_OR_APPROVED";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ERC1155_ERC1155RECEIVER_REJECTED_TOKENS";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ERC1155_IDS_AND_AMOUNTS_LENGTH_MISMATCH";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ERC1155_INSUFFICIENT_BALANCE_FOR_TRANSFER";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ERC1155_MINT_TO_ZERO_ADDRESS";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ERC1155_MINT_TO_ZERO_ADDRESS";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ERC1155_SETTING_APPROVAL_FOR_SELF";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ERC1155_TRANSFER_TO_NON_ERC1155RECEIVER_IMPLEMENTER";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ERC1155_TRANSFER_TO_ZERO_ADDRESS";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ERC1967_NEW_IMPL_NOT_CONTRACT";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ERC1967_NEW_IMPL_NOT_UUPS";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ERC1967_UNSUPPORTED_PROXIABLEUUID";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "recipient";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "amount";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "ETHWithdrawFailed";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "FUNCTION_MUST_BE_CALLED_THROUGH_ACTIVE_PROXY";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "FUNCTION_MUST_BE_CALLED_THROUGH_DELEGATECALL";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "FirstMinterAddressZero";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "amount";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "contractValue";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "FundsWithdrawInsolvent";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "INITIALIZABLE_CONTRACT_ALREADY_INITIALIZED";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "INITIALIZABLE_CONTRACT_IS_NOT_INITIALIZING";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "INVALID_ADDRESS_ZERO";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "INVALID_ETH_AMOUNT";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "mintTo";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "merkleProof";
            readonly internalType: "bytes32[]";
            readonly type: "bytes32[]";
        }, {
            readonly name: "merkleRoot";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly name: "InvalidMerkleProof";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "InvalidMintSchedule";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "InvalidMintSchedule";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "InvalidPremintVersion";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "InvalidSignature";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "InvalidSignatureVersion";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "magicValue";
            readonly internalType: "bytes4";
            readonly type: "bytes4";
        }];
        readonly name: "InvalidSigner";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "MintNotYetStarted";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "Mint_InsolventSaleTransfer";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "Mint_InvalidMintArrayLength";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "Mint_TokenIDMintNotAllowed";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "Mint_UnknownCommand";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "Mint_ValueTransferFail";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "MinterContractAlreadyExists";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "MinterContractDoesNotExist";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "NewOwnerNeedsToBeAdmin";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "NoRendererForToken";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "NonEthRedemption";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ONLY_CREATE_REFERRAL";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "OnlyAllowedForRegisteredMinter";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "OnlyAllowedForTimedSaleStrategy";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "OnlyTransfersFromZoraMints";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "PremintDeleted";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "caller";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "recipient";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "amount";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "ProtocolRewardsWithdrawFailed";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "renderer";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "RendererNotValid";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "Renderer_NotValidRendererContract";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "SaleEnded";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "SaleHasNotStarted";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "targetContract";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "Sale_CannotCallNonSalesContract";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "expected";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "actual";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "TokenIdMismatch";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "UUPS_UPGRADEABLE_MUST_NOT_BE_CALLED_THROUGH_DELEGATECALL";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "user";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "limit";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "requestedAmount";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "UserExceedsMintLimit";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "user";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "role";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "UserMissingRoleForToken";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "WrongValueSent";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "premintSignerContractFailedToRecoverSigner";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "premintSignerContractNotAContract";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "AccessControlBadConfirmation";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "account";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "neededRole";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly name: "AccessControlUnauthorizedAccount";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "target";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "AddressEmptyCode";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "AddressZero";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ArrayLengthMismatch";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "CannotSparkOwnComment";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "commentAddress";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "commentTokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "replyAddress";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "replyTokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "CommentAddressOrTokenIdsDoNotMatch";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "CommentDoesntExist";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "expected";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "actual";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "CommenterMismatch";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "commentId";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly name: "DuplicateComment";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "implementation";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "ERC1967InvalidImplementation";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ERC1967NonPayable";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "deadline";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "ERC2612ExpiredSignature";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "EmptyComment";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "FailedInnerCall";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "wrongDestinationChainId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "IncorrectDestinationChain";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "actual";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "expected";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "IncorrectETHAmountForSparks";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "account";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "currentNonce";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly name: "InvalidAccountNonce";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "InvalidInitialization";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "InvalidSignature";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "MustSendAtLeastOneSpark";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "NoFundsRecipient";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "NotInitializing";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "NotSmartWallet";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "NotSmartWalletOwner";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "NotTokenHolderOrAdmin";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "OnlySparksContract";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "TransferFailed";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "UUPSUnauthorizedCallContext";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "slot";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly name: "UUPSUnsupportedProxiableUUID";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "currentName";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "newName";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly name: "UpgradeToMismatchedContractName";
    }];
};
export declare const coinABI: readonly [{
    readonly type: "constructor";
    readonly inputs: readonly [{
        readonly name: "protocolRewardRecipient_";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "protocolRewards_";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "weth_";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "v3Factory_";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "swapRouter_";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "airlock_";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "receive";
    readonly stateMutability: "payable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "DOMAIN_SEPARATOR";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "WETH";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "account";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "addOwner";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "accounts";
        readonly internalType: "address[]";
        readonly type: "address[]";
    }];
    readonly name: "addOwners";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "airlock";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "owner";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "spender";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "allowance";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "spender";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "value";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "approve";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "account";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "balanceOf";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "amount";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "burn";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "recipient";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "orderSize";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "minAmountOut";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "sqrtPriceLimitX96";
        readonly internalType: "uint160";
        readonly type: "uint160";
    }, {
        readonly name: "tradeReferrer";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "buy";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "payable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "pushEthRewards";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly name: "claimSecondaryRewards";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "contractURI";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "contractVersion";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly stateMutability: "pure";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "currency";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "decimals";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint8";
        readonly type: "uint8";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "dopplerFeeRecipient";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "eip712Domain";
    readonly outputs: readonly [{
        readonly name: "fields";
        readonly internalType: "bytes1";
        readonly type: "bytes1";
    }, {
        readonly name: "name";
        readonly internalType: "string";
        readonly type: "string";
    }, {
        readonly name: "version";
        readonly internalType: "string";
        readonly type: "string";
    }, {
        readonly name: "chainId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "verifyingContract";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "salt";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }, {
        readonly name: "extensions";
        readonly internalType: "uint256[]";
        readonly type: "uint256[]";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "getPoolConfiguration";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "struct PoolConfiguration";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "version";
            readonly internalType: "uint8";
            readonly type: "uint8";
        }, {
            readonly name: "numPositions";
            readonly internalType: "uint16";
            readonly type: "uint16";
        }, {
            readonly name: "fee";
            readonly internalType: "uint24";
            readonly type: "uint24";
        }, {
            readonly name: "tickSpacing";
            readonly internalType: "int24";
            readonly type: "int24";
        }, {
            readonly name: "numDiscoveryPositions";
            readonly internalType: "uint16[]";
            readonly type: "uint16[]";
        }, {
            readonly name: "tickLower";
            readonly internalType: "int24[]";
            readonly type: "int24[]";
        }, {
            readonly name: "tickUpper";
            readonly internalType: "int24[]";
            readonly type: "int24[]";
        }, {
            readonly name: "maxDiscoverySupplyShare";
            readonly internalType: "uint256[]";
            readonly type: "uint256[]";
        }];
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "payoutRecipient_";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "owners_";
        readonly internalType: "address[]";
        readonly type: "address[]";
    }, {
        readonly name: "tokenURI_";
        readonly internalType: "string";
        readonly type: "string";
    }, {
        readonly name: "name_";
        readonly internalType: "string";
        readonly type: "string";
    }, {
        readonly name: "symbol_";
        readonly internalType: "string";
        readonly type: "string";
    }, {
        readonly name: "platformReferrer_";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "currency_";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "poolAddress_";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "poolConfiguration_";
        readonly internalType: "struct PoolConfiguration";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "version";
            readonly internalType: "uint8";
            readonly type: "uint8";
        }, {
            readonly name: "numPositions";
            readonly internalType: "uint16";
            readonly type: "uint16";
        }, {
            readonly name: "fee";
            readonly internalType: "uint24";
            readonly type: "uint24";
        }, {
            readonly name: "tickSpacing";
            readonly internalType: "int24";
            readonly type: "int24";
        }, {
            readonly name: "numDiscoveryPositions";
            readonly internalType: "uint16[]";
            readonly type: "uint16[]";
        }, {
            readonly name: "tickLower";
            readonly internalType: "int24[]";
            readonly type: "int24[]";
        }, {
            readonly name: "tickUpper";
            readonly internalType: "int24[]";
            readonly type: "int24[]";
        }, {
            readonly name: "maxDiscoverySupplyShare";
            readonly internalType: "uint256[]";
            readonly type: "uint256[]";
        }];
    }, {
        readonly name: "positions_";
        readonly internalType: "struct LpPosition[]";
        readonly type: "tuple[]";
        readonly components: readonly [{
            readonly name: "tickLower";
            readonly internalType: "int24";
            readonly type: "int24";
        }, {
            readonly name: "tickUpper";
            readonly internalType: "int24";
            readonly type: "int24";
        }, {
            readonly name: "liquidity";
            readonly internalType: "uint128";
            readonly type: "uint128";
        }];
    }];
    readonly name: "initialize";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "account";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "isOwner";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "market";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "marketVersion";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint8";
        readonly type: "uint8";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "name";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "owner";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "nonces";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "owners";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address[]";
        readonly type: "address[]";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "payoutRecipient";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "owner";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "spender";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "value";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "deadline";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "v";
        readonly internalType: "uint8";
        readonly type: "uint8";
    }, {
        readonly name: "r";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }, {
        readonly name: "s";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly name: "permit";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "platformReferrer";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "poolAddress";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "poolConfiguration";
    readonly outputs: readonly [{
        readonly name: "version";
        readonly internalType: "uint8";
        readonly type: "uint8";
    }, {
        readonly name: "numPositions";
        readonly internalType: "uint16";
        readonly type: "uint16";
    }, {
        readonly name: "fee";
        readonly internalType: "uint24";
        readonly type: "uint24";
    }, {
        readonly name: "tickSpacing";
        readonly internalType: "int24";
        readonly type: "int24";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "positions";
    readonly outputs: readonly [{
        readonly name: "tickLower";
        readonly internalType: "int24";
        readonly type: "int24";
    }, {
        readonly name: "tickUpper";
        readonly internalType: "int24";
        readonly type: "int24";
    }, {
        readonly name: "liquidity";
        readonly internalType: "uint128";
        readonly type: "uint128";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "protocolRewardRecipient";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "protocolRewards";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "account";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "removeOwner";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "accounts";
        readonly internalType: "address[]";
        readonly type: "address[]";
    }];
    readonly name: "removeOwners";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "revokeOwnership";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "recipient";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "orderSize";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "minAmountOut";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "sqrtPriceLimitX96";
        readonly internalType: "uint160";
        readonly type: "uint160";
    }, {
        readonly name: "tradeReferrer";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "sell";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "newURI";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly name: "setContractURI";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "newPayoutRecipient";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "setPayoutRecipient";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "interfaceId";
        readonly internalType: "bytes4";
        readonly type: "bytes4";
    }];
    readonly name: "supportsInterface";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "pure";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "swapRouter";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "symbol";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "tokenURI";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "totalSupply";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "to";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "value";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "transfer";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "from";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "to";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "value";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "transferFrom";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "amount0Owed";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "amount1Owed";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "uniswapV3MintCallback";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "v3Factory";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "owner";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "spender";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "value";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }];
    readonly name: "Approval";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "buyer";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "recipient";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "tradeReferrer";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "coinsPurchased";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }, {
        readonly name: "currency";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }, {
        readonly name: "amountFee";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }, {
        readonly name: "amountSold";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }];
    readonly name: "CoinBuy";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "payoutRecipient";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "platformReferrer";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "protocolRewardRecipient";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }, {
        readonly name: "currency";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }, {
        readonly name: "marketRewards";
        readonly internalType: "struct ICoin.MarketRewards";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "totalAmountCurrency";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "totalAmountCoin";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "creatorPayoutAmountCurrency";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "creatorPayoutAmountCoin";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "platformReferrerAmountCurrency";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "platformReferrerAmountCoin";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "protocolAmountCurrency";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "protocolAmountCoin";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly indexed: false;
    }];
    readonly name: "CoinMarketRewards";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "caller";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "prevRecipient";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "newRecipient";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }];
    readonly name: "CoinPayoutRecipientUpdated";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "seller";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "recipient";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "tradeReferrer";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "coinsSold";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }, {
        readonly name: "currency";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }, {
        readonly name: "amountFee";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }, {
        readonly name: "amountPurchased";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }];
    readonly name: "CoinSell";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "payoutRecipient";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "platformReferrer";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "tradeReferrer";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "protocolRewardRecipient";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }, {
        readonly name: "creatorReward";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }, {
        readonly name: "platformReferrerReward";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }, {
        readonly name: "traderReferrerReward";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }, {
        readonly name: "protocolReward";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }, {
        readonly name: "currency";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }];
    readonly name: "CoinTradeRewards";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "sender";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "recipient";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "amount";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }, {
        readonly name: "senderBalance";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }, {
        readonly name: "recipientBalance";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }];
    readonly name: "CoinTransfer";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "caller";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "newURI";
        readonly internalType: "string";
        readonly type: "string";
        readonly indexed: false;
    }, {
        readonly name: "name";
        readonly internalType: "string";
        readonly type: "string";
        readonly indexed: false;
    }];
    readonly name: "ContractMetadataUpdated";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [];
    readonly name: "ContractURIUpdated";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [];
    readonly name: "EIP712DomainChanged";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "version";
        readonly internalType: "uint64";
        readonly type: "uint64";
        readonly indexed: false;
    }];
    readonly name: "Initialized";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "caller";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "prevOwner";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "newOwner";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }];
    readonly name: "OwnerUpdated";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "from";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "to";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "value";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }];
    readonly name: "Transfer";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "target";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "AddressEmptyCode";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "account";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "AddressInsufficientBalance";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "AddressZero";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "AddressZero";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "AlreadyOwner";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "CannotMintZeroLiquidity";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "DopplerPoolMustHaveMoreThan2DiscoveryPositions";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ECDSAInvalidSignature";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "length";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "ECDSAInvalidSignatureLength";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "s";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly name: "ECDSAInvalidSignatureS";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "spender";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "allowance";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "needed";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "ERC20InsufficientAllowance";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "sender";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "balance";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "needed";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "ERC20InsufficientBalance";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "approver";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "ERC20InvalidApprover";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "receiver";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "ERC20InvalidReceiver";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "sender";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "ERC20InvalidSender";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "spender";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "ERC20InvalidSpender";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ERC20TransferAmountMismatch";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "deadline";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "ERC2612ExpiredSignature";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "signer";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "owner";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "ERC2612InvalidSigner";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "EthAmountMismatch";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "EthAmountTooSmall";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "EthTransferFailed";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "EthTransferInvalid";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "FailedInnerCall";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "InitialOrderSizeTooLarge";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "InsufficientFunds";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "InsufficientLiquidity";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "account";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "currentNonce";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "InvalidAccountNonce";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "InvalidCurrencyLowerTick";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "InvalidInitialization";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "InvalidMarketType";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "InvalidPoolVersion";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "tickLower";
        readonly internalType: "int24";
        readonly type: "int24";
    }, {
        readonly name: "tickUpper";
        readonly internalType: "int24";
        readonly type: "int24";
    }];
    readonly name: "InvalidTickRangeMisordered";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "InvalidWethLowerTick";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "LegacyPoolMustHaveOneDiscoveryPosition";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "MarketAlreadyGraduated";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "MarketNotGraduated";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "value";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "limit";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "MaxShareToBeSoldExceeded";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "NotInitializing";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "NotOwner";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "NumDiscoveryPositionsOutOfRange";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "OneOwnerRequired";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "OnlyOwner";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "sender";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "pool";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "OnlyPool";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "OnlyWeth";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "OwnerCannotBeAddressZero";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ReentrancyGuardReentrantCall";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "token";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "SafeERC20FailedOperation";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "SlippageBoundsExceeded";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "UseRevokeOwnershipToRemoveSelf";
}];
/**
 * - [__View Contract on Base Basescan__](https://basescan.org/address/0x777777751622c0d3258f214F9DF38E35BF45baF3)
 * - [__View Contract on Base Sepolia Basescan__](https://sepolia.basescan.org/address/0xaF88840cb637F2684A9E460316b1678AD6245e4a)
 */
export declare const coinFactoryABI: readonly [{
    readonly type: "constructor";
    readonly inputs: readonly [{
        readonly name: "_coinImpl";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "_coinV4Impl";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "UPGRADE_INTERFACE_VERSION";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "msgSender";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "name";
        readonly internalType: "string";
        readonly type: "string";
    }, {
        readonly name: "symbol";
        readonly internalType: "string";
        readonly type: "string";
    }, {
        readonly name: "poolConfig";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }, {
        readonly name: "platformReferrer";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "coinSalt";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly name: "coinAddress";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "coinImpl";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "coinV4Impl";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "contractName";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly stateMutability: "pure";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "contractVersion";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly stateMutability: "pure";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "payoutRecipient";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "owners";
        readonly internalType: "address[]";
        readonly type: "address[]";
    }, {
        readonly name: "uri";
        readonly internalType: "string";
        readonly type: "string";
    }, {
        readonly name: "name";
        readonly internalType: "string";
        readonly type: "string";
    }, {
        readonly name: "symbol";
        readonly internalType: "string";
        readonly type: "string";
    }, {
        readonly name: "platformReferrer";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "currency";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "";
        readonly internalType: "int24";
        readonly type: "int24";
    }, {
        readonly name: "orderSize";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "deploy";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "payable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "payoutRecipient";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "owners";
        readonly internalType: "address[]";
        readonly type: "address[]";
    }, {
        readonly name: "uri";
        readonly internalType: "string";
        readonly type: "string";
    }, {
        readonly name: "name";
        readonly internalType: "string";
        readonly type: "string";
    }, {
        readonly name: "symbol";
        readonly internalType: "string";
        readonly type: "string";
    }, {
        readonly name: "poolConfig";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }, {
        readonly name: "platformReferrer";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "postDeployHook";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "postDeployHookData";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }, {
        readonly name: "coinSalt";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly name: "deploy";
    readonly outputs: readonly [{
        readonly name: "coin";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "postDeployHookDataOut";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly stateMutability: "payable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "payoutRecipient";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "owners";
        readonly internalType: "address[]";
        readonly type: "address[]";
    }, {
        readonly name: "uri";
        readonly internalType: "string";
        readonly type: "string";
    }, {
        readonly name: "name";
        readonly internalType: "string";
        readonly type: "string";
    }, {
        readonly name: "symbol";
        readonly internalType: "string";
        readonly type: "string";
    }, {
        readonly name: "poolConfig";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }, {
        readonly name: "platformReferrer";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "orderSize";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "deploy";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "payable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "payoutRecipient";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "owners";
        readonly internalType: "address[]";
        readonly type: "address[]";
    }, {
        readonly name: "uri";
        readonly internalType: "string";
        readonly type: "string";
    }, {
        readonly name: "name";
        readonly internalType: "string";
        readonly type: "string";
    }, {
        readonly name: "symbol";
        readonly internalType: "string";
        readonly type: "string";
    }, {
        readonly name: "poolConfig";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }, {
        readonly name: "platformReferrer";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "hook";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "hookData";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "deployWithHook";
    readonly outputs: readonly [{
        readonly name: "coin";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "hookDataOut";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly stateMutability: "payable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "coin";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "getVersionForDeployedCoin";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint8";
        readonly type: "uint8";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "implementation";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "initialOwner";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "initialize";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "owner";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "proxiableUUID";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "renounceOwnership";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "newOwner";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "transferOwnership";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "newImplementation";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "data";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "upgradeToAndCall";
    readonly outputs: readonly [];
    readonly stateMutability: "payable";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "caller";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "payoutRecipient";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "platformReferrer";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "currency";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }, {
        readonly name: "uri";
        readonly internalType: "string";
        readonly type: "string";
        readonly indexed: false;
    }, {
        readonly name: "name";
        readonly internalType: "string";
        readonly type: "string";
        readonly indexed: false;
    }, {
        readonly name: "symbol";
        readonly internalType: "string";
        readonly type: "string";
        readonly indexed: false;
    }, {
        readonly name: "coin";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }, {
        readonly name: "pool";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }, {
        readonly name: "version";
        readonly internalType: "string";
        readonly type: "string";
        readonly indexed: false;
    }];
    readonly name: "CoinCreated";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "caller";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "payoutRecipient";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "platformReferrer";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "currency";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }, {
        readonly name: "uri";
        readonly internalType: "string";
        readonly type: "string";
        readonly indexed: false;
    }, {
        readonly name: "name";
        readonly internalType: "string";
        readonly type: "string";
        readonly indexed: false;
    }, {
        readonly name: "symbol";
        readonly internalType: "string";
        readonly type: "string";
        readonly indexed: false;
    }, {
        readonly name: "coin";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }, {
        readonly name: "poolKey";
        readonly internalType: "struct PoolKey";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "currency0";
            readonly internalType: "Currency";
            readonly type: "address";
        }, {
            readonly name: "currency1";
            readonly internalType: "Currency";
            readonly type: "address";
        }, {
            readonly name: "fee";
            readonly internalType: "uint24";
            readonly type: "uint24";
        }, {
            readonly name: "tickSpacing";
            readonly internalType: "int24";
            readonly type: "int24";
        }, {
            readonly name: "hooks";
            readonly internalType: "contract IHooks";
            readonly type: "address";
        }];
        readonly indexed: false;
    }, {
        readonly name: "poolKeyHash";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
        readonly indexed: false;
    }, {
        readonly name: "version";
        readonly internalType: "string";
        readonly type: "string";
        readonly indexed: false;
    }];
    readonly name: "CoinCreatedV4";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "version";
        readonly internalType: "uint64";
        readonly type: "uint64";
        readonly indexed: false;
    }];
    readonly name: "Initialized";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "previousOwner";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "newOwner";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }];
    readonly name: "OwnershipTransferred";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "implementation";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }];
    readonly name: "Upgraded";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "target";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "AddressEmptyCode";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "account";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "AddressInsufficientBalance";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ArrayLengthMismatch";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "CannotMintZeroLiquidity";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ConfigTickLowerMustBeLessThanTickUpper";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "Deprecated";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ERC1167FailedCreateClone";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "implementation";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "ERC1967InvalidImplementation";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ERC1967NonPayable";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ERC20TransferAmountMismatch";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "EthTransferInvalid";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "FailedInnerCall";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "InvalidHook";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "InvalidInitialization";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "InvalidPoolVersion";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "tickLower";
        readonly internalType: "int24";
        readonly type: "int24";
    }, {
        readonly name: "tickUpper";
        readonly internalType: "int24";
        readonly type: "int24";
    }];
    readonly name: "InvalidTickRangeMisordered";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "tickLower";
        readonly internalType: "int24";
        readonly type: "int24";
    }, {
        readonly name: "tickUpper";
        readonly internalType: "int24";
        readonly type: "int24";
    }];
    readonly name: "InvalidTickRangeMisordered";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "value";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "limit";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "MaxShareToBeSoldExceeded";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "NotInitializing";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "NumDiscoveryPositionsOutOfRange";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "owner";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "OwnableInvalidOwner";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "account";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "OwnableUnauthorizedAccount";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ReentrancyGuardReentrantCall";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "token";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "SafeERC20FailedOperation";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "UUPSUnauthorizedCallContext";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "slot";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly name: "UUPSUnsupportedProxiableUUID";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "currentName";
        readonly internalType: "string";
        readonly type: "string";
    }, {
        readonly name: "newName";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly name: "UpgradeToMismatchedContractName";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ZeroDiscoveryPositions";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ZeroDiscoverySupplyShare";
}];
/**
 * - [__View Contract on Base Basescan__](https://basescan.org/address/0x777777751622c0d3258f214F9DF38E35BF45baF3)
 * - [__View Contract on Base Sepolia Basescan__](https://sepolia.basescan.org/address/0xaF88840cb637F2684A9E460316b1678AD6245e4a)
 */
export declare const coinFactoryAddress: {
    readonly 8453: "0x777777751622c0d3258f214F9DF38E35BF45baF3";
    readonly 84532: "0xaF88840cb637F2684A9E460316b1678AD6245e4a";
};
/**
 * - [__View Contract on Base Basescan__](https://basescan.org/address/0x777777751622c0d3258f214F9DF38E35BF45baF3)
 * - [__View Contract on Base Sepolia Basescan__](https://sepolia.basescan.org/address/0xaF88840cb637F2684A9E460316b1678AD6245e4a)
 */
export declare const coinFactoryConfig: {
    readonly address: {
        readonly 8453: "0x777777751622c0d3258f214F9DF38E35BF45baF3";
        readonly 84532: "0xaF88840cb637F2684A9E460316b1678AD6245e4a";
    };
    readonly abi: readonly [{
        readonly type: "constructor";
        readonly inputs: readonly [{
            readonly name: "_coinImpl";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "_coinV4Impl";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "UPGRADE_INTERFACE_VERSION";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "msgSender";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "name";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "symbol";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "poolConfig";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }, {
            readonly name: "platformReferrer";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "coinSalt";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly name: "coinAddress";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "coinImpl";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "coinV4Impl";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "contractName";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly stateMutability: "pure";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "contractVersion";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly stateMutability: "pure";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "payoutRecipient";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "owners";
            readonly internalType: "address[]";
            readonly type: "address[]";
        }, {
            readonly name: "uri";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "name";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "symbol";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "platformReferrer";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "currency";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "";
            readonly internalType: "int24";
            readonly type: "int24";
        }, {
            readonly name: "orderSize";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "deploy";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "payable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "payoutRecipient";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "owners";
            readonly internalType: "address[]";
            readonly type: "address[]";
        }, {
            readonly name: "uri";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "name";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "symbol";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "poolConfig";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }, {
            readonly name: "platformReferrer";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "postDeployHook";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "postDeployHookData";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }, {
            readonly name: "coinSalt";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly name: "deploy";
        readonly outputs: readonly [{
            readonly name: "coin";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "postDeployHookDataOut";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly stateMutability: "payable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "payoutRecipient";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "owners";
            readonly internalType: "address[]";
            readonly type: "address[]";
        }, {
            readonly name: "uri";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "name";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "symbol";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "poolConfig";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }, {
            readonly name: "platformReferrer";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "orderSize";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "deploy";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "payable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "payoutRecipient";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "owners";
            readonly internalType: "address[]";
            readonly type: "address[]";
        }, {
            readonly name: "uri";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "name";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "symbol";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "poolConfig";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }, {
            readonly name: "platformReferrer";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "hook";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "hookData";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "deployWithHook";
        readonly outputs: readonly [{
            readonly name: "coin";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "hookDataOut";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly stateMutability: "payable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "coin";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "getVersionForDeployedCoin";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint8";
            readonly type: "uint8";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "implementation";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "initialOwner";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "initialize";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "owner";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "proxiableUUID";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "renounceOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "newOwner";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "transferOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "newImplementation";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "data";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "upgradeToAndCall";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "caller";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "payoutRecipient";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "platformReferrer";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "currency";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }, {
            readonly name: "uri";
            readonly internalType: "string";
            readonly type: "string";
            readonly indexed: false;
        }, {
            readonly name: "name";
            readonly internalType: "string";
            readonly type: "string";
            readonly indexed: false;
        }, {
            readonly name: "symbol";
            readonly internalType: "string";
            readonly type: "string";
            readonly indexed: false;
        }, {
            readonly name: "coin";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }, {
            readonly name: "pool";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }, {
            readonly name: "version";
            readonly internalType: "string";
            readonly type: "string";
            readonly indexed: false;
        }];
        readonly name: "CoinCreated";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "caller";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "payoutRecipient";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "platformReferrer";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "currency";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }, {
            readonly name: "uri";
            readonly internalType: "string";
            readonly type: "string";
            readonly indexed: false;
        }, {
            readonly name: "name";
            readonly internalType: "string";
            readonly type: "string";
            readonly indexed: false;
        }, {
            readonly name: "symbol";
            readonly internalType: "string";
            readonly type: "string";
            readonly indexed: false;
        }, {
            readonly name: "coin";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }, {
            readonly name: "poolKey";
            readonly internalType: "struct PoolKey";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "currency0";
                readonly internalType: "Currency";
                readonly type: "address";
            }, {
                readonly name: "currency1";
                readonly internalType: "Currency";
                readonly type: "address";
            }, {
                readonly name: "fee";
                readonly internalType: "uint24";
                readonly type: "uint24";
            }, {
                readonly name: "tickSpacing";
                readonly internalType: "int24";
                readonly type: "int24";
            }, {
                readonly name: "hooks";
                readonly internalType: "contract IHooks";
                readonly type: "address";
            }];
            readonly indexed: false;
        }, {
            readonly name: "poolKeyHash";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
            readonly indexed: false;
        }, {
            readonly name: "version";
            readonly internalType: "string";
            readonly type: "string";
            readonly indexed: false;
        }];
        readonly name: "CoinCreatedV4";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "version";
            readonly internalType: "uint64";
            readonly type: "uint64";
            readonly indexed: false;
        }];
        readonly name: "Initialized";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "previousOwner";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "newOwner";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }];
        readonly name: "OwnershipTransferred";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "implementation";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }];
        readonly name: "Upgraded";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "target";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "AddressEmptyCode";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "account";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "AddressInsufficientBalance";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ArrayLengthMismatch";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "CannotMintZeroLiquidity";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ConfigTickLowerMustBeLessThanTickUpper";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "Deprecated";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ERC1167FailedCreateClone";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "implementation";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "ERC1967InvalidImplementation";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ERC1967NonPayable";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ERC20TransferAmountMismatch";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "EthTransferInvalid";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "FailedInnerCall";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "InvalidHook";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "InvalidInitialization";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "InvalidPoolVersion";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "tickLower";
            readonly internalType: "int24";
            readonly type: "int24";
        }, {
            readonly name: "tickUpper";
            readonly internalType: "int24";
            readonly type: "int24";
        }];
        readonly name: "InvalidTickRangeMisordered";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "tickLower";
            readonly internalType: "int24";
            readonly type: "int24";
        }, {
            readonly name: "tickUpper";
            readonly internalType: "int24";
            readonly type: "int24";
        }];
        readonly name: "InvalidTickRangeMisordered";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "value";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "limit";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "MaxShareToBeSoldExceeded";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "NotInitializing";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "NumDiscoveryPositionsOutOfRange";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "owner";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "OwnableInvalidOwner";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "account";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "OwnableUnauthorizedAccount";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ReentrancyGuardReentrantCall";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "token";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "SafeERC20FailedOperation";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "UUPSUnauthorizedCallContext";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "slot";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly name: "UUPSUnsupportedProxiableUUID";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "currentName";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "newName";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly name: "UpgradeToMismatchedContractName";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ZeroDiscoveryPositions";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ZeroDiscoverySupplyShare";
    }];
};
export declare const coinV4ABI: readonly [{
    readonly type: "constructor";
    readonly inputs: readonly [{
        readonly name: "protocolRewardRecipient_";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "protocolRewards_";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "poolManager_";
        readonly internalType: "contract IPoolManager";
        readonly type: "address";
    }, {
        readonly name: "airlock_";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "hooks_";
        readonly internalType: "contract IHooks";
        readonly type: "address";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "DOMAIN_SEPARATOR";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "account";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "addOwner";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "accounts";
        readonly internalType: "address[]";
        readonly type: "address[]";
    }];
    readonly name: "addOwners";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "airlock";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "owner";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "spender";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "allowance";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "spender";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "value";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "approve";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "account";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "balanceOf";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "amount";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "burn";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "contractURI";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "contractVersion";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly stateMutability: "pure";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "currency";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "decimals";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint8";
        readonly type: "uint8";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "dopplerFeeRecipient";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "eip712Domain";
    readonly outputs: readonly [{
        readonly name: "fields";
        readonly internalType: "bytes1";
        readonly type: "bytes1";
    }, {
        readonly name: "name";
        readonly internalType: "string";
        readonly type: "string";
    }, {
        readonly name: "version";
        readonly internalType: "string";
        readonly type: "string";
    }, {
        readonly name: "chainId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "verifyingContract";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "salt";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }, {
        readonly name: "extensions";
        readonly internalType: "uint256[]";
        readonly type: "uint256[]";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "coinVersionLookup";
        readonly internalType: "contract IDeployedCoinVersionLookup";
        readonly type: "address";
    }];
    readonly name: "getPayoutSwapPath";
    readonly outputs: readonly [{
        readonly name: "payoutSwapPath";
        readonly internalType: "struct IHasSwapPath.PayoutSwapPath";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "path";
            readonly internalType: "struct PathKey[]";
            readonly type: "tuple[]";
            readonly components: readonly [{
                readonly name: "intermediateCurrency";
                readonly internalType: "Currency";
                readonly type: "address";
            }, {
                readonly name: "fee";
                readonly internalType: "uint24";
                readonly type: "uint24";
            }, {
                readonly name: "tickSpacing";
                readonly internalType: "int24";
                readonly type: "int24";
            }, {
                readonly name: "hooks";
                readonly internalType: "contract IHooks";
                readonly type: "address";
            }, {
                readonly name: "hookData";
                readonly internalType: "bytes";
                readonly type: "bytes";
            }];
        }, {
            readonly name: "currencyIn";
            readonly internalType: "Currency";
            readonly type: "address";
        }];
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "getPoolConfiguration";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "struct PoolConfiguration";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "version";
            readonly internalType: "uint8";
            readonly type: "uint8";
        }, {
            readonly name: "numPositions";
            readonly internalType: "uint16";
            readonly type: "uint16";
        }, {
            readonly name: "fee";
            readonly internalType: "uint24";
            readonly type: "uint24";
        }, {
            readonly name: "tickSpacing";
            readonly internalType: "int24";
            readonly type: "int24";
        }, {
            readonly name: "numDiscoveryPositions";
            readonly internalType: "uint16[]";
            readonly type: "uint16[]";
        }, {
            readonly name: "tickLower";
            readonly internalType: "int24[]";
            readonly type: "int24[]";
        }, {
            readonly name: "tickUpper";
            readonly internalType: "int24[]";
            readonly type: "int24[]";
        }, {
            readonly name: "maxDiscoverySupplyShare";
            readonly internalType: "uint256[]";
            readonly type: "uint256[]";
        }];
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "getPoolKey";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "struct PoolKey";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "currency0";
            readonly internalType: "Currency";
            readonly type: "address";
        }, {
            readonly name: "currency1";
            readonly internalType: "Currency";
            readonly type: "address";
        }, {
            readonly name: "fee";
            readonly internalType: "uint24";
            readonly type: "uint24";
        }, {
            readonly name: "tickSpacing";
            readonly internalType: "int24";
            readonly type: "int24";
        }, {
            readonly name: "hooks";
            readonly internalType: "contract IHooks";
            readonly type: "address";
        }];
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "hooks";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "contract IHooks";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "payoutRecipient_";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "owners_";
        readonly internalType: "address[]";
        readonly type: "address[]";
    }, {
        readonly name: "tokenURI_";
        readonly internalType: "string";
        readonly type: "string";
    }, {
        readonly name: "name_";
        readonly internalType: "string";
        readonly type: "string";
    }, {
        readonly name: "symbol_";
        readonly internalType: "string";
        readonly type: "string";
    }, {
        readonly name: "platformReferrer_";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "currency_";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "poolKey_";
        readonly internalType: "struct PoolKey";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "currency0";
            readonly internalType: "Currency";
            readonly type: "address";
        }, {
            readonly name: "currency1";
            readonly internalType: "Currency";
            readonly type: "address";
        }, {
            readonly name: "fee";
            readonly internalType: "uint24";
            readonly type: "uint24";
        }, {
            readonly name: "tickSpacing";
            readonly internalType: "int24";
            readonly type: "int24";
        }, {
            readonly name: "hooks";
            readonly internalType: "contract IHooks";
            readonly type: "address";
        }];
    }, {
        readonly name: "sqrtPriceX96";
        readonly internalType: "uint160";
        readonly type: "uint160";
    }, {
        readonly name: "poolConfiguration_";
        readonly internalType: "struct PoolConfiguration";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "version";
            readonly internalType: "uint8";
            readonly type: "uint8";
        }, {
            readonly name: "numPositions";
            readonly internalType: "uint16";
            readonly type: "uint16";
        }, {
            readonly name: "fee";
            readonly internalType: "uint24";
            readonly type: "uint24";
        }, {
            readonly name: "tickSpacing";
            readonly internalType: "int24";
            readonly type: "int24";
        }, {
            readonly name: "numDiscoveryPositions";
            readonly internalType: "uint16[]";
            readonly type: "uint16[]";
        }, {
            readonly name: "tickLower";
            readonly internalType: "int24[]";
            readonly type: "int24[]";
        }, {
            readonly name: "tickUpper";
            readonly internalType: "int24[]";
            readonly type: "int24[]";
        }, {
            readonly name: "maxDiscoverySupplyShare";
            readonly internalType: "uint256[]";
            readonly type: "uint256[]";
        }];
    }];
    readonly name: "initialize";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "account";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "isOwner";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "name";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "owner";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "nonces";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "owners";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address[]";
        readonly type: "address[]";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "payoutRecipient";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "owner";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "spender";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "value";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "deadline";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "v";
        readonly internalType: "uint8";
        readonly type: "uint8";
    }, {
        readonly name: "r";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }, {
        readonly name: "s";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly name: "permit";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "platformReferrer";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "poolManager";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "contract IPoolManager";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "protocolRewardRecipient";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "protocolRewards";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "account";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "removeOwner";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "accounts";
        readonly internalType: "address[]";
        readonly type: "address[]";
    }];
    readonly name: "removeOwners";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "revokeOwnership";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "newURI";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly name: "setContractURI";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "newPayoutRecipient";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "setPayoutRecipient";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "interfaceId";
        readonly internalType: "bytes4";
        readonly type: "bytes4";
    }];
    readonly name: "supportsInterface";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "pure";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "symbol";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "tokenURI";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "totalSupply";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "to";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "value";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "transfer";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "from";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "to";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "value";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "transferFrom";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "owner";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "spender";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "value";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }];
    readonly name: "Approval";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "buyer";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "recipient";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "tradeReferrer";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "coinsPurchased";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }, {
        readonly name: "currency";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }, {
        readonly name: "amountFee";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }, {
        readonly name: "amountSold";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }];
    readonly name: "CoinBuy";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "payoutRecipient";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "platformReferrer";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "protocolRewardRecipient";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }, {
        readonly name: "currency";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }, {
        readonly name: "marketRewards";
        readonly internalType: "struct ICoin.MarketRewards";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "totalAmountCurrency";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "totalAmountCoin";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "creatorPayoutAmountCurrency";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "creatorPayoutAmountCoin";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "platformReferrerAmountCurrency";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "platformReferrerAmountCoin";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "protocolAmountCurrency";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "protocolAmountCoin";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly indexed: false;
    }];
    readonly name: "CoinMarketRewards";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "caller";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "prevRecipient";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "newRecipient";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }];
    readonly name: "CoinPayoutRecipientUpdated";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "seller";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "recipient";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "tradeReferrer";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "coinsSold";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }, {
        readonly name: "currency";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }, {
        readonly name: "amountFee";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }, {
        readonly name: "amountPurchased";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }];
    readonly name: "CoinSell";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "payoutRecipient";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "platformReferrer";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "tradeReferrer";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "protocolRewardRecipient";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }, {
        readonly name: "creatorReward";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }, {
        readonly name: "platformReferrerReward";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }, {
        readonly name: "traderReferrerReward";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }, {
        readonly name: "protocolReward";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }, {
        readonly name: "currency";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }];
    readonly name: "CoinTradeRewards";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "sender";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "recipient";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "amount";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }, {
        readonly name: "senderBalance";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }, {
        readonly name: "recipientBalance";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }];
    readonly name: "CoinTransfer";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "caller";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "newURI";
        readonly internalType: "string";
        readonly type: "string";
        readonly indexed: false;
    }, {
        readonly name: "name";
        readonly internalType: "string";
        readonly type: "string";
        readonly indexed: false;
    }];
    readonly name: "ContractMetadataUpdated";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [];
    readonly name: "ContractURIUpdated";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [];
    readonly name: "EIP712DomainChanged";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "version";
        readonly internalType: "uint64";
        readonly type: "uint64";
        readonly indexed: false;
    }];
    readonly name: "Initialized";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "caller";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "prevOwner";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "newOwner";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }];
    readonly name: "OwnerUpdated";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "from";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "to";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "value";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }];
    readonly name: "Transfer";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "AddressZero";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "AlreadyOwner";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "CannotMintZeroLiquidity";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "DopplerPoolMustHaveMoreThan2DiscoveryPositions";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ECDSAInvalidSignature";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "length";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "ECDSAInvalidSignatureLength";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "s";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly name: "ECDSAInvalidSignatureS";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "spender";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "allowance";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "needed";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "ERC20InsufficientAllowance";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "sender";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "balance";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "needed";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "ERC20InsufficientBalance";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "approver";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "ERC20InvalidApprover";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "receiver";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "ERC20InvalidReceiver";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "sender";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "ERC20InvalidSender";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "spender";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "ERC20InvalidSpender";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ERC20TransferAmountMismatch";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "deadline";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "ERC2612ExpiredSignature";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "signer";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "owner";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "ERC2612InvalidSigner";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "EthAmountMismatch";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "EthAmountTooSmall";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "EthTransferFailed";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "EthTransferInvalid";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "InitialOrderSizeTooLarge";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "InsufficientFunds";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "InsufficientLiquidity";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "account";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "currentNonce";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "InvalidAccountNonce";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "InvalidCurrencyLowerTick";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "InvalidInitialization";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "InvalidMarketType";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "InvalidPoolVersion";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "tickLower";
        readonly internalType: "int24";
        readonly type: "int24";
    }, {
        readonly name: "tickUpper";
        readonly internalType: "int24";
        readonly type: "int24";
    }];
    readonly name: "InvalidTickRangeMisordered";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "InvalidWethLowerTick";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "LegacyPoolMustHaveOneDiscoveryPosition";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "MarketAlreadyGraduated";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "MarketNotGraduated";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "value";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "limit";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "MaxShareToBeSoldExceeded";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "NotInitializing";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "NotOwner";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "NumDiscoveryPositionsOutOfRange";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "OneOwnerRequired";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "OnlyOwner";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "sender";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "pool";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "OnlyPool";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "OnlyWeth";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "OwnerCannotBeAddressZero";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ReentrancyGuardReentrantCall";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "SlippageBoundsExceeded";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "UseRevokeOwnershipToRemoveSelf";
}];
export declare const cointagABI: readonly [{
    readonly type: "constructor";
    readonly inputs: readonly [{
        readonly name: "protocolRewards_";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "weth_";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "upgradeGate_";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "receive";
    readonly stateMutability: "payable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "PERCENTAGE_BASIS";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "UPGRADE_INTERFACE_VERSION";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "acceptOwnership";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "config";
    readonly outputs: readonly [{
        readonly name: "cointagStorage";
        readonly internalType: "struct ICointag.CointagStorageV1";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "creatorRewardRecipient";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "erc20";
            readonly internalType: "contract IERC20";
            readonly type: "address";
        }, {
            readonly name: "pool";
            readonly internalType: "contract IUniswapV3Pool";
            readonly type: "address";
        }, {
            readonly name: "percentageToBuyBurn";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
    }];
    readonly stateMutability: "pure";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "contractName";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly stateMutability: "pure";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "contractVersion";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly stateMutability: "pure";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "distribute";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "erc20";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "contract IERC20";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "implementation";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "creatorRewardRecipient";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "pool_";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "percentageToBuyBurn";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "initialize";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "owner";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "pendingOwner";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "pool";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "contract IUniswapV3Pool";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "protocolRewards";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "contract IProtocolRewards";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "proxiableUUID";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "pull";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "renounceOwnership";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "newOwner";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "transferOwnership";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "amount0Delta";
        readonly internalType: "int256";
        readonly type: "int256";
    }, {
        readonly name: "amount1Delta";
        readonly internalType: "int256";
        readonly type: "int256";
    }, {
        readonly name: "";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "uniswapV3SwapCallback";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "upgradeGate";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "contract IUpgradeGate";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "newImplementation";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "data";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "upgradeToAndCall";
    readonly outputs: readonly [];
    readonly stateMutability: "payable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "weth";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "contract IWETH";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "amountERC20Received";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }, {
        readonly name: "amountERC20Burned";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }, {
        readonly name: "amountETHSpent";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }, {
        readonly name: "amountETHToCreator";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }, {
        readonly name: "totalETHReceived";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }, {
        readonly name: "buyFailureError";
        readonly internalType: "bytes";
        readonly type: "bytes";
        readonly indexed: false;
    }, {
        readonly name: "burnFailureError";
        readonly internalType: "bytes";
        readonly type: "bytes";
        readonly indexed: false;
    }];
    readonly name: "BuyBurn";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "amount";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: true;
    }, {
        readonly name: "sender";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }];
    readonly name: "EthReceived";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "version";
        readonly internalType: "uint64";
        readonly type: "uint64";
        readonly indexed: false;
    }];
    readonly name: "Initialized";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "creatorRewardRecipient";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }, {
        readonly name: "erc20";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }, {
        readonly name: "pool";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }, {
        readonly name: "percentageToBuyBurn";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }];
    readonly name: "Initialized";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "previousOwner";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "newOwner";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }];
    readonly name: "OwnershipTransferStarted";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "previousOwner";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "newOwner";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }];
    readonly name: "OwnershipTransferred";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "implementation";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }];
    readonly name: "Upgraded";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "target";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "AddressEmptyCode";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "account";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "AddressInsufficientBalance";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "AddressZero";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "implementation";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "ERC1967InvalidImplementation";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ERC1967NonPayable";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "FailedInnerCall";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "InvalidInitialization";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "oldImpl";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "newImpl";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "InvalidUpgradePath";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "NotInitializing";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "NotUniswapV3Pool";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "OnlyPool";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "OnlyProtocolRewardsOrWeth";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "owner";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "OwnableInvalidOwner";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "account";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "OwnableUnauthorizedAccount";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "PoolNeedsOneTokenToBeWETH";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "token";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "SafeERC20FailedOperation";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "UUPSUnauthorizedCallContext";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "slot";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly name: "UUPSUnsupportedProxiableUUID";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "UnknownBurnError";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "UnknownSwapError";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "current";
        readonly internalType: "string";
        readonly type: "string";
    }, {
        readonly name: "newName";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly name: "UpgradeToMismatchedContractName";
}];
/**
 * - [__View Contract on Base Basescan__](https://basescan.org/address/0x7777777BbD0b88aD5F3b5f4c89C6B60D74b9774F)
 * - [__View Contract on Base Sepolia Basescan__](https://sepolia.basescan.org/address/0x7777777BbD0b88aD5F3b5f4c89C6B60D74b9774F)
 * - [__View Contract on Zora Explorer__](https://explorer.zora.energy/address/0x7777777BbD0b88aD5F3b5f4c89C6B60D74b9774F)
 * - [__View Contract on Zora Sepolia Zora Sepolia Explorer__](https://sepolia.explorer.zora.energy//address/0x77777773Bd7Cccb7E704315CA51245707E19B0DE)
 */
export declare const cointagFactoryABI: readonly [{
    readonly type: "constructor";
    readonly inputs: readonly [{
        readonly name: "_cointagImplementation";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "UPGRADE_INTERFACE_VERSION";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "acceptOwnership";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "cointagImplementation";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "contractName";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly stateMutability: "pure";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "contractURI";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly stateMutability: "pure";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "contractVersion";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly stateMutability: "pure";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "_creatorRewardRecipient";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "_pool";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "_percentageToBuyBurn";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "saltSource";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "getCointagAddress";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "_creatorRewardRecipient";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "_pool";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "_percentageToBuyBurn";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "saltSource";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "getOrCreateCointag";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "contract ICointag";
        readonly type: "address";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "_creatorRewardRecipient";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "_pool";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "_percentageToBuyBurn";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "saltSource";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }, {
        readonly name: "expectedAddress";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "getOrCreateCointagAtExpectedAddress";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "contract ICointag";
        readonly type: "address";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "implementation";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "_defaultOwner";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "initialize";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "owner";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "pendingOwner";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "proxiableUUID";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "renounceOwnership";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "newOwner";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "transferOwnership";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "upgradeGate";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "contract IUpgradeGate";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "newImplementation";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "data";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "upgradeToAndCall";
    readonly outputs: readonly [];
    readonly stateMutability: "payable";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "version";
        readonly internalType: "uint64";
        readonly type: "uint64";
        readonly indexed: false;
    }];
    readonly name: "Initialized";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "previousOwner";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "newOwner";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }];
    readonly name: "OwnershipTransferStarted";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "previousOwner";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "newOwner";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }];
    readonly name: "OwnershipTransferred";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "cointag";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "creatorRewardRecipient";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "erc20";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "pool";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }, {
        readonly name: "percentageToBuyBurn";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }, {
        readonly name: "saltSource";
        readonly internalType: "bytes";
        readonly type: "bytes";
        readonly indexed: false;
    }];
    readonly name: "SetupNewCointag";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "implementation";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }];
    readonly name: "Upgraded";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "target";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "AddressEmptyCode";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "AddressZero";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "implementation";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "ERC1967InvalidImplementation";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ERC1967NonPayable";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "FailedInnerCall";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "InvalidInitialization";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "NotInitializing";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "owner";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "OwnableInvalidOwner";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "account";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "OwnableUnauthorizedAccount";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "UUPSUnauthorizedCallContext";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "slot";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly name: "UUPSUnsupportedProxiableUUID";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "expected";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "actual";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "UnexpectedCointagAddress";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "currentName";
        readonly internalType: "string";
        readonly type: "string";
    }, {
        readonly name: "newName";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly name: "UpgradeToMismatchedContractName";
}];
/**
 * - [__View Contract on Base Basescan__](https://basescan.org/address/0x7777777BbD0b88aD5F3b5f4c89C6B60D74b9774F)
 * - [__View Contract on Base Sepolia Basescan__](https://sepolia.basescan.org/address/0x7777777BbD0b88aD5F3b5f4c89C6B60D74b9774F)
 * - [__View Contract on Zora Explorer__](https://explorer.zora.energy/address/0x7777777BbD0b88aD5F3b5f4c89C6B60D74b9774F)
 * - [__View Contract on Zora Sepolia Zora Sepolia Explorer__](https://sepolia.explorer.zora.energy//address/0x77777773Bd7Cccb7E704315CA51245707E19B0DE)
 */
export declare const cointagFactoryAddress: {
    readonly 8453: "0x7777777BbD0b88aD5F3b5f4c89C6B60D74b9774F";
    readonly 84532: "0x7777777BbD0b88aD5F3b5f4c89C6B60D74b9774F";
    readonly 7777777: "0x7777777BbD0b88aD5F3b5f4c89C6B60D74b9774F";
    readonly 999999999: "0x77777773Bd7Cccb7E704315CA51245707E19B0DE";
};
/**
 * - [__View Contract on Base Basescan__](https://basescan.org/address/0x7777777BbD0b88aD5F3b5f4c89C6B60D74b9774F)
 * - [__View Contract on Base Sepolia Basescan__](https://sepolia.basescan.org/address/0x7777777BbD0b88aD5F3b5f4c89C6B60D74b9774F)
 * - [__View Contract on Zora Explorer__](https://explorer.zora.energy/address/0x7777777BbD0b88aD5F3b5f4c89C6B60D74b9774F)
 * - [__View Contract on Zora Sepolia Zora Sepolia Explorer__](https://sepolia.explorer.zora.energy//address/0x77777773Bd7Cccb7E704315CA51245707E19B0DE)
 */
export declare const cointagFactoryConfig: {
    readonly address: {
        readonly 8453: "0x7777777BbD0b88aD5F3b5f4c89C6B60D74b9774F";
        readonly 84532: "0x7777777BbD0b88aD5F3b5f4c89C6B60D74b9774F";
        readonly 7777777: "0x7777777BbD0b88aD5F3b5f4c89C6B60D74b9774F";
        readonly 999999999: "0x77777773Bd7Cccb7E704315CA51245707E19B0DE";
    };
    readonly abi: readonly [{
        readonly type: "constructor";
        readonly inputs: readonly [{
            readonly name: "_cointagImplementation";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "UPGRADE_INTERFACE_VERSION";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "acceptOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "cointagImplementation";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "contractName";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly stateMutability: "pure";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "contractURI";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly stateMutability: "pure";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "contractVersion";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly stateMutability: "pure";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "_creatorRewardRecipient";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "_pool";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "_percentageToBuyBurn";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "saltSource";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "getCointagAddress";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "_creatorRewardRecipient";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "_pool";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "_percentageToBuyBurn";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "saltSource";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "getOrCreateCointag";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "contract ICointag";
            readonly type: "address";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "_creatorRewardRecipient";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "_pool";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "_percentageToBuyBurn";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "saltSource";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }, {
            readonly name: "expectedAddress";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "getOrCreateCointagAtExpectedAddress";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "contract ICointag";
            readonly type: "address";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "implementation";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "_defaultOwner";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "initialize";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "owner";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "pendingOwner";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "proxiableUUID";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "renounceOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "newOwner";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "transferOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "upgradeGate";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "contract IUpgradeGate";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "newImplementation";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "data";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "upgradeToAndCall";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "version";
            readonly internalType: "uint64";
            readonly type: "uint64";
            readonly indexed: false;
        }];
        readonly name: "Initialized";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "previousOwner";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "newOwner";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }];
        readonly name: "OwnershipTransferStarted";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "previousOwner";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "newOwner";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }];
        readonly name: "OwnershipTransferred";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "cointag";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "creatorRewardRecipient";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "erc20";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "pool";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }, {
            readonly name: "percentageToBuyBurn";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: false;
        }, {
            readonly name: "saltSource";
            readonly internalType: "bytes";
            readonly type: "bytes";
            readonly indexed: false;
        }];
        readonly name: "SetupNewCointag";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "implementation";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }];
        readonly name: "Upgraded";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "target";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "AddressEmptyCode";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "AddressZero";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "implementation";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "ERC1967InvalidImplementation";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ERC1967NonPayable";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "FailedInnerCall";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "InvalidInitialization";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "NotInitializing";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "owner";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "OwnableInvalidOwner";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "account";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "OwnableUnauthorizedAccount";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "UUPSUnauthorizedCallContext";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "slot";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly name: "UUPSUnsupportedProxiableUUID";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "expected";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "actual";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "UnexpectedCointagAddress";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "currentName";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "newName";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly name: "UpgradeToMismatchedContractName";
    }];
};
/**
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x7777777C2B3132e03a65721a41745C07170a5877)
 * - [__View Contract on Op Mainnet Optimism Explorer__](https://optimistic.etherscan.io/address/0x7777777C2B3132e03a65721a41745C07170a5877)
 * - [__View Contract on Base Basescan__](https://basescan.org/address/0x7777777C2B3132e03a65721a41745C07170a5877)
 * - [__View Contract on Arbitrum One Arbiscan__](https://arbiscan.io/address/0x7777777C2B3132e03a65721a41745C07170a5877)
 * - [__View Contract on Blast Blastscan__](https://blastscan.io/address/0x7777777C2B3132e03a65721a41745C07170a5877)
 * - [__View Contract on Base Sepolia Basescan__](https://sepolia.basescan.org/address/0x7777777C2B3132e03a65721a41745C07170a5877)
 * - [__View Contract on Zora Explorer__](https://explorer.zora.energy/address/0x7777777C2B3132e03a65721a41745C07170a5877)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x7777777C2B3132e03a65721a41745C07170a5877)
 * - [__View Contract on Op Sepolia Blockscout__](https://optimism-sepolia.blockscout.com/address/0x7777777C2B3132e03a65721a41745C07170a5877)
 * - [__View Contract on Zora Sepolia Zora Sepolia Explorer__](https://sepolia.explorer.zora.energy//address/0x7777777C2B3132e03a65721a41745C07170a5877)
 */
export declare const commentsABI: readonly [{
    readonly type: "constructor";
    readonly inputs: readonly [{
        readonly name: "_sparkValue";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "_protocolRewards";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "_zoraRecipient";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "BACKFILLER_ROLE";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "DEFAULT_ADMIN_ROLE";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "DELEGATE_COMMENTER";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "DOMAIN_NAME";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "DOMAIN_VERSION";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "PERMISSION_BIT_ADMIN";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "REFERRER_REWARD_PCT";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "UPGRADE_INTERFACE_VERSION";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "ZORA_REWARD_NO_REFERRER_PCT";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "ZORA_REWARD_PCT";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "commentIdentifiers";
        readonly internalType: "struct IComments.CommentIdentifier[]";
        readonly type: "tuple[]";
        readonly components: readonly [{
            readonly name: "commenter";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "contractAddress";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "nonce";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
    }, {
        readonly name: "texts";
        readonly internalType: "string[]";
        readonly type: "string[]";
    }, {
        readonly name: "timestamps";
        readonly internalType: "uint256[]";
        readonly type: "uint256[]";
    }, {
        readonly name: "originalTransactionHashes";
        readonly internalType: "bytes32[]";
        readonly type: "bytes32[]";
    }];
    readonly name: "backfillBatchAddComment";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "commenter";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "contractAddress";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "text";
        readonly internalType: "string";
        readonly type: "string";
    }, {
        readonly name: "replyTo";
        readonly internalType: "struct IComments.CommentIdentifier";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "commenter";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "contractAddress";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "nonce";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
    }, {
        readonly name: "commenterSmartWallet";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "referrer";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "comment";
    readonly outputs: readonly [{
        readonly name: "commentIdentifier";
        readonly internalType: "struct IComments.CommentIdentifier";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "commenter";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "contractAddress";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "nonce";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
    }];
    readonly stateMutability: "payable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "commentIdentifier";
        readonly internalType: "struct IComments.CommentIdentifier";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "commenter";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "contractAddress";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "nonce";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
    }];
    readonly name: "commentSparksQuantity";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "contractName";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly stateMutability: "pure";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "contractVersion";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly stateMutability: "pure";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "commenter";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "contractAddress";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "text";
        readonly internalType: "string";
        readonly type: "string";
    }, {
        readonly name: "replyTo";
        readonly internalType: "struct IComments.CommentIdentifier";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "commenter";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "contractAddress";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "nonce";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
    }, {
        readonly name: "commenterSmartWalletOwner";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "referrer";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "delegateComment";
    readonly outputs: readonly [{
        readonly name: "commentIdentifier";
        readonly internalType: "struct IComments.CommentIdentifier";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "commenter";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "contractAddress";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "nonce";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
    }, {
        readonly name: "commentId";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly stateMutability: "payable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "eip712Domain";
    readonly outputs: readonly [{
        readonly name: "fields";
        readonly internalType: "bytes1";
        readonly type: "bytes1";
    }, {
        readonly name: "name";
        readonly internalType: "string";
        readonly type: "string";
    }, {
        readonly name: "version";
        readonly internalType: "string";
        readonly type: "string";
    }, {
        readonly name: "chainId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "verifyingContract";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "salt";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }, {
        readonly name: "extensions";
        readonly internalType: "uint256[]";
        readonly type: "uint256[]";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "role";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly name: "getRoleAdmin";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "role";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }, {
        readonly name: "account";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "grantRole";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "role";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }, {
        readonly name: "account";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "hasRole";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "commentIdentifier";
        readonly internalType: "struct IComments.CommentIdentifier";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "commenter";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "contractAddress";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "nonce";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
    }];
    readonly name: "hashAndCheckCommentExists";
    readonly outputs: readonly [{
        readonly name: "commentId";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }, {
        readonly name: "exists";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "commentIdentifier";
        readonly internalType: "struct IComments.CommentIdentifier";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "commenter";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "contractAddress";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "nonce";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
    }];
    readonly name: "hashAndValidateCommentExists";
    readonly outputs: readonly [{
        readonly name: "commentId";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "commentIdentifier";
        readonly internalType: "struct IComments.CommentIdentifier";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "commenter";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "contractAddress";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "nonce";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
    }];
    readonly name: "hashCommentIdentifier";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly stateMutability: "pure";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "permit";
        readonly internalType: "struct IComments.PermitComment";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "commenter";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "commenterSmartWallet";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "contractAddress";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "replyTo";
            readonly internalType: "struct IComments.CommentIdentifier";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "commenter";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "contractAddress";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "tokenId";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "nonce";
                readonly internalType: "bytes32";
                readonly type: "bytes32";
            }];
        }, {
            readonly name: "text";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "referrer";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "deadline";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "nonce";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }, {
            readonly name: "sourceChainId";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }, {
            readonly name: "destinationChainId";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }];
    }];
    readonly name: "hashPermitComment";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "permit";
        readonly internalType: "struct IComments.PermitSparkComment";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "comment";
            readonly internalType: "struct IComments.CommentIdentifier";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "commenter";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "contractAddress";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "tokenId";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "nonce";
                readonly internalType: "bytes32";
                readonly type: "bytes32";
            }];
        }, {
            readonly name: "sparker";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "sparksQuantity";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "deadline";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "nonce";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }, {
            readonly name: "referrer";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "sourceChainId";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }, {
            readonly name: "destinationChainId";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }];
    }];
    readonly name: "hashPermitSparkComment";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "implementation";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "defaultAdmin";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "backfiller";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "delegateCommenters";
        readonly internalType: "address[]";
        readonly type: "address[]";
    }];
    readonly name: "initialize";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "nextNonce";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "owner";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "nonce";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly name: "nonceUsed";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "permit";
        readonly internalType: "struct IComments.PermitComment";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "commenter";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "commenterSmartWallet";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "contractAddress";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "replyTo";
            readonly internalType: "struct IComments.CommentIdentifier";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "commenter";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "contractAddress";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "tokenId";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "nonce";
                readonly internalType: "bytes32";
                readonly type: "bytes32";
            }];
        }, {
            readonly name: "text";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "referrer";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "deadline";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "nonce";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }, {
            readonly name: "sourceChainId";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }, {
            readonly name: "destinationChainId";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }];
    }, {
        readonly name: "signature";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "permitComment";
    readonly outputs: readonly [];
    readonly stateMutability: "payable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "permit";
        readonly internalType: "struct IComments.PermitSparkComment";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "comment";
            readonly internalType: "struct IComments.CommentIdentifier";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "commenter";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "contractAddress";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "tokenId";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "nonce";
                readonly internalType: "bytes32";
                readonly type: "bytes32";
            }];
        }, {
            readonly name: "sparker";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "sparksQuantity";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "deadline";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "nonce";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }, {
            readonly name: "referrer";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "sourceChainId";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }, {
            readonly name: "destinationChainId";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }];
    }, {
        readonly name: "signature";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "permitSparkComment";
    readonly outputs: readonly [];
    readonly stateMutability: "payable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "protocolRewards";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "contract IProtocolRewards";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "proxiableUUID";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "role";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }, {
        readonly name: "callerConfirmation";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "renounceRole";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "role";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }, {
        readonly name: "account";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "revokeRole";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "commentIdentifier";
        readonly internalType: "struct IComments.CommentIdentifier";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "commenter";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "contractAddress";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "nonce";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
    }, {
        readonly name: "sparksQuantity";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "referrer";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "sparkComment";
    readonly outputs: readonly [];
    readonly stateMutability: "payable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "sparkValue";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "interfaceId";
        readonly internalType: "bytes4";
        readonly type: "bytes4";
    }];
    readonly name: "supportsInterface";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "newImplementation";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "data";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "upgradeToAndCall";
    readonly outputs: readonly [];
    readonly stateMutability: "payable";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "commentId";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
        readonly indexed: true;
    }, {
        readonly name: "commentIdentifier";
        readonly internalType: "struct IComments.CommentIdentifier";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "commenter";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "contractAddress";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "nonce";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly indexed: false;
    }, {
        readonly name: "text";
        readonly internalType: "string";
        readonly type: "string";
        readonly indexed: false;
    }, {
        readonly name: "timestamp";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }, {
        readonly name: "originalTransactionId";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
        readonly indexed: false;
    }];
    readonly name: "BackfilledComment";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "commentId";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
        readonly indexed: true;
    }, {
        readonly name: "commentIdentifier";
        readonly internalType: "struct IComments.CommentIdentifier";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "commenter";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "contractAddress";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "nonce";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly indexed: false;
    }, {
        readonly name: "replyToId";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
        readonly indexed: false;
    }, {
        readonly name: "replyTo";
        readonly internalType: "struct IComments.CommentIdentifier";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "commenter";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "contractAddress";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "nonce";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly indexed: false;
    }, {
        readonly name: "sparksQuantity";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }, {
        readonly name: "text";
        readonly internalType: "string";
        readonly type: "string";
        readonly indexed: false;
    }, {
        readonly name: "timestamp";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }, {
        readonly name: "referrer";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }];
    readonly name: "Commented";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [];
    readonly name: "EIP712DomainChanged";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "version";
        readonly internalType: "uint64";
        readonly type: "uint64";
        readonly indexed: false;
    }];
    readonly name: "Initialized";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "role";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
        readonly indexed: true;
    }, {
        readonly name: "previousAdminRole";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
        readonly indexed: true;
    }, {
        readonly name: "newAdminRole";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
        readonly indexed: true;
    }];
    readonly name: "RoleAdminChanged";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "role";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
        readonly indexed: true;
    }, {
        readonly name: "account";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "sender";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }];
    readonly name: "RoleGranted";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "role";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
        readonly indexed: true;
    }, {
        readonly name: "account";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "sender";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }];
    readonly name: "RoleRevoked";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "commentId";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
        readonly indexed: true;
    }, {
        readonly name: "commentIdentifier";
        readonly internalType: "struct IComments.CommentIdentifier";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "commenter";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "contractAddress";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "nonce";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly indexed: false;
    }, {
        readonly name: "sparksQuantity";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }, {
        readonly name: "sparker";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }, {
        readonly name: "timestamp";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }, {
        readonly name: "referrer";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }];
    readonly name: "SparkedComment";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "implementation";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }];
    readonly name: "Upgraded";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "AccessControlBadConfirmation";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "account";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "neededRole";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly name: "AccessControlUnauthorizedAccount";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "target";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "AddressEmptyCode";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "AddressZero";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ArrayLengthMismatch";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "CannotSparkOwnComment";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "commentAddress";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "commentTokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "replyAddress";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "replyTokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "CommentAddressOrTokenIdsDoNotMatch";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "CommentDoesntExist";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "expected";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "actual";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "CommenterMismatch";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "commentId";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly name: "DuplicateComment";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "implementation";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "ERC1967InvalidImplementation";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ERC1967NonPayable";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "deadline";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "ERC2612ExpiredSignature";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "EmptyComment";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "FailedInnerCall";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "wrongDestinationChainId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "IncorrectDestinationChain";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "actual";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "expected";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "IncorrectETHAmountForSparks";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "account";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "currentNonce";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly name: "InvalidAccountNonce";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "InvalidInitialization";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "InvalidSignature";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "MustSendAtLeastOneSpark";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "NoFundsRecipient";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "NotInitializing";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "NotSmartWallet";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "NotSmartWalletOwner";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "NotTokenHolderOrAdmin";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "OnlySparksContract";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "TransferFailed";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "UUPSUnauthorizedCallContext";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "slot";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly name: "UUPSUnsupportedProxiableUUID";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "currentName";
        readonly internalType: "string";
        readonly type: "string";
    }, {
        readonly name: "newName";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly name: "UpgradeToMismatchedContractName";
}];
/**
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x7777777C2B3132e03a65721a41745C07170a5877)
 * - [__View Contract on Op Mainnet Optimism Explorer__](https://optimistic.etherscan.io/address/0x7777777C2B3132e03a65721a41745C07170a5877)
 * - [__View Contract on Base Basescan__](https://basescan.org/address/0x7777777C2B3132e03a65721a41745C07170a5877)
 * - [__View Contract on Arbitrum One Arbiscan__](https://arbiscan.io/address/0x7777777C2B3132e03a65721a41745C07170a5877)
 * - [__View Contract on Blast Blastscan__](https://blastscan.io/address/0x7777777C2B3132e03a65721a41745C07170a5877)
 * - [__View Contract on Base Sepolia Basescan__](https://sepolia.basescan.org/address/0x7777777C2B3132e03a65721a41745C07170a5877)
 * - [__View Contract on Zora Explorer__](https://explorer.zora.energy/address/0x7777777C2B3132e03a65721a41745C07170a5877)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x7777777C2B3132e03a65721a41745C07170a5877)
 * - [__View Contract on Op Sepolia Blockscout__](https://optimism-sepolia.blockscout.com/address/0x7777777C2B3132e03a65721a41745C07170a5877)
 * - [__View Contract on Zora Sepolia Zora Sepolia Explorer__](https://sepolia.explorer.zora.energy//address/0x7777777C2B3132e03a65721a41745C07170a5877)
 */
export declare const commentsAddress: {
    readonly 1: "0x7777777C2B3132e03a65721a41745C07170a5877";
    readonly 10: "0x7777777C2B3132e03a65721a41745C07170a5877";
    readonly 8453: "0x7777777C2B3132e03a65721a41745C07170a5877";
    readonly 42161: "0x7777777C2B3132e03a65721a41745C07170a5877";
    readonly 81457: "0x7777777C2B3132e03a65721a41745C07170a5877";
    readonly 84532: "0x7777777C2B3132e03a65721a41745C07170a5877";
    readonly 7777777: "0x7777777C2B3132e03a65721a41745C07170a5877";
    readonly 11155111: "0x7777777C2B3132e03a65721a41745C07170a5877";
    readonly 11155420: "0x7777777C2B3132e03a65721a41745C07170a5877";
    readonly 999999999: "0x7777777C2B3132e03a65721a41745C07170a5877";
};
/**
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x7777777C2B3132e03a65721a41745C07170a5877)
 * - [__View Contract on Op Mainnet Optimism Explorer__](https://optimistic.etherscan.io/address/0x7777777C2B3132e03a65721a41745C07170a5877)
 * - [__View Contract on Base Basescan__](https://basescan.org/address/0x7777777C2B3132e03a65721a41745C07170a5877)
 * - [__View Contract on Arbitrum One Arbiscan__](https://arbiscan.io/address/0x7777777C2B3132e03a65721a41745C07170a5877)
 * - [__View Contract on Blast Blastscan__](https://blastscan.io/address/0x7777777C2B3132e03a65721a41745C07170a5877)
 * - [__View Contract on Base Sepolia Basescan__](https://sepolia.basescan.org/address/0x7777777C2B3132e03a65721a41745C07170a5877)
 * - [__View Contract on Zora Explorer__](https://explorer.zora.energy/address/0x7777777C2B3132e03a65721a41745C07170a5877)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x7777777C2B3132e03a65721a41745C07170a5877)
 * - [__View Contract on Op Sepolia Blockscout__](https://optimism-sepolia.blockscout.com/address/0x7777777C2B3132e03a65721a41745C07170a5877)
 * - [__View Contract on Zora Sepolia Zora Sepolia Explorer__](https://sepolia.explorer.zora.energy//address/0x7777777C2B3132e03a65721a41745C07170a5877)
 */
export declare const commentsConfig: {
    readonly address: {
        readonly 1: "0x7777777C2B3132e03a65721a41745C07170a5877";
        readonly 10: "0x7777777C2B3132e03a65721a41745C07170a5877";
        readonly 8453: "0x7777777C2B3132e03a65721a41745C07170a5877";
        readonly 42161: "0x7777777C2B3132e03a65721a41745C07170a5877";
        readonly 81457: "0x7777777C2B3132e03a65721a41745C07170a5877";
        readonly 84532: "0x7777777C2B3132e03a65721a41745C07170a5877";
        readonly 7777777: "0x7777777C2B3132e03a65721a41745C07170a5877";
        readonly 11155111: "0x7777777C2B3132e03a65721a41745C07170a5877";
        readonly 11155420: "0x7777777C2B3132e03a65721a41745C07170a5877";
        readonly 999999999: "0x7777777C2B3132e03a65721a41745C07170a5877";
    };
    readonly abi: readonly [{
        readonly type: "constructor";
        readonly inputs: readonly [{
            readonly name: "_sparkValue";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "_protocolRewards";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "_zoraRecipient";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "BACKFILLER_ROLE";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "DEFAULT_ADMIN_ROLE";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "DELEGATE_COMMENTER";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "DOMAIN_NAME";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "DOMAIN_VERSION";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "PERMISSION_BIT_ADMIN";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "REFERRER_REWARD_PCT";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "UPGRADE_INTERFACE_VERSION";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "ZORA_REWARD_NO_REFERRER_PCT";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "ZORA_REWARD_PCT";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "commentIdentifiers";
            readonly internalType: "struct IComments.CommentIdentifier[]";
            readonly type: "tuple[]";
            readonly components: readonly [{
                readonly name: "commenter";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "contractAddress";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "tokenId";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "nonce";
                readonly internalType: "bytes32";
                readonly type: "bytes32";
            }];
        }, {
            readonly name: "texts";
            readonly internalType: "string[]";
            readonly type: "string[]";
        }, {
            readonly name: "timestamps";
            readonly internalType: "uint256[]";
            readonly type: "uint256[]";
        }, {
            readonly name: "originalTransactionHashes";
            readonly internalType: "bytes32[]";
            readonly type: "bytes32[]";
        }];
        readonly name: "backfillBatchAddComment";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "commenter";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "contractAddress";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "text";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "replyTo";
            readonly internalType: "struct IComments.CommentIdentifier";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "commenter";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "contractAddress";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "tokenId";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "nonce";
                readonly internalType: "bytes32";
                readonly type: "bytes32";
            }];
        }, {
            readonly name: "commenterSmartWallet";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "referrer";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "comment";
        readonly outputs: readonly [{
            readonly name: "commentIdentifier";
            readonly internalType: "struct IComments.CommentIdentifier";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "commenter";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "contractAddress";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "tokenId";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "nonce";
                readonly internalType: "bytes32";
                readonly type: "bytes32";
            }];
        }];
        readonly stateMutability: "payable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "commentIdentifier";
            readonly internalType: "struct IComments.CommentIdentifier";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "commenter";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "contractAddress";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "tokenId";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "nonce";
                readonly internalType: "bytes32";
                readonly type: "bytes32";
            }];
        }];
        readonly name: "commentSparksQuantity";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "contractName";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly stateMutability: "pure";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "contractVersion";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly stateMutability: "pure";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "commenter";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "contractAddress";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "text";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "replyTo";
            readonly internalType: "struct IComments.CommentIdentifier";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "commenter";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "contractAddress";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "tokenId";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "nonce";
                readonly internalType: "bytes32";
                readonly type: "bytes32";
            }];
        }, {
            readonly name: "commenterSmartWalletOwner";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "referrer";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "delegateComment";
        readonly outputs: readonly [{
            readonly name: "commentIdentifier";
            readonly internalType: "struct IComments.CommentIdentifier";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "commenter";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "contractAddress";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "tokenId";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "nonce";
                readonly internalType: "bytes32";
                readonly type: "bytes32";
            }];
        }, {
            readonly name: "commentId";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "payable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "eip712Domain";
        readonly outputs: readonly [{
            readonly name: "fields";
            readonly internalType: "bytes1";
            readonly type: "bytes1";
        }, {
            readonly name: "name";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "version";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "chainId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "verifyingContract";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "salt";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }, {
            readonly name: "extensions";
            readonly internalType: "uint256[]";
            readonly type: "uint256[]";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "role";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly name: "getRoleAdmin";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "role";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }, {
            readonly name: "account";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "grantRole";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "role";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }, {
            readonly name: "account";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "hasRole";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "commentIdentifier";
            readonly internalType: "struct IComments.CommentIdentifier";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "commenter";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "contractAddress";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "tokenId";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "nonce";
                readonly internalType: "bytes32";
                readonly type: "bytes32";
            }];
        }];
        readonly name: "hashAndCheckCommentExists";
        readonly outputs: readonly [{
            readonly name: "commentId";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }, {
            readonly name: "exists";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "commentIdentifier";
            readonly internalType: "struct IComments.CommentIdentifier";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "commenter";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "contractAddress";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "tokenId";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "nonce";
                readonly internalType: "bytes32";
                readonly type: "bytes32";
            }];
        }];
        readonly name: "hashAndValidateCommentExists";
        readonly outputs: readonly [{
            readonly name: "commentId";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "commentIdentifier";
            readonly internalType: "struct IComments.CommentIdentifier";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "commenter";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "contractAddress";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "tokenId";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "nonce";
                readonly internalType: "bytes32";
                readonly type: "bytes32";
            }];
        }];
        readonly name: "hashCommentIdentifier";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "pure";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "permit";
            readonly internalType: "struct IComments.PermitComment";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "commenter";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "commenterSmartWallet";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "contractAddress";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "tokenId";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "replyTo";
                readonly internalType: "struct IComments.CommentIdentifier";
                readonly type: "tuple";
                readonly components: readonly [{
                    readonly name: "commenter";
                    readonly internalType: "address";
                    readonly type: "address";
                }, {
                    readonly name: "contractAddress";
                    readonly internalType: "address";
                    readonly type: "address";
                }, {
                    readonly name: "tokenId";
                    readonly internalType: "uint256";
                    readonly type: "uint256";
                }, {
                    readonly name: "nonce";
                    readonly internalType: "bytes32";
                    readonly type: "bytes32";
                }];
            }, {
                readonly name: "text";
                readonly internalType: "string";
                readonly type: "string";
            }, {
                readonly name: "referrer";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "deadline";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "nonce";
                readonly internalType: "bytes32";
                readonly type: "bytes32";
            }, {
                readonly name: "sourceChainId";
                readonly internalType: "uint32";
                readonly type: "uint32";
            }, {
                readonly name: "destinationChainId";
                readonly internalType: "uint32";
                readonly type: "uint32";
            }];
        }];
        readonly name: "hashPermitComment";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "permit";
            readonly internalType: "struct IComments.PermitSparkComment";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "comment";
                readonly internalType: "struct IComments.CommentIdentifier";
                readonly type: "tuple";
                readonly components: readonly [{
                    readonly name: "commenter";
                    readonly internalType: "address";
                    readonly type: "address";
                }, {
                    readonly name: "contractAddress";
                    readonly internalType: "address";
                    readonly type: "address";
                }, {
                    readonly name: "tokenId";
                    readonly internalType: "uint256";
                    readonly type: "uint256";
                }, {
                    readonly name: "nonce";
                    readonly internalType: "bytes32";
                    readonly type: "bytes32";
                }];
            }, {
                readonly name: "sparker";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "sparksQuantity";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "deadline";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "nonce";
                readonly internalType: "bytes32";
                readonly type: "bytes32";
            }, {
                readonly name: "referrer";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "sourceChainId";
                readonly internalType: "uint32";
                readonly type: "uint32";
            }, {
                readonly name: "destinationChainId";
                readonly internalType: "uint32";
                readonly type: "uint32";
            }];
        }];
        readonly name: "hashPermitSparkComment";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "implementation";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "defaultAdmin";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "backfiller";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "delegateCommenters";
            readonly internalType: "address[]";
            readonly type: "address[]";
        }];
        readonly name: "initialize";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "nextNonce";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "owner";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "nonce";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly name: "nonceUsed";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "permit";
            readonly internalType: "struct IComments.PermitComment";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "commenter";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "commenterSmartWallet";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "contractAddress";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "tokenId";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "replyTo";
                readonly internalType: "struct IComments.CommentIdentifier";
                readonly type: "tuple";
                readonly components: readonly [{
                    readonly name: "commenter";
                    readonly internalType: "address";
                    readonly type: "address";
                }, {
                    readonly name: "contractAddress";
                    readonly internalType: "address";
                    readonly type: "address";
                }, {
                    readonly name: "tokenId";
                    readonly internalType: "uint256";
                    readonly type: "uint256";
                }, {
                    readonly name: "nonce";
                    readonly internalType: "bytes32";
                    readonly type: "bytes32";
                }];
            }, {
                readonly name: "text";
                readonly internalType: "string";
                readonly type: "string";
            }, {
                readonly name: "referrer";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "deadline";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "nonce";
                readonly internalType: "bytes32";
                readonly type: "bytes32";
            }, {
                readonly name: "sourceChainId";
                readonly internalType: "uint32";
                readonly type: "uint32";
            }, {
                readonly name: "destinationChainId";
                readonly internalType: "uint32";
                readonly type: "uint32";
            }];
        }, {
            readonly name: "signature";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "permitComment";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "permit";
            readonly internalType: "struct IComments.PermitSparkComment";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "comment";
                readonly internalType: "struct IComments.CommentIdentifier";
                readonly type: "tuple";
                readonly components: readonly [{
                    readonly name: "commenter";
                    readonly internalType: "address";
                    readonly type: "address";
                }, {
                    readonly name: "contractAddress";
                    readonly internalType: "address";
                    readonly type: "address";
                }, {
                    readonly name: "tokenId";
                    readonly internalType: "uint256";
                    readonly type: "uint256";
                }, {
                    readonly name: "nonce";
                    readonly internalType: "bytes32";
                    readonly type: "bytes32";
                }];
            }, {
                readonly name: "sparker";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "sparksQuantity";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "deadline";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "nonce";
                readonly internalType: "bytes32";
                readonly type: "bytes32";
            }, {
                readonly name: "referrer";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "sourceChainId";
                readonly internalType: "uint32";
                readonly type: "uint32";
            }, {
                readonly name: "destinationChainId";
                readonly internalType: "uint32";
                readonly type: "uint32";
            }];
        }, {
            readonly name: "signature";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "permitSparkComment";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "protocolRewards";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "contract IProtocolRewards";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "proxiableUUID";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "role";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }, {
            readonly name: "callerConfirmation";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "renounceRole";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "role";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }, {
            readonly name: "account";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "revokeRole";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "commentIdentifier";
            readonly internalType: "struct IComments.CommentIdentifier";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "commenter";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "contractAddress";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "tokenId";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "nonce";
                readonly internalType: "bytes32";
                readonly type: "bytes32";
            }];
        }, {
            readonly name: "sparksQuantity";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "referrer";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "sparkComment";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "sparkValue";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "interfaceId";
            readonly internalType: "bytes4";
            readonly type: "bytes4";
        }];
        readonly name: "supportsInterface";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "newImplementation";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "data";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "upgradeToAndCall";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "commentId";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
            readonly indexed: true;
        }, {
            readonly name: "commentIdentifier";
            readonly internalType: "struct IComments.CommentIdentifier";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "commenter";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "contractAddress";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "tokenId";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "nonce";
                readonly internalType: "bytes32";
                readonly type: "bytes32";
            }];
            readonly indexed: false;
        }, {
            readonly name: "text";
            readonly internalType: "string";
            readonly type: "string";
            readonly indexed: false;
        }, {
            readonly name: "timestamp";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: false;
        }, {
            readonly name: "originalTransactionId";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
            readonly indexed: false;
        }];
        readonly name: "BackfilledComment";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "commentId";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
            readonly indexed: true;
        }, {
            readonly name: "commentIdentifier";
            readonly internalType: "struct IComments.CommentIdentifier";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "commenter";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "contractAddress";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "tokenId";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "nonce";
                readonly internalType: "bytes32";
                readonly type: "bytes32";
            }];
            readonly indexed: false;
        }, {
            readonly name: "replyToId";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
            readonly indexed: false;
        }, {
            readonly name: "replyTo";
            readonly internalType: "struct IComments.CommentIdentifier";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "commenter";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "contractAddress";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "tokenId";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "nonce";
                readonly internalType: "bytes32";
                readonly type: "bytes32";
            }];
            readonly indexed: false;
        }, {
            readonly name: "sparksQuantity";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: false;
        }, {
            readonly name: "text";
            readonly internalType: "string";
            readonly type: "string";
            readonly indexed: false;
        }, {
            readonly name: "timestamp";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: false;
        }, {
            readonly name: "referrer";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }];
        readonly name: "Commented";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [];
        readonly name: "EIP712DomainChanged";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "version";
            readonly internalType: "uint64";
            readonly type: "uint64";
            readonly indexed: false;
        }];
        readonly name: "Initialized";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "role";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
            readonly indexed: true;
        }, {
            readonly name: "previousAdminRole";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
            readonly indexed: true;
        }, {
            readonly name: "newAdminRole";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
            readonly indexed: true;
        }];
        readonly name: "RoleAdminChanged";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "role";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
            readonly indexed: true;
        }, {
            readonly name: "account";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "sender";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }];
        readonly name: "RoleGranted";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "role";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
            readonly indexed: true;
        }, {
            readonly name: "account";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "sender";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }];
        readonly name: "RoleRevoked";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "commentId";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
            readonly indexed: true;
        }, {
            readonly name: "commentIdentifier";
            readonly internalType: "struct IComments.CommentIdentifier";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "commenter";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "contractAddress";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "tokenId";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "nonce";
                readonly internalType: "bytes32";
                readonly type: "bytes32";
            }];
            readonly indexed: false;
        }, {
            readonly name: "sparksQuantity";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: false;
        }, {
            readonly name: "sparker";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }, {
            readonly name: "timestamp";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: false;
        }, {
            readonly name: "referrer";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }];
        readonly name: "SparkedComment";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "implementation";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }];
        readonly name: "Upgraded";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "AccessControlBadConfirmation";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "account";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "neededRole";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly name: "AccessControlUnauthorizedAccount";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "target";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "AddressEmptyCode";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "AddressZero";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ArrayLengthMismatch";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "CannotSparkOwnComment";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "commentAddress";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "commentTokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "replyAddress";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "replyTokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "CommentAddressOrTokenIdsDoNotMatch";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "CommentDoesntExist";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "expected";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "actual";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "CommenterMismatch";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "commentId";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly name: "DuplicateComment";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "implementation";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "ERC1967InvalidImplementation";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ERC1967NonPayable";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "deadline";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "ERC2612ExpiredSignature";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "EmptyComment";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "FailedInnerCall";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "wrongDestinationChainId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "IncorrectDestinationChain";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "actual";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "expected";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "IncorrectETHAmountForSparks";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "account";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "currentNonce";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly name: "InvalidAccountNonce";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "InvalidInitialization";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "InvalidSignature";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "MustSendAtLeastOneSpark";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "NoFundsRecipient";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "NotInitializing";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "NotSmartWallet";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "NotSmartWalletOwner";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "NotTokenHolderOrAdmin";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "OnlySparksContract";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "TransferFailed";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "UUPSUnauthorizedCallContext";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "slot";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly name: "UUPSUnsupportedProxiableUUID";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "currentName";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "newName";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly name: "UpgradeToMismatchedContractName";
    }];
};
/**
 * [__View Contract on Base Basescan__](https://basescan.org/address/0x0a747629609b22E348d0ea9865fC2A5a04ED945d)
 */
export declare const devBuySupplyWithSwapRouterHookABI: readonly [{
    readonly type: "constructor";
    readonly inputs: readonly [{
        readonly name: "_factory";
        readonly internalType: "contract IZoraFactory";
        readonly type: "address";
    }, {
        readonly name: "_swapRouter";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "_poolManager";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "sender";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "coin";
        readonly internalType: "contract ICoin";
        readonly type: "address";
    }, {
        readonly name: "hookData";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "afterCoinDeploy";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly stateMutability: "payable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "factory";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "contract IZoraFactory";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "interfaceId";
        readonly internalType: "bytes4";
        readonly type: "bytes4";
    }];
    readonly name: "supportsInterface";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "pure";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "data";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "unlockCallback";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "AddressZero";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "balance";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "CoinBalanceNot0";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "balance";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "CurrencyBalanceNot0";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "Erc20NotReceived";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "HookNotImplemented";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "InvalidSwapRouterCall";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "NotFactory";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "OnlyPoolManager";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "error";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "SwapReverted";
}];
/**
 * [__View Contract on Base Basescan__](https://basescan.org/address/0x0a747629609b22E348d0ea9865fC2A5a04ED945d)
 */
export declare const devBuySupplyWithSwapRouterHookAddress: {
    readonly 8453: "0x0a747629609b22E348d0ea9865fC2A5a04ED945d";
};
/**
 * [__View Contract on Base Basescan__](https://basescan.org/address/0x0a747629609b22E348d0ea9865fC2A5a04ED945d)
 */
export declare const devBuySupplyWithSwapRouterHookConfig: {
    readonly address: {
        readonly 8453: "0x0a747629609b22E348d0ea9865fC2A5a04ED945d";
    };
    readonly abi: readonly [{
        readonly type: "constructor";
        readonly inputs: readonly [{
            readonly name: "_factory";
            readonly internalType: "contract IZoraFactory";
            readonly type: "address";
        }, {
            readonly name: "_swapRouter";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "_poolManager";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "sender";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "coin";
            readonly internalType: "contract ICoin";
            readonly type: "address";
        }, {
            readonly name: "hookData";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "afterCoinDeploy";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly stateMutability: "payable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "factory";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "contract IZoraFactory";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "interfaceId";
            readonly internalType: "bytes4";
            readonly type: "bytes4";
        }];
        readonly name: "supportsInterface";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "pure";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "data";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "unlockCallback";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "AddressZero";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "balance";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "CoinBalanceNot0";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "balance";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "CurrencyBalanceNot0";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "Erc20NotReceived";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "HookNotImplemented";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "InvalidSwapRouterCall";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "NotFactory";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "OnlyPoolManager";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "error";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "SwapReverted";
    }];
};
/**
 * [__View Contract on Base Basescan__](https://basescan.org/address/0x3d7A3f3351855e135CF89AB412A7C2AA449f9296)
 */
export declare const devCoinFactoryABI: readonly [{
    readonly type: "constructor";
    readonly inputs: readonly [{
        readonly name: "_coinImpl";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "_coinV4Impl";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "UPGRADE_INTERFACE_VERSION";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "msgSender";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "name";
        readonly internalType: "string";
        readonly type: "string";
    }, {
        readonly name: "symbol";
        readonly internalType: "string";
        readonly type: "string";
    }, {
        readonly name: "poolConfig";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }, {
        readonly name: "platformReferrer";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "coinSalt";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly name: "coinAddress";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "coinImpl";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "coinV4Impl";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "contractName";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly stateMutability: "pure";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "contractVersion";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly stateMutability: "pure";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "payoutRecipient";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "owners";
        readonly internalType: "address[]";
        readonly type: "address[]";
    }, {
        readonly name: "uri";
        readonly internalType: "string";
        readonly type: "string";
    }, {
        readonly name: "name";
        readonly internalType: "string";
        readonly type: "string";
    }, {
        readonly name: "symbol";
        readonly internalType: "string";
        readonly type: "string";
    }, {
        readonly name: "platformReferrer";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "currency";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "";
        readonly internalType: "int24";
        readonly type: "int24";
    }, {
        readonly name: "orderSize";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "deploy";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "payable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "payoutRecipient";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "owners";
        readonly internalType: "address[]";
        readonly type: "address[]";
    }, {
        readonly name: "uri";
        readonly internalType: "string";
        readonly type: "string";
    }, {
        readonly name: "name";
        readonly internalType: "string";
        readonly type: "string";
    }, {
        readonly name: "symbol";
        readonly internalType: "string";
        readonly type: "string";
    }, {
        readonly name: "poolConfig";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }, {
        readonly name: "platformReferrer";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "postDeployHook";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "postDeployHookData";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }, {
        readonly name: "coinSalt";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly name: "deploy";
    readonly outputs: readonly [{
        readonly name: "coin";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "postDeployHookDataOut";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly stateMutability: "payable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "payoutRecipient";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "owners";
        readonly internalType: "address[]";
        readonly type: "address[]";
    }, {
        readonly name: "uri";
        readonly internalType: "string";
        readonly type: "string";
    }, {
        readonly name: "name";
        readonly internalType: "string";
        readonly type: "string";
    }, {
        readonly name: "symbol";
        readonly internalType: "string";
        readonly type: "string";
    }, {
        readonly name: "poolConfig";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }, {
        readonly name: "platformReferrer";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "orderSize";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "deploy";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "payable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "payoutRecipient";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "owners";
        readonly internalType: "address[]";
        readonly type: "address[]";
    }, {
        readonly name: "uri";
        readonly internalType: "string";
        readonly type: "string";
    }, {
        readonly name: "name";
        readonly internalType: "string";
        readonly type: "string";
    }, {
        readonly name: "symbol";
        readonly internalType: "string";
        readonly type: "string";
    }, {
        readonly name: "poolConfig";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }, {
        readonly name: "platformReferrer";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "hook";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "hookData";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "deployWithHook";
    readonly outputs: readonly [{
        readonly name: "coin";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "hookDataOut";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly stateMutability: "payable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "coin";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "getVersionForDeployedCoin";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint8";
        readonly type: "uint8";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "implementation";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "initialOwner";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "initialize";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "owner";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "proxiableUUID";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "renounceOwnership";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "newOwner";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "transferOwnership";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "newImplementation";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "data";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "upgradeToAndCall";
    readonly outputs: readonly [];
    readonly stateMutability: "payable";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "caller";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "payoutRecipient";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "platformReferrer";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "currency";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }, {
        readonly name: "uri";
        readonly internalType: "string";
        readonly type: "string";
        readonly indexed: false;
    }, {
        readonly name: "name";
        readonly internalType: "string";
        readonly type: "string";
        readonly indexed: false;
    }, {
        readonly name: "symbol";
        readonly internalType: "string";
        readonly type: "string";
        readonly indexed: false;
    }, {
        readonly name: "coin";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }, {
        readonly name: "pool";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }, {
        readonly name: "version";
        readonly internalType: "string";
        readonly type: "string";
        readonly indexed: false;
    }];
    readonly name: "CoinCreated";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "caller";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "payoutRecipient";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "platformReferrer";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "currency";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }, {
        readonly name: "uri";
        readonly internalType: "string";
        readonly type: "string";
        readonly indexed: false;
    }, {
        readonly name: "name";
        readonly internalType: "string";
        readonly type: "string";
        readonly indexed: false;
    }, {
        readonly name: "symbol";
        readonly internalType: "string";
        readonly type: "string";
        readonly indexed: false;
    }, {
        readonly name: "coin";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }, {
        readonly name: "poolKey";
        readonly internalType: "struct PoolKey";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "currency0";
            readonly internalType: "Currency";
            readonly type: "address";
        }, {
            readonly name: "currency1";
            readonly internalType: "Currency";
            readonly type: "address";
        }, {
            readonly name: "fee";
            readonly internalType: "uint24";
            readonly type: "uint24";
        }, {
            readonly name: "tickSpacing";
            readonly internalType: "int24";
            readonly type: "int24";
        }, {
            readonly name: "hooks";
            readonly internalType: "contract IHooks";
            readonly type: "address";
        }];
        readonly indexed: false;
    }, {
        readonly name: "poolKeyHash";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
        readonly indexed: false;
    }, {
        readonly name: "version";
        readonly internalType: "string";
        readonly type: "string";
        readonly indexed: false;
    }];
    readonly name: "CoinCreatedV4";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "version";
        readonly internalType: "uint64";
        readonly type: "uint64";
        readonly indexed: false;
    }];
    readonly name: "Initialized";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "previousOwner";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "newOwner";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }];
    readonly name: "OwnershipTransferred";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "implementation";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }];
    readonly name: "Upgraded";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "target";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "AddressEmptyCode";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "account";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "AddressInsufficientBalance";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ArrayLengthMismatch";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "CannotMintZeroLiquidity";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ConfigTickLowerMustBeLessThanTickUpper";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "Deprecated";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ERC1167FailedCreateClone";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "implementation";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "ERC1967InvalidImplementation";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ERC1967NonPayable";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ERC20TransferAmountMismatch";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "EthTransferInvalid";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "FailedInnerCall";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "InvalidHook";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "InvalidInitialization";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "InvalidPoolVersion";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "tickLower";
        readonly internalType: "int24";
        readonly type: "int24";
    }, {
        readonly name: "tickUpper";
        readonly internalType: "int24";
        readonly type: "int24";
    }];
    readonly name: "InvalidTickRangeMisordered";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "tickLower";
        readonly internalType: "int24";
        readonly type: "int24";
    }, {
        readonly name: "tickUpper";
        readonly internalType: "int24";
        readonly type: "int24";
    }];
    readonly name: "InvalidTickRangeMisordered";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "value";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "limit";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "MaxShareToBeSoldExceeded";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "NotInitializing";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "NumDiscoveryPositionsOutOfRange";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "owner";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "OwnableInvalidOwner";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "account";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "OwnableUnauthorizedAccount";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ReentrancyGuardReentrantCall";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "token";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "SafeERC20FailedOperation";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "UUPSUnauthorizedCallContext";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "slot";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly name: "UUPSUnsupportedProxiableUUID";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "currentName";
        readonly internalType: "string";
        readonly type: "string";
    }, {
        readonly name: "newName";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly name: "UpgradeToMismatchedContractName";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ZeroDiscoveryPositions";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ZeroDiscoverySupplyShare";
}];
/**
 * [__View Contract on Base Basescan__](https://basescan.org/address/0x3d7A3f3351855e135CF89AB412A7C2AA449f9296)
 */
export declare const devCoinFactoryAddress: {
    readonly 8453: "0x3d7A3f3351855e135CF89AB412A7C2AA449f9296";
};
/**
 * [__View Contract on Base Basescan__](https://basescan.org/address/0x3d7A3f3351855e135CF89AB412A7C2AA449f9296)
 */
export declare const devCoinFactoryConfig: {
    readonly address: {
        readonly 8453: "0x3d7A3f3351855e135CF89AB412A7C2AA449f9296";
    };
    readonly abi: readonly [{
        readonly type: "constructor";
        readonly inputs: readonly [{
            readonly name: "_coinImpl";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "_coinV4Impl";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "UPGRADE_INTERFACE_VERSION";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "msgSender";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "name";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "symbol";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "poolConfig";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }, {
            readonly name: "platformReferrer";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "coinSalt";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly name: "coinAddress";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "coinImpl";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "coinV4Impl";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "contractName";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly stateMutability: "pure";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "contractVersion";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly stateMutability: "pure";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "payoutRecipient";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "owners";
            readonly internalType: "address[]";
            readonly type: "address[]";
        }, {
            readonly name: "uri";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "name";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "symbol";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "platformReferrer";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "currency";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "";
            readonly internalType: "int24";
            readonly type: "int24";
        }, {
            readonly name: "orderSize";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "deploy";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "payable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "payoutRecipient";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "owners";
            readonly internalType: "address[]";
            readonly type: "address[]";
        }, {
            readonly name: "uri";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "name";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "symbol";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "poolConfig";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }, {
            readonly name: "platformReferrer";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "postDeployHook";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "postDeployHookData";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }, {
            readonly name: "coinSalt";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly name: "deploy";
        readonly outputs: readonly [{
            readonly name: "coin";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "postDeployHookDataOut";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly stateMutability: "payable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "payoutRecipient";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "owners";
            readonly internalType: "address[]";
            readonly type: "address[]";
        }, {
            readonly name: "uri";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "name";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "symbol";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "poolConfig";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }, {
            readonly name: "platformReferrer";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "orderSize";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "deploy";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "payable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "payoutRecipient";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "owners";
            readonly internalType: "address[]";
            readonly type: "address[]";
        }, {
            readonly name: "uri";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "name";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "symbol";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "poolConfig";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }, {
            readonly name: "platformReferrer";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "hook";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "hookData";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "deployWithHook";
        readonly outputs: readonly [{
            readonly name: "coin";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "hookDataOut";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly stateMutability: "payable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "coin";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "getVersionForDeployedCoin";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint8";
            readonly type: "uint8";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "implementation";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "initialOwner";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "initialize";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "owner";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "proxiableUUID";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "renounceOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "newOwner";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "transferOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "newImplementation";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "data";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "upgradeToAndCall";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "caller";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "payoutRecipient";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "platformReferrer";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "currency";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }, {
            readonly name: "uri";
            readonly internalType: "string";
            readonly type: "string";
            readonly indexed: false;
        }, {
            readonly name: "name";
            readonly internalType: "string";
            readonly type: "string";
            readonly indexed: false;
        }, {
            readonly name: "symbol";
            readonly internalType: "string";
            readonly type: "string";
            readonly indexed: false;
        }, {
            readonly name: "coin";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }, {
            readonly name: "pool";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }, {
            readonly name: "version";
            readonly internalType: "string";
            readonly type: "string";
            readonly indexed: false;
        }];
        readonly name: "CoinCreated";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "caller";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "payoutRecipient";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "platformReferrer";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "currency";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }, {
            readonly name: "uri";
            readonly internalType: "string";
            readonly type: "string";
            readonly indexed: false;
        }, {
            readonly name: "name";
            readonly internalType: "string";
            readonly type: "string";
            readonly indexed: false;
        }, {
            readonly name: "symbol";
            readonly internalType: "string";
            readonly type: "string";
            readonly indexed: false;
        }, {
            readonly name: "coin";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }, {
            readonly name: "poolKey";
            readonly internalType: "struct PoolKey";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "currency0";
                readonly internalType: "Currency";
                readonly type: "address";
            }, {
                readonly name: "currency1";
                readonly internalType: "Currency";
                readonly type: "address";
            }, {
                readonly name: "fee";
                readonly internalType: "uint24";
                readonly type: "uint24";
            }, {
                readonly name: "tickSpacing";
                readonly internalType: "int24";
                readonly type: "int24";
            }, {
                readonly name: "hooks";
                readonly internalType: "contract IHooks";
                readonly type: "address";
            }];
            readonly indexed: false;
        }, {
            readonly name: "poolKeyHash";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
            readonly indexed: false;
        }, {
            readonly name: "version";
            readonly internalType: "string";
            readonly type: "string";
            readonly indexed: false;
        }];
        readonly name: "CoinCreatedV4";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "version";
            readonly internalType: "uint64";
            readonly type: "uint64";
            readonly indexed: false;
        }];
        readonly name: "Initialized";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "previousOwner";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "newOwner";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }];
        readonly name: "OwnershipTransferred";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "implementation";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }];
        readonly name: "Upgraded";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "target";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "AddressEmptyCode";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "account";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "AddressInsufficientBalance";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ArrayLengthMismatch";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "CannotMintZeroLiquidity";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ConfigTickLowerMustBeLessThanTickUpper";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "Deprecated";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ERC1167FailedCreateClone";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "implementation";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "ERC1967InvalidImplementation";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ERC1967NonPayable";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ERC20TransferAmountMismatch";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "EthTransferInvalid";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "FailedInnerCall";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "InvalidHook";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "InvalidInitialization";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "InvalidPoolVersion";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "tickLower";
            readonly internalType: "int24";
            readonly type: "int24";
        }, {
            readonly name: "tickUpper";
            readonly internalType: "int24";
            readonly type: "int24";
        }];
        readonly name: "InvalidTickRangeMisordered";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "tickLower";
            readonly internalType: "int24";
            readonly type: "int24";
        }, {
            readonly name: "tickUpper";
            readonly internalType: "int24";
            readonly type: "int24";
        }];
        readonly name: "InvalidTickRangeMisordered";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "value";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "limit";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "MaxShareToBeSoldExceeded";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "NotInitializing";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "NumDiscoveryPositionsOutOfRange";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "owner";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "OwnableInvalidOwner";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "account";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "OwnableUnauthorizedAccount";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ReentrancyGuardReentrantCall";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "token";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "SafeERC20FailedOperation";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "UUPSUnauthorizedCallContext";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "slot";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly name: "UUPSUnsupportedProxiableUUID";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "currentName";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "newName";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly name: "UpgradeToMismatchedContractName";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ZeroDiscoveryPositions";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ZeroDiscoverySupplyShare";
    }];
};
/**
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x777777E8850d8D6d98De2B5f64fae401F96eFF31)
 * - [__View Contract on Op Mainnet Optimism Explorer__](https://optimistic.etherscan.io/address/0x777777E8850d8D6d98De2B5f64fae401F96eFF31)
 * - [__View Contract on Base Basescan__](https://basescan.org/address/0x777777E8850d8D6d98De2B5f64fae401F96eFF31)
 * - [__View Contract on Arbitrum One Arbiscan__](https://arbiscan.io/address/0x777777E8850d8D6d98De2B5f64fae401F96eFF31)
 * - [__View Contract on Blast Blastscan__](https://blastscan.io/address/0x777777E8850d8D6d98De2B5f64fae401F96eFF31)
 * - [__View Contract on Base Sepolia Basescan__](https://sepolia.basescan.org/address/0x777777E8850d8D6d98De2B5f64fae401F96eFF31)
 * - [__View Contract on Arbitrum Sepolia Arbiscan__](https://sepolia.arbiscan.io/address/0x777777E8850d8D6d98De2B5f64fae401F96eFF31)
 * - [__View Contract on Zora Explorer__](https://explorer.zora.energy/address/0x777777E8850d8D6d98De2B5f64fae401F96eFF31)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x777777E8850d8D6d98De2B5f64fae401F96eFF31)
 * - [__View Contract on Zora Sepolia Zora Sepolia Explorer__](https://sepolia.explorer.zora.energy//address/0x8Ec7f068A77fa5FC1925110f82381374BA054Ff2)
 */
export declare const erc20MinterABI: readonly [{
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "acceptOwnership";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "config";
        readonly internalType: "struct IERC20Minter.PremintSalesConfig";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "duration";
            readonly internalType: "uint64";
            readonly type: "uint64";
        }, {
            readonly name: "maxTokensPerAddress";
            readonly internalType: "uint64";
            readonly type: "uint64";
        }, {
            readonly name: "pricePerToken";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "fundsRecipient";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "currency";
            readonly internalType: "address";
            readonly type: "address";
        }];
    }];
    readonly name: "buildSalesConfigForPremint";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "struct IERC20Minter.SalesConfig";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "saleStart";
            readonly internalType: "uint64";
            readonly type: "uint64";
        }, {
            readonly name: "saleEnd";
            readonly internalType: "uint64";
            readonly type: "uint64";
        }, {
            readonly name: "maxTokensPerAddress";
            readonly internalType: "uint64";
            readonly type: "uint64";
        }, {
            readonly name: "pricePerToken";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "fundsRecipient";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "currency";
            readonly internalType: "address";
            readonly type: "address";
        }];
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "cancelOwnershipTransfer";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "totalReward";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "computePaidMintRewards";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "struct IERC20Minter.RewardsSettings";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "createReferralReward";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "mintReferralReward";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "zoraReward";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "firstMinterReward";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
    }];
    readonly stateMutability: "pure";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "totalReward";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "rewardPct";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "computeReward";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "pure";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "totalValue";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "computeTotalReward";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "contractName";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly stateMutability: "pure";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "contractURI";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly stateMutability: "pure";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "contractVersion";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly stateMutability: "pure";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "ethRewardAmount";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "tokenContract";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "getCreateReferral";
    readonly outputs: readonly [{
        readonly name: "createReferral";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "getERC20MinterConfig";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "struct IERC20Minter.ERC20MinterConfig";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "zoraRewardRecipientAddress";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "rewardRecipientPercentage";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "ethReward";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "tokenContract";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "getFirstMinter";
    readonly outputs: readonly [{
        readonly name: "firstMinter";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "tokenContract";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "wallet";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "getMintedPerWallet";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "_zoraRewardRecipientAddress";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "_owner";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "_rewardPct";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "_ethReward";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "initialize";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "mintTo";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "quantity";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "tokenAddress";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "totalValue";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "currency";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "mintReferral";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "comment";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly name: "mint";
    readonly outputs: readonly [];
    readonly stateMutability: "payable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "minterConfig";
    readonly outputs: readonly [{
        readonly name: "zoraRewardRecipientAddress";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "rewardRecipientPercentage";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "ethReward";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "owner";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "pendingOwner";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "requestMint";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "struct ICreatorCommands.CommandSet";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "commands";
            readonly internalType: "struct ICreatorCommands.Command[]";
            readonly type: "tuple[]";
            readonly components: readonly [{
                readonly name: "method";
                readonly internalType: "enum ICreatorCommands.CreatorActions";
                readonly type: "uint8";
            }, {
                readonly name: "args";
                readonly internalType: "bytes";
                readonly type: "bytes";
            }];
        }, {
            readonly name: "at";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
    }];
    readonly stateMutability: "pure";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "resetSale";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "resignOwnership";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "_newOwner";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "safeTransferOwnership";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "tokenContract";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "sale";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "struct IERC20Minter.SalesConfig";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "saleStart";
            readonly internalType: "uint64";
            readonly type: "uint64";
        }, {
            readonly name: "saleEnd";
            readonly internalType: "uint64";
            readonly type: "uint64";
        }, {
            readonly name: "maxTokensPerAddress";
            readonly internalType: "uint64";
            readonly type: "uint64";
        }, {
            readonly name: "pricePerToken";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "fundsRecipient";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "currency";
            readonly internalType: "address";
            readonly type: "address";
        }];
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "config";
        readonly internalType: "struct IERC20Minter.ERC20MinterConfig";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "zoraRewardRecipientAddress";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "rewardRecipientPercentage";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "ethReward";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
    }];
    readonly name: "setERC20MinterConfig";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "encodedPremintSalesConfig";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "setPremintSale";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "salesConfig";
        readonly internalType: "struct IERC20Minter.SalesConfig";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "saleStart";
            readonly internalType: "uint64";
            readonly type: "uint64";
        }, {
            readonly name: "saleEnd";
            readonly internalType: "uint64";
            readonly type: "uint64";
        }, {
            readonly name: "maxTokensPerAddress";
            readonly internalType: "uint64";
            readonly type: "uint64";
        }, {
            readonly name: "pricePerToken";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "fundsRecipient";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "currency";
            readonly internalType: "address";
            readonly type: "address";
        }];
    }];
    readonly name: "setSale";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "interfaceId";
        readonly internalType: "bytes4";
        readonly type: "bytes4";
    }];
    readonly name: "supportsInterface";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "pure";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "totalRewardPct";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "_newOwner";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "transferOwnership";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "config";
        readonly internalType: "struct IERC20Minter.ERC20MinterConfig";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "zoraRewardRecipientAddress";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "rewardRecipientPercentage";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "ethReward";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly indexed: false;
    }];
    readonly name: "ERC20MinterConfigSet";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "createReferral";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "mintReferral";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "firstMinter";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "zora";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }, {
        readonly name: "collection";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }, {
        readonly name: "currency";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }, {
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }, {
        readonly name: "createReferralReward";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }, {
        readonly name: "mintReferralReward";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }, {
        readonly name: "firstMinterReward";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }, {
        readonly name: "zoraReward";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }];
    readonly name: "ERC20RewardsDeposit";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "version";
        readonly internalType: "uint8";
        readonly type: "uint8";
        readonly indexed: false;
    }];
    readonly name: "Initialized";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "sender";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "tokenContract";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: true;
    }, {
        readonly name: "quantity";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }, {
        readonly name: "comment";
        readonly internalType: "string";
        readonly type: "string";
        readonly indexed: false;
    }];
    readonly name: "MintComment";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "owner";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "canceledOwner";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }];
    readonly name: "OwnerCanceled";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "owner";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "pendingOwner";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }];
    readonly name: "OwnerPending";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "prevOwner";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "newOwner";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }];
    readonly name: "OwnerUpdated";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "mediaContract";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: true;
    }, {
        readonly name: "salesConfig";
        readonly internalType: "struct IERC20Minter.SalesConfig";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "saleStart";
            readonly internalType: "uint64";
            readonly type: "uint64";
        }, {
            readonly name: "saleEnd";
            readonly internalType: "uint64";
            readonly type: "uint64";
        }, {
            readonly name: "maxTokensPerAddress";
            readonly internalType: "uint64";
            readonly type: "uint64";
        }, {
            readonly name: "pricePerToken";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "fundsRecipient";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "currency";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly indexed: false;
    }];
    readonly name: "SaleSet";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "AddressZero";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ERC20TransferSlippage";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "FailedToSendEthReward";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "INITIALIZABLE_CONTRACT_ALREADY_INITIALIZED";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "INITIALIZABLE_CONTRACT_IS_NOT_INITIALIZING";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "InvalidCurrency";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "expectedValue";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "actualValue";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "InvalidETHValue";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "InvalidValue";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ONLY_OWNER";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ONLY_PENDING_OWNER";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "OWNER_CANNOT_BE_ZERO_ADDRESS";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "PricePerTokenTooLow";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "RequestMintInvalidUseMint";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "SaleEnded";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "SaleHasNotStarted";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "user";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "limit";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "requestedAmount";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "UserExceedsMintLimit";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "WrongValueSent";
}];
/**
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x777777E8850d8D6d98De2B5f64fae401F96eFF31)
 * - [__View Contract on Op Mainnet Optimism Explorer__](https://optimistic.etherscan.io/address/0x777777E8850d8D6d98De2B5f64fae401F96eFF31)
 * - [__View Contract on Base Basescan__](https://basescan.org/address/0x777777E8850d8D6d98De2B5f64fae401F96eFF31)
 * - [__View Contract on Arbitrum One Arbiscan__](https://arbiscan.io/address/0x777777E8850d8D6d98De2B5f64fae401F96eFF31)
 * - [__View Contract on Blast Blastscan__](https://blastscan.io/address/0x777777E8850d8D6d98De2B5f64fae401F96eFF31)
 * - [__View Contract on Base Sepolia Basescan__](https://sepolia.basescan.org/address/0x777777E8850d8D6d98De2B5f64fae401F96eFF31)
 * - [__View Contract on Arbitrum Sepolia Arbiscan__](https://sepolia.arbiscan.io/address/0x777777E8850d8D6d98De2B5f64fae401F96eFF31)
 * - [__View Contract on Zora Explorer__](https://explorer.zora.energy/address/0x777777E8850d8D6d98De2B5f64fae401F96eFF31)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x777777E8850d8D6d98De2B5f64fae401F96eFF31)
 * - [__View Contract on Zora Sepolia Zora Sepolia Explorer__](https://sepolia.explorer.zora.energy//address/0x8Ec7f068A77fa5FC1925110f82381374BA054Ff2)
 */
export declare const erc20MinterAddress: {
    readonly 1: "0x777777E8850d8D6d98De2B5f64fae401F96eFF31";
    readonly 10: "0x777777E8850d8D6d98De2B5f64fae401F96eFF31";
    readonly 8453: "0x777777E8850d8D6d98De2B5f64fae401F96eFF31";
    readonly 42161: "0x777777E8850d8D6d98De2B5f64fae401F96eFF31";
    readonly 81457: "0x777777E8850d8D6d98De2B5f64fae401F96eFF31";
    readonly 84532: "0x777777E8850d8D6d98De2B5f64fae401F96eFF31";
    readonly 421614: "0x777777E8850d8D6d98De2B5f64fae401F96eFF31";
    readonly 7777777: "0x777777E8850d8D6d98De2B5f64fae401F96eFF31";
    readonly 11155111: "0x777777E8850d8D6d98De2B5f64fae401F96eFF31";
    readonly 999999999: "0x8Ec7f068A77fa5FC1925110f82381374BA054Ff2";
};
/**
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x777777E8850d8D6d98De2B5f64fae401F96eFF31)
 * - [__View Contract on Op Mainnet Optimism Explorer__](https://optimistic.etherscan.io/address/0x777777E8850d8D6d98De2B5f64fae401F96eFF31)
 * - [__View Contract on Base Basescan__](https://basescan.org/address/0x777777E8850d8D6d98De2B5f64fae401F96eFF31)
 * - [__View Contract on Arbitrum One Arbiscan__](https://arbiscan.io/address/0x777777E8850d8D6d98De2B5f64fae401F96eFF31)
 * - [__View Contract on Blast Blastscan__](https://blastscan.io/address/0x777777E8850d8D6d98De2B5f64fae401F96eFF31)
 * - [__View Contract on Base Sepolia Basescan__](https://sepolia.basescan.org/address/0x777777E8850d8D6d98De2B5f64fae401F96eFF31)
 * - [__View Contract on Arbitrum Sepolia Arbiscan__](https://sepolia.arbiscan.io/address/0x777777E8850d8D6d98De2B5f64fae401F96eFF31)
 * - [__View Contract on Zora Explorer__](https://explorer.zora.energy/address/0x777777E8850d8D6d98De2B5f64fae401F96eFF31)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x777777E8850d8D6d98De2B5f64fae401F96eFF31)
 * - [__View Contract on Zora Sepolia Zora Sepolia Explorer__](https://sepolia.explorer.zora.energy//address/0x8Ec7f068A77fa5FC1925110f82381374BA054Ff2)
 */
export declare const erc20MinterConfig: {
    readonly address: {
        readonly 1: "0x777777E8850d8D6d98De2B5f64fae401F96eFF31";
        readonly 10: "0x777777E8850d8D6d98De2B5f64fae401F96eFF31";
        readonly 8453: "0x777777E8850d8D6d98De2B5f64fae401F96eFF31";
        readonly 42161: "0x777777E8850d8D6d98De2B5f64fae401F96eFF31";
        readonly 81457: "0x777777E8850d8D6d98De2B5f64fae401F96eFF31";
        readonly 84532: "0x777777E8850d8D6d98De2B5f64fae401F96eFF31";
        readonly 421614: "0x777777E8850d8D6d98De2B5f64fae401F96eFF31";
        readonly 7777777: "0x777777E8850d8D6d98De2B5f64fae401F96eFF31";
        readonly 11155111: "0x777777E8850d8D6d98De2B5f64fae401F96eFF31";
        readonly 999999999: "0x8Ec7f068A77fa5FC1925110f82381374BA054Ff2";
    };
    readonly abi: readonly [{
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "acceptOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "config";
            readonly internalType: "struct IERC20Minter.PremintSalesConfig";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "duration";
                readonly internalType: "uint64";
                readonly type: "uint64";
            }, {
                readonly name: "maxTokensPerAddress";
                readonly internalType: "uint64";
                readonly type: "uint64";
            }, {
                readonly name: "pricePerToken";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "fundsRecipient";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "currency";
                readonly internalType: "address";
                readonly type: "address";
            }];
        }];
        readonly name: "buildSalesConfigForPremint";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "struct IERC20Minter.SalesConfig";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "saleStart";
                readonly internalType: "uint64";
                readonly type: "uint64";
            }, {
                readonly name: "saleEnd";
                readonly internalType: "uint64";
                readonly type: "uint64";
            }, {
                readonly name: "maxTokensPerAddress";
                readonly internalType: "uint64";
                readonly type: "uint64";
            }, {
                readonly name: "pricePerToken";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "fundsRecipient";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "currency";
                readonly internalType: "address";
                readonly type: "address";
            }];
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "cancelOwnershipTransfer";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "totalReward";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "computePaidMintRewards";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "struct IERC20Minter.RewardsSettings";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "createReferralReward";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "mintReferralReward";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "zoraReward";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "firstMinterReward";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }];
        }];
        readonly stateMutability: "pure";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "totalReward";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "rewardPct";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "computeReward";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "pure";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "totalValue";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "computeTotalReward";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "contractName";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly stateMutability: "pure";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "contractURI";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly stateMutability: "pure";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "contractVersion";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly stateMutability: "pure";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "ethRewardAmount";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "tokenContract";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "getCreateReferral";
        readonly outputs: readonly [{
            readonly name: "createReferral";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "getERC20MinterConfig";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "struct IERC20Minter.ERC20MinterConfig";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "zoraRewardRecipientAddress";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "rewardRecipientPercentage";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "ethReward";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }];
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "tokenContract";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "getFirstMinter";
        readonly outputs: readonly [{
            readonly name: "firstMinter";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "tokenContract";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "wallet";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "getMintedPerWallet";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "_zoraRewardRecipientAddress";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "_owner";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "_rewardPct";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "_ethReward";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "initialize";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "mintTo";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "quantity";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "tokenAddress";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "totalValue";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "currency";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "mintReferral";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "comment";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly name: "mint";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "minterConfig";
        readonly outputs: readonly [{
            readonly name: "zoraRewardRecipientAddress";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "rewardRecipientPercentage";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "ethReward";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "owner";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "pendingOwner";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "requestMint";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "struct ICreatorCommands.CommandSet";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "commands";
                readonly internalType: "struct ICreatorCommands.Command[]";
                readonly type: "tuple[]";
                readonly components: readonly [{
                    readonly name: "method";
                    readonly internalType: "enum ICreatorCommands.CreatorActions";
                    readonly type: "uint8";
                }, {
                    readonly name: "args";
                    readonly internalType: "bytes";
                    readonly type: "bytes";
                }];
            }, {
                readonly name: "at";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }];
        }];
        readonly stateMutability: "pure";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "resetSale";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "resignOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "_newOwner";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "safeTransferOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "tokenContract";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "sale";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "struct IERC20Minter.SalesConfig";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "saleStart";
                readonly internalType: "uint64";
                readonly type: "uint64";
            }, {
                readonly name: "saleEnd";
                readonly internalType: "uint64";
                readonly type: "uint64";
            }, {
                readonly name: "maxTokensPerAddress";
                readonly internalType: "uint64";
                readonly type: "uint64";
            }, {
                readonly name: "pricePerToken";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "fundsRecipient";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "currency";
                readonly internalType: "address";
                readonly type: "address";
            }];
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "config";
            readonly internalType: "struct IERC20Minter.ERC20MinterConfig";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "zoraRewardRecipientAddress";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "rewardRecipientPercentage";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "ethReward";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }];
        }];
        readonly name: "setERC20MinterConfig";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "encodedPremintSalesConfig";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "setPremintSale";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "salesConfig";
            readonly internalType: "struct IERC20Minter.SalesConfig";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "saleStart";
                readonly internalType: "uint64";
                readonly type: "uint64";
            }, {
                readonly name: "saleEnd";
                readonly internalType: "uint64";
                readonly type: "uint64";
            }, {
                readonly name: "maxTokensPerAddress";
                readonly internalType: "uint64";
                readonly type: "uint64";
            }, {
                readonly name: "pricePerToken";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "fundsRecipient";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "currency";
                readonly internalType: "address";
                readonly type: "address";
            }];
        }];
        readonly name: "setSale";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "interfaceId";
            readonly internalType: "bytes4";
            readonly type: "bytes4";
        }];
        readonly name: "supportsInterface";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "pure";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "totalRewardPct";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "_newOwner";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "transferOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "config";
            readonly internalType: "struct IERC20Minter.ERC20MinterConfig";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "zoraRewardRecipientAddress";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "rewardRecipientPercentage";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "ethReward";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }];
            readonly indexed: false;
        }];
        readonly name: "ERC20MinterConfigSet";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "createReferral";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "mintReferral";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "firstMinter";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "zora";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }, {
            readonly name: "collection";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }, {
            readonly name: "currency";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }, {
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: false;
        }, {
            readonly name: "createReferralReward";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: false;
        }, {
            readonly name: "mintReferralReward";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: false;
        }, {
            readonly name: "firstMinterReward";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: false;
        }, {
            readonly name: "zoraReward";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: false;
        }];
        readonly name: "ERC20RewardsDeposit";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "version";
            readonly internalType: "uint8";
            readonly type: "uint8";
            readonly indexed: false;
        }];
        readonly name: "Initialized";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "sender";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "tokenContract";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: true;
        }, {
            readonly name: "quantity";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: false;
        }, {
            readonly name: "comment";
            readonly internalType: "string";
            readonly type: "string";
            readonly indexed: false;
        }];
        readonly name: "MintComment";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "owner";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "canceledOwner";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }];
        readonly name: "OwnerCanceled";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "owner";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "pendingOwner";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }];
        readonly name: "OwnerPending";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "prevOwner";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "newOwner";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }];
        readonly name: "OwnerUpdated";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "mediaContract";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: true;
        }, {
            readonly name: "salesConfig";
            readonly internalType: "struct IERC20Minter.SalesConfig";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "saleStart";
                readonly internalType: "uint64";
                readonly type: "uint64";
            }, {
                readonly name: "saleEnd";
                readonly internalType: "uint64";
                readonly type: "uint64";
            }, {
                readonly name: "maxTokensPerAddress";
                readonly internalType: "uint64";
                readonly type: "uint64";
            }, {
                readonly name: "pricePerToken";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "fundsRecipient";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "currency";
                readonly internalType: "address";
                readonly type: "address";
            }];
            readonly indexed: false;
        }];
        readonly name: "SaleSet";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "AddressZero";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ERC20TransferSlippage";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "FailedToSendEthReward";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "INITIALIZABLE_CONTRACT_ALREADY_INITIALIZED";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "INITIALIZABLE_CONTRACT_IS_NOT_INITIALIZING";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "InvalidCurrency";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "expectedValue";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "actualValue";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "InvalidETHValue";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "InvalidValue";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ONLY_OWNER";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ONLY_PENDING_OWNER";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "OWNER_CANNOT_BE_ZERO_ADDRESS";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "PricePerTokenTooLow";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "RequestMintInvalidUseMint";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "SaleEnded";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "SaleHasNotStarted";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "user";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "limit";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "requestedAmount";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "UserExceedsMintLimit";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "WrongValueSent";
    }];
};
export declare const erc20ZABI: readonly [{
    readonly type: "constructor";
    readonly inputs: readonly [{
        readonly name: "_royalties";
        readonly internalType: "contract IRoyalties";
        readonly type: "address";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "receive";
    readonly stateMutability: "payable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "WETH";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "contract IWETH";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "erc20TotalSupply";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "erc20Reserve";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "erc20Liquidity";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "erc20Excess";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "erc1155Excess";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "activate";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "owner";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "spender";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "allowance";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "spender";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "value";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "approve";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "account";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "balanceOf";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "contractURI";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "decimals";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint8";
        readonly type: "uint8";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "collection";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "name";
        readonly internalType: "string";
        readonly type: "string";
    }, {
        readonly name: "symbol";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly name: "initialize";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "name";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "nonfungiblePositionManager";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "contract INonfungiblePositionManager";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "operator";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "from";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "ids";
        readonly internalType: "uint256[]";
        readonly type: "uint256[]";
    }, {
        readonly name: "values";
        readonly internalType: "uint256[]";
        readonly type: "uint256[]";
    }, {
        readonly name: "data";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "onERC1155BatchReceived";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes4";
        readonly type: "bytes4";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "operator";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "from";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "id";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "value";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "data";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "onERC1155Received";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes4";
        readonly type: "bytes4";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "from";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "operator";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "data";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "onERC721Received";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes4";
        readonly type: "bytes4";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "royalties";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "contract IRoyalties";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "interfaceId";
        readonly internalType: "bytes4";
        readonly type: "bytes4";
    }];
    readonly name: "supportsInterface";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "symbol";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "tokenInfo";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "struct IERC20Z.TokenInfo";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "collection";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "creator";
            readonly internalType: "address";
            readonly type: "address";
        }];
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "tokenLiquidityInfo";
    readonly outputs: readonly [{
        readonly name: "pool";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "initialLiquidityPositionId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "tokenURI";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "totalSupply";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "to";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "value";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "transfer";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "from";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "to";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "value";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "transferFrom";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "amount20z";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "recipient";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "unwrap";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "amount1155";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "recipient";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "wrap";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "owner";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "spender";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "value";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }];
    readonly name: "Approval";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "erc20z";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "amount20z";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }, {
        readonly name: "collection";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }, {
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }, {
        readonly name: "amount1155";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }, {
        readonly name: "recipient";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }];
    readonly name: "ConvertedTo1155";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "erc20z";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "amount20z";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }, {
        readonly name: "collection";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }, {
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }, {
        readonly name: "amount1155";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }, {
        readonly name: "recipient";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }];
    readonly name: "ConvertedTo20z";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "version";
        readonly internalType: "uint64";
        readonly type: "uint64";
        readonly indexed: false;
    }];
    readonly name: "Initialized";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "quantity";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }];
    readonly name: "ReceivedAdminMintNFTs";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "token0";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "amount0";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: true;
    }, {
        readonly name: "token1";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }, {
        readonly name: "amount1";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }, {
        readonly name: "fee";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }, {
        readonly name: "positionId";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }, {
        readonly name: "lpLiquidity";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }, {
        readonly name: "erc20Excess";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }, {
        readonly name: "erc1155Excess";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }];
    readonly name: "SecondaryMarketActivated";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "from";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "to";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "value";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }];
    readonly name: "Transfer";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "target";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "AddressEmptyCode";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "account";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "AddressInsufficientBalance";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "AlreadyActivatedCannotReactivate";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "spender";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "allowance";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "needed";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "ERC20InsufficientAllowance";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "sender";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "balance";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "needed";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "ERC20InsufficientBalance";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "approver";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "ERC20InvalidApprover";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "receiver";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "ERC20InvalidReceiver";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "sender";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "ERC20InvalidSender";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "spender";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "ERC20InvalidSpender";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "FailedInnerCall";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "IDsDoNotMatchValuesLength";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "InsufficientBalance";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "Invalid20zTransfer";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "InvalidAmount20z";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "InvalidInitialization";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "InvalidParams";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "NotInitializing";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "OnlySaleStrategy";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "OnlySupportReceivingERC1155AssociatedZoraNFT";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "OnlySupportReceivingERC721UniswapPoolNFTs";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "PoolCreationFailed";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "RecipientAddressZero";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ReentrancyGuardReentrantCall";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "token";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "SafeERC20FailedOperation";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "SecondaryMarketHasNotYetStarted";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "TokenIdNotValidToSwap";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "UnknownReceiveActionDataCall";
}];
/**
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x77777771DF91C56c5468746E80DFA8b880f9719F)
 * - [__View Contract on Op Mainnet Optimism Explorer__](https://optimistic.etherscan.io/address/0x77777771DF91C56c5468746E80DFA8b880f9719F)
 * - [__View Contract on Base Basescan__](https://basescan.org/address/0x77777771DF91C56c5468746E80DFA8b880f9719F)
 * - [__View Contract on Arbitrum One Arbiscan__](https://arbiscan.io/address/0x77777771DF91C56c5468746E80DFA8b880f9719F)
 * - [__View Contract on Blast Blastscan__](https://blastscan.io/address/0x77777771DF91C56c5468746E80DFA8b880f9719F)
 * - [__View Contract on Base Sepolia Basescan__](https://sepolia.basescan.org/address/0x77777771DF91C56c5468746E80DFA8b880f9719F)
 * - [__View Contract on Arbitrum Sepolia Arbiscan__](https://sepolia.arbiscan.io/address/0x77777771DF91C56c5468746E80DFA8b880f9719F)
 * - [__View Contract on Zora Explorer__](https://explorer.zora.energy/address/0x77777771DF91C56c5468746E80DFA8b880f9719F)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x53a85FbD2955EF713AA489Ae0C48523E727a0c07)
 * - [__View Contract on Zora Sepolia Zora Sepolia Explorer__](https://sepolia.explorer.zora.energy//address/0x77777771DF91C56c5468746E80DFA8b880f9719F)
 */
export declare const erc20ZRoyaltiesABI: readonly [{
    readonly type: "receive";
    readonly stateMutability: "payable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "WETH";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "contract IWETH";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "erc20z";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "recipient";
        readonly internalType: "address payable";
        readonly type: "address";
    }];
    readonly name: "claim";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "erc20z";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "claimFor";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "feeBps";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "feeRecipient";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address payable";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "amount";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "getFee";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "erc20z";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "getUnclaimedFees";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "struct IRoyalties.UnclaimedFees";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "token0";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "token1";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "token0Amount";
            readonly internalType: "uint128";
            readonly type: "uint128";
        }, {
            readonly name: "token1Amount";
            readonly internalType: "uint128";
            readonly type: "uint128";
        }];
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "erc20z";
        readonly internalType: "address[]";
        readonly type: "address[]";
    }];
    readonly name: "getUnclaimedFeesBatch";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "struct IRoyalties.UnclaimedFees[]";
        readonly type: "tuple[]";
        readonly components: readonly [{
            readonly name: "token0";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "token1";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "token0Amount";
            readonly internalType: "uint128";
            readonly type: "uint128";
        }, {
            readonly name: "token1Amount";
            readonly internalType: "uint128";
            readonly type: "uint128";
        }];
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "_weth";
        readonly internalType: "contract IWETH";
        readonly type: "address";
    }, {
        readonly name: "_nonfungiblePositionManager";
        readonly internalType: "contract INonfungiblePositionManager";
        readonly type: "address";
    }, {
        readonly name: "_feeRecipient";
        readonly internalType: "address payable";
        readonly type: "address";
    }, {
        readonly name: "_feeBps";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "initialize";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "nonfungiblePositionManager";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "contract INonfungiblePositionManager";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "operator";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "from";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "positionId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "data";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "onERC721Received";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes4";
        readonly type: "bytes4";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "erc20z";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "positionsByErc20z";
    readonly outputs: readonly [{
        readonly name: "positionId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "collection";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: true;
    }, {
        readonly name: "creator";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "recipient";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }, {
        readonly name: "positionAddress";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }, {
        readonly name: "positionId";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }, {
        readonly name: "token0";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }, {
        readonly name: "token0Amount";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }, {
        readonly name: "token1";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }, {
        readonly name: "token1Amount";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }];
    readonly name: "RoyaltyClaim";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "erc20zAddress";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "positionAddress";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }, {
        readonly name: "positionId";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }];
    readonly name: "RoyaltyDeposit";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "AddressCannotBeZero";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "target";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "AddressEmptyCode";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "account";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "AddressInsufficientBalance";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "AddressZero";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "AlreadyInitialized";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "CreatorMustBeSet";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ERC721SenderRoyaltiesNeedsToBePositionManager";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "FailedInnerCall";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "OnlyCreatorCanCall";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "OnlyErc20z";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "OnlyWeth";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ParamsCannotBeZero";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ReentrancyGuardReentrantCall";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "token";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "SafeERC20FailedOperation";
}];
/**
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x77777771DF91C56c5468746E80DFA8b880f9719F)
 * - [__View Contract on Op Mainnet Optimism Explorer__](https://optimistic.etherscan.io/address/0x77777771DF91C56c5468746E80DFA8b880f9719F)
 * - [__View Contract on Base Basescan__](https://basescan.org/address/0x77777771DF91C56c5468746E80DFA8b880f9719F)
 * - [__View Contract on Arbitrum One Arbiscan__](https://arbiscan.io/address/0x77777771DF91C56c5468746E80DFA8b880f9719F)
 * - [__View Contract on Blast Blastscan__](https://blastscan.io/address/0x77777771DF91C56c5468746E80DFA8b880f9719F)
 * - [__View Contract on Base Sepolia Basescan__](https://sepolia.basescan.org/address/0x77777771DF91C56c5468746E80DFA8b880f9719F)
 * - [__View Contract on Arbitrum Sepolia Arbiscan__](https://sepolia.arbiscan.io/address/0x77777771DF91C56c5468746E80DFA8b880f9719F)
 * - [__View Contract on Zora Explorer__](https://explorer.zora.energy/address/0x77777771DF91C56c5468746E80DFA8b880f9719F)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x53a85FbD2955EF713AA489Ae0C48523E727a0c07)
 * - [__View Contract on Zora Sepolia Zora Sepolia Explorer__](https://sepolia.explorer.zora.energy//address/0x77777771DF91C56c5468746E80DFA8b880f9719F)
 */
export declare const erc20ZRoyaltiesAddress: {
    readonly 1: "0x77777771DF91C56c5468746E80DFA8b880f9719F";
    readonly 10: "0x77777771DF91C56c5468746E80DFA8b880f9719F";
    readonly 8453: "0x77777771DF91C56c5468746E80DFA8b880f9719F";
    readonly 42161: "0x77777771DF91C56c5468746E80DFA8b880f9719F";
    readonly 81457: "0x77777771DF91C56c5468746E80DFA8b880f9719F";
    readonly 84532: "0x77777771DF91C56c5468746E80DFA8b880f9719F";
    readonly 421614: "0x77777771DF91C56c5468746E80DFA8b880f9719F";
    readonly 7777777: "0x77777771DF91C56c5468746E80DFA8b880f9719F";
    readonly 11155111: "0x53a85FbD2955EF713AA489Ae0C48523E727a0c07";
    readonly 999999999: "0x77777771DF91C56c5468746E80DFA8b880f9719F";
};
/**
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x77777771DF91C56c5468746E80DFA8b880f9719F)
 * - [__View Contract on Op Mainnet Optimism Explorer__](https://optimistic.etherscan.io/address/0x77777771DF91C56c5468746E80DFA8b880f9719F)
 * - [__View Contract on Base Basescan__](https://basescan.org/address/0x77777771DF91C56c5468746E80DFA8b880f9719F)
 * - [__View Contract on Arbitrum One Arbiscan__](https://arbiscan.io/address/0x77777771DF91C56c5468746E80DFA8b880f9719F)
 * - [__View Contract on Blast Blastscan__](https://blastscan.io/address/0x77777771DF91C56c5468746E80DFA8b880f9719F)
 * - [__View Contract on Base Sepolia Basescan__](https://sepolia.basescan.org/address/0x77777771DF91C56c5468746E80DFA8b880f9719F)
 * - [__View Contract on Arbitrum Sepolia Arbiscan__](https://sepolia.arbiscan.io/address/0x77777771DF91C56c5468746E80DFA8b880f9719F)
 * - [__View Contract on Zora Explorer__](https://explorer.zora.energy/address/0x77777771DF91C56c5468746E80DFA8b880f9719F)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x53a85FbD2955EF713AA489Ae0C48523E727a0c07)
 * - [__View Contract on Zora Sepolia Zora Sepolia Explorer__](https://sepolia.explorer.zora.energy//address/0x77777771DF91C56c5468746E80DFA8b880f9719F)
 */
export declare const erc20ZRoyaltiesConfig: {
    readonly address: {
        readonly 1: "0x77777771DF91C56c5468746E80DFA8b880f9719F";
        readonly 10: "0x77777771DF91C56c5468746E80DFA8b880f9719F";
        readonly 8453: "0x77777771DF91C56c5468746E80DFA8b880f9719F";
        readonly 42161: "0x77777771DF91C56c5468746E80DFA8b880f9719F";
        readonly 81457: "0x77777771DF91C56c5468746E80DFA8b880f9719F";
        readonly 84532: "0x77777771DF91C56c5468746E80DFA8b880f9719F";
        readonly 421614: "0x77777771DF91C56c5468746E80DFA8b880f9719F";
        readonly 7777777: "0x77777771DF91C56c5468746E80DFA8b880f9719F";
        readonly 11155111: "0x53a85FbD2955EF713AA489Ae0C48523E727a0c07";
        readonly 999999999: "0x77777771DF91C56c5468746E80DFA8b880f9719F";
    };
    readonly abi: readonly [{
        readonly type: "receive";
        readonly stateMutability: "payable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "WETH";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "contract IWETH";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "erc20z";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "recipient";
            readonly internalType: "address payable";
            readonly type: "address";
        }];
        readonly name: "claim";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "erc20z";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "claimFor";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "feeBps";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "feeRecipient";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address payable";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "amount";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "getFee";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "erc20z";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "getUnclaimedFees";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "struct IRoyalties.UnclaimedFees";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "token0";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "token1";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "token0Amount";
                readonly internalType: "uint128";
                readonly type: "uint128";
            }, {
                readonly name: "token1Amount";
                readonly internalType: "uint128";
                readonly type: "uint128";
            }];
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "erc20z";
            readonly internalType: "address[]";
            readonly type: "address[]";
        }];
        readonly name: "getUnclaimedFeesBatch";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "struct IRoyalties.UnclaimedFees[]";
            readonly type: "tuple[]";
            readonly components: readonly [{
                readonly name: "token0";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "token1";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "token0Amount";
                readonly internalType: "uint128";
                readonly type: "uint128";
            }, {
                readonly name: "token1Amount";
                readonly internalType: "uint128";
                readonly type: "uint128";
            }];
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "_weth";
            readonly internalType: "contract IWETH";
            readonly type: "address";
        }, {
            readonly name: "_nonfungiblePositionManager";
            readonly internalType: "contract INonfungiblePositionManager";
            readonly type: "address";
        }, {
            readonly name: "_feeRecipient";
            readonly internalType: "address payable";
            readonly type: "address";
        }, {
            readonly name: "_feeBps";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "initialize";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "nonfungiblePositionManager";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "contract INonfungiblePositionManager";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "operator";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "from";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "positionId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "data";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "onERC721Received";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes4";
            readonly type: "bytes4";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "erc20z";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "positionsByErc20z";
        readonly outputs: readonly [{
            readonly name: "positionId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "collection";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: true;
        }, {
            readonly name: "creator";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "recipient";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }, {
            readonly name: "positionAddress";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }, {
            readonly name: "positionId";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: false;
        }, {
            readonly name: "token0";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }, {
            readonly name: "token0Amount";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: false;
        }, {
            readonly name: "token1";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }, {
            readonly name: "token1Amount";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: false;
        }];
        readonly name: "RoyaltyClaim";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "erc20zAddress";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "positionAddress";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }, {
            readonly name: "positionId";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: false;
        }];
        readonly name: "RoyaltyDeposit";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "AddressCannotBeZero";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "target";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "AddressEmptyCode";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "account";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "AddressInsufficientBalance";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "AddressZero";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "AlreadyInitialized";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "CreatorMustBeSet";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ERC721SenderRoyaltiesNeedsToBePositionManager";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "FailedInnerCall";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "OnlyCreatorCanCall";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "OnlyErc20z";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "OnlyWeth";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ParamsCannotBeZero";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ReentrancyGuardReentrantCall";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "token";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "SafeERC20FailedOperation";
    }];
};
export declare const iPremintDefinitionsABI: readonly [{
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "";
        readonly internalType: "struct TokenCreationConfig";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "tokenURI";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "maxSupply";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "maxTokensPerAddress";
            readonly internalType: "uint64";
            readonly type: "uint64";
        }, {
            readonly name: "pricePerToken";
            readonly internalType: "uint96";
            readonly type: "uint96";
        }, {
            readonly name: "mintStart";
            readonly internalType: "uint64";
            readonly type: "uint64";
        }, {
            readonly name: "mintDuration";
            readonly internalType: "uint64";
            readonly type: "uint64";
        }, {
            readonly name: "royaltyMintSchedule";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }, {
            readonly name: "royaltyBPS";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }, {
            readonly name: "royaltyRecipient";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "fixedPriceMinter";
            readonly internalType: "address";
            readonly type: "address";
        }];
    }];
    readonly name: "tokenConfigV1Definition";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "";
        readonly internalType: "struct TokenCreationConfigV2";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "tokenURI";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "maxSupply";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "maxTokensPerAddress";
            readonly internalType: "uint64";
            readonly type: "uint64";
        }, {
            readonly name: "pricePerToken";
            readonly internalType: "uint96";
            readonly type: "uint96";
        }, {
            readonly name: "mintStart";
            readonly internalType: "uint64";
            readonly type: "uint64";
        }, {
            readonly name: "mintDuration";
            readonly internalType: "uint64";
            readonly type: "uint64";
        }, {
            readonly name: "royaltyBPS";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }, {
            readonly name: "payoutRecipient";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "fixedPriceMinter";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "createReferral";
            readonly internalType: "address";
            readonly type: "address";
        }];
    }];
    readonly name: "tokenConfigV2Definition";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "";
        readonly internalType: "struct TokenCreationConfigV3";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "tokenURI";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "maxSupply";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "royaltyBPS";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }, {
            readonly name: "payoutRecipient";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "createReferral";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "mintStart";
            readonly internalType: "uint64";
            readonly type: "uint64";
        }, {
            readonly name: "minter";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "premintSalesConfig";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
    }];
    readonly name: "tokenConfigV3Definition";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}];
export declare const iSponsoredSparksSpenderActionABI: readonly [{
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "sponsoredMintBatch";
        readonly internalType: "struct SponsoredMintBatch";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "verifier";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "from";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "destination";
            readonly internalType: "address payable";
            readonly type: "address";
        }, {
            readonly name: "data";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }, {
            readonly name: "expectedRedeemAmount";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "totalAmount";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "ids";
            readonly internalType: "uint256[]";
            readonly type: "uint256[]";
        }, {
            readonly name: "quantities";
            readonly internalType: "uint256[]";
            readonly type: "uint256[]";
        }, {
            readonly name: "nonce";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "deadline";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
    }, {
        readonly name: "signature";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "sponsoredMintBatch";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}];
export declare const iUniswapV3PoolABI: readonly [{
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "fee";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint24";
        readonly type: "uint24";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "feeGrowthGlobal0X128";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "feeGrowthGlobal1X128";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "observationCardinalityNext";
        readonly internalType: "uint16";
        readonly type: "uint16";
    }];
    readonly name: "increaseObservationCardinalityNext";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "secondsAgos";
        readonly internalType: "uint32[]";
        readonly type: "uint32[]";
    }];
    readonly name: "observe";
    readonly outputs: readonly [{
        readonly name: "tickCumulatives";
        readonly internalType: "int56[]";
        readonly type: "int56[]";
    }, {
        readonly name: "secondsPerLiquidityCumulativeX128s";
        readonly internalType: "uint160[]";
        readonly type: "uint160[]";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "slot0";
    readonly outputs: readonly [{
        readonly name: "slot0";
        readonly internalType: "struct IUniswapV3Pool.Slot0";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "sqrtPriceX96";
            readonly internalType: "uint160";
            readonly type: "uint160";
        }, {
            readonly name: "tick";
            readonly internalType: "int24";
            readonly type: "int24";
        }, {
            readonly name: "observationIndex";
            readonly internalType: "uint16";
            readonly type: "uint16";
        }, {
            readonly name: "observationCardinality";
            readonly internalType: "uint16";
            readonly type: "uint16";
        }, {
            readonly name: "observationCardinalityNext";
            readonly internalType: "uint16";
            readonly type: "uint16";
        }, {
            readonly name: "feeProtocol";
            readonly internalType: "uint8";
            readonly type: "uint8";
        }, {
            readonly name: "unlocked";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "recipient";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "zeroForOne";
        readonly internalType: "bool";
        readonly type: "bool";
    }, {
        readonly name: "amountSpecified";
        readonly internalType: "int256";
        readonly type: "int256";
    }, {
        readonly name: "sqrtPriceLimitX96";
        readonly internalType: "uint160";
        readonly type: "uint160";
    }, {
        readonly name: "data";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "swap";
    readonly outputs: readonly [{
        readonly name: "amount0";
        readonly internalType: "int256";
        readonly type: "int256";
    }, {
        readonly name: "amount1";
        readonly internalType: "int256";
        readonly type: "int256";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "token0";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "token1";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}];
export declare const iUnwrapAndForwardActionABI: readonly [{
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "receiverAddress";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "call";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }, {
        readonly name: "valueToSend";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "callWithEth";
    readonly outputs: readonly [];
    readonly stateMutability: "payable";
}];
/**
 * - [__View Contract on Zora Explorer__](https://explorer.zora.energy/address/0xb0994EB9520C98C97e1F3953a5964535C2bd271A)
 * - [__View Contract on Zora Sepolia Zora Sepolia Explorer__](https://sepolia.explorer.zora.energy//address/0xb0994EB9520C98C97e1F3953a5964535C2bd271A)
 */
export declare const mintsEthUnwrapperAndCallerABI: readonly [{
    readonly type: "constructor";
    readonly inputs: readonly [{
        readonly name: "_zoraSparks1155";
        readonly internalType: "contract IZoraSparks1155";
        readonly type: "address";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "receive";
    readonly stateMutability: "payable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "from";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "ids";
        readonly internalType: "uint256[]";
        readonly type: "uint256[]";
    }, {
        readonly name: "values";
        readonly internalType: "uint256[]";
        readonly type: "uint256[]";
    }, {
        readonly name: "data";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "onERC1155BatchReceived";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes4";
        readonly type: "bytes4";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "from";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "id";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "value";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "data";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "onERC1155Received";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes4";
        readonly type: "bytes4";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "permit";
        readonly internalType: "struct IZoraSparks1155Managed.PermitBatch";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "owner";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "to";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "tokenIds";
            readonly internalType: "uint256[]";
            readonly type: "uint256[]";
        }, {
            readonly name: "quantities";
            readonly internalType: "uint256[]";
            readonly type: "uint256[]";
        }, {
            readonly name: "safeTransferData";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }, {
            readonly name: "deadline";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "nonce";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
    }, {
        readonly name: "signature";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "permitWithAdditionalValue";
    readonly outputs: readonly [];
    readonly stateMutability: "payable";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "account";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "AddressInsufficientBalance";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "data";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "CallFailed";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "ERC20NotSupported";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "FailedInnerCall";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "NotExpectingReceive";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "NotZoraSparks1155";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "data";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "TransferFailed";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "UnknownUserAction";
}];
/**
 * - [__View Contract on Zora Explorer__](https://explorer.zora.energy/address/0xb0994EB9520C98C97e1F3953a5964535C2bd271A)
 * - [__View Contract on Zora Sepolia Zora Sepolia Explorer__](https://sepolia.explorer.zora.energy//address/0xb0994EB9520C98C97e1F3953a5964535C2bd271A)
 */
export declare const mintsEthUnwrapperAndCallerAddress: {
    readonly 7777777: "0xb0994EB9520C98C97e1F3953a5964535C2bd271A";
    readonly 999999999: "0xb0994EB9520C98C97e1F3953a5964535C2bd271A";
};
/**
 * - [__View Contract on Zora Explorer__](https://explorer.zora.energy/address/0xb0994EB9520C98C97e1F3953a5964535C2bd271A)
 * - [__View Contract on Zora Sepolia Zora Sepolia Explorer__](https://sepolia.explorer.zora.energy//address/0xb0994EB9520C98C97e1F3953a5964535C2bd271A)
 */
export declare const mintsEthUnwrapperAndCallerConfig: {
    readonly address: {
        readonly 7777777: "0xb0994EB9520C98C97e1F3953a5964535C2bd271A";
        readonly 999999999: "0xb0994EB9520C98C97e1F3953a5964535C2bd271A";
    };
    readonly abi: readonly [{
        readonly type: "constructor";
        readonly inputs: readonly [{
            readonly name: "_zoraSparks1155";
            readonly internalType: "contract IZoraSparks1155";
            readonly type: "address";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "receive";
        readonly stateMutability: "payable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "from";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "ids";
            readonly internalType: "uint256[]";
            readonly type: "uint256[]";
        }, {
            readonly name: "values";
            readonly internalType: "uint256[]";
            readonly type: "uint256[]";
        }, {
            readonly name: "data";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "onERC1155BatchReceived";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes4";
            readonly type: "bytes4";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "from";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "id";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "value";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "data";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "onERC1155Received";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes4";
            readonly type: "bytes4";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "permit";
            readonly internalType: "struct IZoraSparks1155Managed.PermitBatch";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "owner";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "to";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "tokenIds";
                readonly internalType: "uint256[]";
                readonly type: "uint256[]";
            }, {
                readonly name: "quantities";
                readonly internalType: "uint256[]";
                readonly type: "uint256[]";
            }, {
                readonly name: "safeTransferData";
                readonly internalType: "bytes";
                readonly type: "bytes";
            }, {
                readonly name: "deadline";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "nonce";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }];
        }, {
            readonly name: "signature";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "permitWithAdditionalValue";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "account";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "AddressInsufficientBalance";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "data";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "CallFailed";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "ERC20NotSupported";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "FailedInnerCall";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "NotExpectingReceive";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "NotZoraSparks1155";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "data";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "TransferFailed";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "UnknownUserAction";
    }];
};
/**
 * - [__View Contract on Base Basescan__](https://basescan.org/address/0x000000000022D473030F116dDEE9F6B43aC78BA3)
 * - [__View Contract on Base Sepolia Basescan__](https://sepolia.basescan.org/address/0x000000000022D473030F116dDEE9F6B43aC78BA3)
 */
export declare const permit2ABI: readonly [{
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "DOMAIN_SEPARATOR";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "user";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "token";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "spender";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "allowance";
    readonly outputs: readonly [{
        readonly name: "amount";
        readonly internalType: "uint160";
        readonly type: "uint160";
    }, {
        readonly name: "expiration";
        readonly internalType: "uint48";
        readonly type: "uint48";
    }, {
        readonly name: "nonce";
        readonly internalType: "uint48";
        readonly type: "uint48";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "token";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "spender";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "amount";
        readonly internalType: "uint160";
        readonly type: "uint160";
    }, {
        readonly name: "expiration";
        readonly internalType: "uint48";
        readonly type: "uint48";
    }];
    readonly name: "approve";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "token";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "spender";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "newNonce";
        readonly internalType: "uint48";
        readonly type: "uint48";
    }];
    readonly name: "invalidateNonces";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "wordPos";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "mask";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "invalidateUnorderedNonces";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "approvals";
        readonly internalType: "struct IAllowanceTransfer.TokenSpenderPair[]";
        readonly type: "tuple[]";
        readonly components: readonly [{
            readonly name: "token";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "spender";
            readonly internalType: "address";
            readonly type: "address";
        }];
    }];
    readonly name: "lockdown";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "nonceBitmap";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "owner";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "permitBatch";
        readonly internalType: "struct IAllowanceTransfer.PermitBatch";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "details";
            readonly internalType: "struct IAllowanceTransfer.PermitDetails[]";
            readonly type: "tuple[]";
            readonly components: readonly [{
                readonly name: "token";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "amount";
                readonly internalType: "uint160";
                readonly type: "uint160";
            }, {
                readonly name: "expiration";
                readonly internalType: "uint48";
                readonly type: "uint48";
            }, {
                readonly name: "nonce";
                readonly internalType: "uint48";
                readonly type: "uint48";
            }];
        }, {
            readonly name: "spender";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "sigDeadline";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
    }, {
        readonly name: "signature";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "permit";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "owner";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "permitSingle";
        readonly internalType: "struct IAllowanceTransfer.PermitSingle";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "details";
            readonly internalType: "struct IAllowanceTransfer.PermitDetails";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "token";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "amount";
                readonly internalType: "uint160";
                readonly type: "uint160";
            }, {
                readonly name: "expiration";
                readonly internalType: "uint48";
                readonly type: "uint48";
            }, {
                readonly name: "nonce";
                readonly internalType: "uint48";
                readonly type: "uint48";
            }];
        }, {
            readonly name: "spender";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "sigDeadline";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
    }, {
        readonly name: "signature";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "permit";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "permit";
        readonly internalType: "struct ISignatureTransfer.PermitTransferFrom";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "permitted";
            readonly internalType: "struct ISignatureTransfer.TokenPermissions";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "token";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "amount";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }];
        }, {
            readonly name: "nonce";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "deadline";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
    }, {
        readonly name: "transferDetails";
        readonly internalType: "struct ISignatureTransfer.SignatureTransferDetails";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "to";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "requestedAmount";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
    }, {
        readonly name: "owner";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "signature";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "permitTransferFrom";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "permit";
        readonly internalType: "struct ISignatureTransfer.PermitBatchTransferFrom";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "permitted";
            readonly internalType: "struct ISignatureTransfer.TokenPermissions[]";
            readonly type: "tuple[]";
            readonly components: readonly [{
                readonly name: "token";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "amount";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }];
        }, {
            readonly name: "nonce";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "deadline";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
    }, {
        readonly name: "transferDetails";
        readonly internalType: "struct ISignatureTransfer.SignatureTransferDetails[]";
        readonly type: "tuple[]";
        readonly components: readonly [{
            readonly name: "to";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "requestedAmount";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
    }, {
        readonly name: "owner";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "signature";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "permitTransferFrom";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "permit";
        readonly internalType: "struct ISignatureTransfer.PermitTransferFrom";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "permitted";
            readonly internalType: "struct ISignatureTransfer.TokenPermissions";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "token";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "amount";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }];
        }, {
            readonly name: "nonce";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "deadline";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
    }, {
        readonly name: "transferDetails";
        readonly internalType: "struct ISignatureTransfer.SignatureTransferDetails";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "to";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "requestedAmount";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
    }, {
        readonly name: "owner";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "witness";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }, {
        readonly name: "witnessTypeString";
        readonly internalType: "string";
        readonly type: "string";
    }, {
        readonly name: "signature";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "permitWitnessTransferFrom";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "permit";
        readonly internalType: "struct ISignatureTransfer.PermitBatchTransferFrom";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "permitted";
            readonly internalType: "struct ISignatureTransfer.TokenPermissions[]";
            readonly type: "tuple[]";
            readonly components: readonly [{
                readonly name: "token";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "amount";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }];
        }, {
            readonly name: "nonce";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "deadline";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
    }, {
        readonly name: "transferDetails";
        readonly internalType: "struct ISignatureTransfer.SignatureTransferDetails[]";
        readonly type: "tuple[]";
        readonly components: readonly [{
            readonly name: "to";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "requestedAmount";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
    }, {
        readonly name: "owner";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "witness";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }, {
        readonly name: "witnessTypeString";
        readonly internalType: "string";
        readonly type: "string";
    }, {
        readonly name: "signature";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "permitWitnessTransferFrom";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "transferDetails";
        readonly internalType: "struct IAllowanceTransfer.AllowanceTransferDetails[]";
        readonly type: "tuple[]";
        readonly components: readonly [{
            readonly name: "from";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "to";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "amount";
            readonly internalType: "uint160";
            readonly type: "uint160";
        }, {
            readonly name: "token";
            readonly internalType: "address";
            readonly type: "address";
        }];
    }];
    readonly name: "transferFrom";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "from";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "to";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "amount";
        readonly internalType: "uint160";
        readonly type: "uint160";
    }, {
        readonly name: "token";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "transferFrom";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "owner";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "token";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "spender";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "amount";
        readonly internalType: "uint160";
        readonly type: "uint160";
        readonly indexed: false;
    }, {
        readonly name: "expiration";
        readonly internalType: "uint48";
        readonly type: "uint48";
        readonly indexed: false;
    }];
    readonly name: "Approval";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "owner";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "token";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }, {
        readonly name: "spender";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }];
    readonly name: "Lockdown";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "owner";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "token";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "spender";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "newNonce";
        readonly internalType: "uint48";
        readonly type: "uint48";
        readonly indexed: false;
    }, {
        readonly name: "oldNonce";
        readonly internalType: "uint48";
        readonly type: "uint48";
        readonly indexed: false;
    }];
    readonly name: "NonceInvalidation";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "owner";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "token";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "spender";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "amount";
        readonly internalType: "uint160";
        readonly type: "uint160";
        readonly indexed: false;
    }, {
        readonly name: "expiration";
        readonly internalType: "uint48";
        readonly type: "uint48";
        readonly indexed: false;
    }, {
        readonly name: "nonce";
        readonly internalType: "uint48";
        readonly type: "uint48";
        readonly indexed: false;
    }];
    readonly name: "Permit";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "owner";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "word";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }, {
        readonly name: "mask";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }];
    readonly name: "UnorderedNonceInvalidation";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "deadline";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "AllowanceExpired";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ExcessiveInvalidation";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "amount";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "InsufficientAllowance";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "maxAmount";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "InvalidAmount";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "LengthMismatch";
}];
/**
 * - [__View Contract on Base Basescan__](https://basescan.org/address/0x000000000022D473030F116dDEE9F6B43aC78BA3)
 * - [__View Contract on Base Sepolia Basescan__](https://sepolia.basescan.org/address/0x000000000022D473030F116dDEE9F6B43aC78BA3)
 */
export declare const permit2Address: {
    readonly 8453: "0x000000000022D473030F116dDEE9F6B43aC78BA3";
    readonly 84532: "0x000000000022D473030F116dDEE9F6B43aC78BA3";
};
/**
 * - [__View Contract on Base Basescan__](https://basescan.org/address/0x000000000022D473030F116dDEE9F6B43aC78BA3)
 * - [__View Contract on Base Sepolia Basescan__](https://sepolia.basescan.org/address/0x000000000022D473030F116dDEE9F6B43aC78BA3)
 */
export declare const permit2Config: {
    readonly address: {
        readonly 8453: "0x000000000022D473030F116dDEE9F6B43aC78BA3";
        readonly 84532: "0x000000000022D473030F116dDEE9F6B43aC78BA3";
    };
    readonly abi: readonly [{
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "DOMAIN_SEPARATOR";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "user";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "token";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "spender";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "allowance";
        readonly outputs: readonly [{
            readonly name: "amount";
            readonly internalType: "uint160";
            readonly type: "uint160";
        }, {
            readonly name: "expiration";
            readonly internalType: "uint48";
            readonly type: "uint48";
        }, {
            readonly name: "nonce";
            readonly internalType: "uint48";
            readonly type: "uint48";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "token";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "spender";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "amount";
            readonly internalType: "uint160";
            readonly type: "uint160";
        }, {
            readonly name: "expiration";
            readonly internalType: "uint48";
            readonly type: "uint48";
        }];
        readonly name: "approve";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "token";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "spender";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "newNonce";
            readonly internalType: "uint48";
            readonly type: "uint48";
        }];
        readonly name: "invalidateNonces";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "wordPos";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "mask";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "invalidateUnorderedNonces";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "approvals";
            readonly internalType: "struct IAllowanceTransfer.TokenSpenderPair[]";
            readonly type: "tuple[]";
            readonly components: readonly [{
                readonly name: "token";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "spender";
                readonly internalType: "address";
                readonly type: "address";
            }];
        }];
        readonly name: "lockdown";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "nonceBitmap";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "owner";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "permitBatch";
            readonly internalType: "struct IAllowanceTransfer.PermitBatch";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "details";
                readonly internalType: "struct IAllowanceTransfer.PermitDetails[]";
                readonly type: "tuple[]";
                readonly components: readonly [{
                    readonly name: "token";
                    readonly internalType: "address";
                    readonly type: "address";
                }, {
                    readonly name: "amount";
                    readonly internalType: "uint160";
                    readonly type: "uint160";
                }, {
                    readonly name: "expiration";
                    readonly internalType: "uint48";
                    readonly type: "uint48";
                }, {
                    readonly name: "nonce";
                    readonly internalType: "uint48";
                    readonly type: "uint48";
                }];
            }, {
                readonly name: "spender";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "sigDeadline";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }];
        }, {
            readonly name: "signature";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "permit";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "owner";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "permitSingle";
            readonly internalType: "struct IAllowanceTransfer.PermitSingle";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "details";
                readonly internalType: "struct IAllowanceTransfer.PermitDetails";
                readonly type: "tuple";
                readonly components: readonly [{
                    readonly name: "token";
                    readonly internalType: "address";
                    readonly type: "address";
                }, {
                    readonly name: "amount";
                    readonly internalType: "uint160";
                    readonly type: "uint160";
                }, {
                    readonly name: "expiration";
                    readonly internalType: "uint48";
                    readonly type: "uint48";
                }, {
                    readonly name: "nonce";
                    readonly internalType: "uint48";
                    readonly type: "uint48";
                }];
            }, {
                readonly name: "spender";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "sigDeadline";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }];
        }, {
            readonly name: "signature";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "permit";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "permit";
            readonly internalType: "struct ISignatureTransfer.PermitTransferFrom";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "permitted";
                readonly internalType: "struct ISignatureTransfer.TokenPermissions";
                readonly type: "tuple";
                readonly components: readonly [{
                    readonly name: "token";
                    readonly internalType: "address";
                    readonly type: "address";
                }, {
                    readonly name: "amount";
                    readonly internalType: "uint256";
                    readonly type: "uint256";
                }];
            }, {
                readonly name: "nonce";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "deadline";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }];
        }, {
            readonly name: "transferDetails";
            readonly internalType: "struct ISignatureTransfer.SignatureTransferDetails";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "to";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "requestedAmount";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }];
        }, {
            readonly name: "owner";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "signature";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "permitTransferFrom";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "permit";
            readonly internalType: "struct ISignatureTransfer.PermitBatchTransferFrom";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "permitted";
                readonly internalType: "struct ISignatureTransfer.TokenPermissions[]";
                readonly type: "tuple[]";
                readonly components: readonly [{
                    readonly name: "token";
                    readonly internalType: "address";
                    readonly type: "address";
                }, {
                    readonly name: "amount";
                    readonly internalType: "uint256";
                    readonly type: "uint256";
                }];
            }, {
                readonly name: "nonce";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "deadline";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }];
        }, {
            readonly name: "transferDetails";
            readonly internalType: "struct ISignatureTransfer.SignatureTransferDetails[]";
            readonly type: "tuple[]";
            readonly components: readonly [{
                readonly name: "to";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "requestedAmount";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }];
        }, {
            readonly name: "owner";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "signature";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "permitTransferFrom";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "permit";
            readonly internalType: "struct ISignatureTransfer.PermitTransferFrom";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "permitted";
                readonly internalType: "struct ISignatureTransfer.TokenPermissions";
                readonly type: "tuple";
                readonly components: readonly [{
                    readonly name: "token";
                    readonly internalType: "address";
                    readonly type: "address";
                }, {
                    readonly name: "amount";
                    readonly internalType: "uint256";
                    readonly type: "uint256";
                }];
            }, {
                readonly name: "nonce";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "deadline";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }];
        }, {
            readonly name: "transferDetails";
            readonly internalType: "struct ISignatureTransfer.SignatureTransferDetails";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "to";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "requestedAmount";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }];
        }, {
            readonly name: "owner";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "witness";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }, {
            readonly name: "witnessTypeString";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "signature";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "permitWitnessTransferFrom";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "permit";
            readonly internalType: "struct ISignatureTransfer.PermitBatchTransferFrom";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "permitted";
                readonly internalType: "struct ISignatureTransfer.TokenPermissions[]";
                readonly type: "tuple[]";
                readonly components: readonly [{
                    readonly name: "token";
                    readonly internalType: "address";
                    readonly type: "address";
                }, {
                    readonly name: "amount";
                    readonly internalType: "uint256";
                    readonly type: "uint256";
                }];
            }, {
                readonly name: "nonce";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "deadline";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }];
        }, {
            readonly name: "transferDetails";
            readonly internalType: "struct ISignatureTransfer.SignatureTransferDetails[]";
            readonly type: "tuple[]";
            readonly components: readonly [{
                readonly name: "to";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "requestedAmount";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }];
        }, {
            readonly name: "owner";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "witness";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }, {
            readonly name: "witnessTypeString";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "signature";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "permitWitnessTransferFrom";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "transferDetails";
            readonly internalType: "struct IAllowanceTransfer.AllowanceTransferDetails[]";
            readonly type: "tuple[]";
            readonly components: readonly [{
                readonly name: "from";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "to";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "amount";
                readonly internalType: "uint160";
                readonly type: "uint160";
            }, {
                readonly name: "token";
                readonly internalType: "address";
                readonly type: "address";
            }];
        }];
        readonly name: "transferFrom";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "from";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "to";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "amount";
            readonly internalType: "uint160";
            readonly type: "uint160";
        }, {
            readonly name: "token";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "transferFrom";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "owner";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "token";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "spender";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "amount";
            readonly internalType: "uint160";
            readonly type: "uint160";
            readonly indexed: false;
        }, {
            readonly name: "expiration";
            readonly internalType: "uint48";
            readonly type: "uint48";
            readonly indexed: false;
        }];
        readonly name: "Approval";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "owner";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "token";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }, {
            readonly name: "spender";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }];
        readonly name: "Lockdown";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "owner";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "token";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "spender";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "newNonce";
            readonly internalType: "uint48";
            readonly type: "uint48";
            readonly indexed: false;
        }, {
            readonly name: "oldNonce";
            readonly internalType: "uint48";
            readonly type: "uint48";
            readonly indexed: false;
        }];
        readonly name: "NonceInvalidation";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "owner";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "token";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "spender";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "amount";
            readonly internalType: "uint160";
            readonly type: "uint160";
            readonly indexed: false;
        }, {
            readonly name: "expiration";
            readonly internalType: "uint48";
            readonly type: "uint48";
            readonly indexed: false;
        }, {
            readonly name: "nonce";
            readonly internalType: "uint48";
            readonly type: "uint48";
            readonly indexed: false;
        }];
        readonly name: "Permit";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "owner";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "word";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: false;
        }, {
            readonly name: "mask";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: false;
        }];
        readonly name: "UnorderedNonceInvalidation";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "deadline";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "AllowanceExpired";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ExcessiveInvalidation";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "amount";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "InsufficientAllowance";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "maxAmount";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "InvalidAmount";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "LengthMismatch";
    }];
};
export declare const poolConfigEncodingABI: readonly [{
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "version";
        readonly internalType: "uint8";
        readonly type: "uint8";
    }, {
        readonly name: "currency";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "tickLower";
        readonly internalType: "int24[]";
        readonly type: "int24[]";
    }, {
        readonly name: "tickUpper";
        readonly internalType: "int24[]";
        readonly type: "int24[]";
    }, {
        readonly name: "numDiscoveryPositions";
        readonly internalType: "uint16[]";
        readonly type: "uint16[]";
    }, {
        readonly name: "maxDiscoverySupplyShare";
        readonly internalType: "uint256[]";
        readonly type: "uint256[]";
    }];
    readonly name: "encodeMultiCurvePoolConfig";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly stateMutability: "pure";
}];
/**
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x7777777F279eba3d3Ad8F4E708545291A6fDBA8B)
 * - [__View Contract on Op Mainnet Optimism Explorer__](https://optimistic.etherscan.io/address/0x7777777F279eba3d3Ad8F4E708545291A6fDBA8B)
 * - [__View Contract on Zora Goerli Testnet Explorer__](https://testnet.explorer.zora.energy/address/0x7777777F279eba3d3Ad8F4E708545291A6fDBA8B)
 * - [__View Contract on Base Basescan__](https://basescan.org/address/0x7777777F279eba3d3Ad8F4E708545291A6fDBA8B)
 * - [__View Contract on Arbitrum One Arbiscan__](https://arbiscan.io/address/0x7777777F279eba3d3Ad8F4E708545291A6fDBA8B)
 * - [__View Contract on Blast Blastscan__](https://blastscan.io/address/0x7777777F279eba3d3Ad8F4E708545291A6fDBA8B)
 * - [__View Contract on Base Sepolia Basescan__](https://sepolia.basescan.org/address/0x7777777F279eba3d3Ad8F4E708545291A6fDBA8B)
 * - [__View Contract on Arbitrum Sepolia Arbiscan__](https://sepolia.arbiscan.io/address/0x7777777F279eba3d3Ad8F4E708545291A6fDBA8B)
 * - [__View Contract on Zora Explorer__](https://explorer.zora.energy/address/0x7777777F279eba3d3Ad8F4E708545291A6fDBA8B)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x7777777F279eba3d3Ad8F4E708545291A6fDBA8B)
 * - [__View Contract on Blast Sepolia Blastscan__](https://sepolia.blastscan.io/address/0x7777777F279eba3d3Ad8F4E708545291A6fDBA8B)
 * - [__View Contract on Zora Sepolia Zora Sepolia Explorer__](https://sepolia.explorer.zora.energy//address/0x7777777F279eba3d3Ad8F4E708545291A6fDBA8B)
 */
export declare const protocolRewardsABI: readonly [{
    readonly type: "constructor";
    readonly inputs: readonly [];
    readonly stateMutability: "payable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "WITHDRAW_TYPEHASH";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "balanceOf";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "to";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "reason";
        readonly internalType: "bytes4";
        readonly type: "bytes4";
    }, {
        readonly name: "comment";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly name: "deposit";
    readonly outputs: readonly [];
    readonly stateMutability: "payable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "recipients";
        readonly internalType: "address[]";
        readonly type: "address[]";
    }, {
        readonly name: "amounts";
        readonly internalType: "uint256[]";
        readonly type: "uint256[]";
    }, {
        readonly name: "reasons";
        readonly internalType: "bytes4[]";
        readonly type: "bytes4[]";
    }, {
        readonly name: "comment";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly name: "depositBatch";
    readonly outputs: readonly [];
    readonly stateMutability: "payable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "creator";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "creatorReward";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "createReferral";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "createReferralReward";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "mintReferral";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "mintReferralReward";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "firstMinter";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "firstMinterReward";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "zora";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "zoraReward";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "depositRewards";
    readonly outputs: readonly [];
    readonly stateMutability: "payable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "eip712Domain";
    readonly outputs: readonly [{
        readonly name: "fields";
        readonly internalType: "bytes1";
        readonly type: "bytes1";
    }, {
        readonly name: "name";
        readonly internalType: "string";
        readonly type: "string";
    }, {
        readonly name: "version";
        readonly internalType: "string";
        readonly type: "string";
    }, {
        readonly name: "chainId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "verifyingContract";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "salt";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }, {
        readonly name: "extensions";
        readonly internalType: "uint256[]";
        readonly type: "uint256[]";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "nonces";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "totalSupply";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "to";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "amount";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "withdraw";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "to";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "amount";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "withdrawFor";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "from";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "to";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "amount";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "deadline";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "v";
        readonly internalType: "uint8";
        readonly type: "uint8";
    }, {
        readonly name: "r";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }, {
        readonly name: "s";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly name: "withdrawWithSig";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "from";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "to";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "reason";
        readonly internalType: "bytes4";
        readonly type: "bytes4";
        readonly indexed: true;
    }, {
        readonly name: "amount";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }, {
        readonly name: "comment";
        readonly internalType: "string";
        readonly type: "string";
        readonly indexed: false;
    }];
    readonly name: "Deposit";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [];
    readonly name: "EIP712DomainChanged";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "creator";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "createReferral";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "mintReferral";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "firstMinter";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }, {
        readonly name: "zora";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }, {
        readonly name: "from";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }, {
        readonly name: "creatorReward";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }, {
        readonly name: "createReferralReward";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }, {
        readonly name: "mintReferralReward";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }, {
        readonly name: "firstMinterReward";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }, {
        readonly name: "zoraReward";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }];
    readonly name: "RewardsDeposit";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "from";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "to";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "amount";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }];
    readonly name: "Withdraw";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ADDRESS_ZERO";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ARRAY_LENGTH_MISMATCH";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "INVALID_DEPOSIT";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "INVALID_SIGNATURE";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "INVALID_WITHDRAW";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "InvalidShortString";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "SIGNATURE_DEADLINE_EXPIRED";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "str";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly name: "StringTooLong";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "TRANSFER_FAILED";
}];
/**
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x7777777F279eba3d3Ad8F4E708545291A6fDBA8B)
 * - [__View Contract on Op Mainnet Optimism Explorer__](https://optimistic.etherscan.io/address/0x7777777F279eba3d3Ad8F4E708545291A6fDBA8B)
 * - [__View Contract on Zora Goerli Testnet Explorer__](https://testnet.explorer.zora.energy/address/0x7777777F279eba3d3Ad8F4E708545291A6fDBA8B)
 * - [__View Contract on Base Basescan__](https://basescan.org/address/0x7777777F279eba3d3Ad8F4E708545291A6fDBA8B)
 * - [__View Contract on Arbitrum One Arbiscan__](https://arbiscan.io/address/0x7777777F279eba3d3Ad8F4E708545291A6fDBA8B)
 * - [__View Contract on Blast Blastscan__](https://blastscan.io/address/0x7777777F279eba3d3Ad8F4E708545291A6fDBA8B)
 * - [__View Contract on Base Sepolia Basescan__](https://sepolia.basescan.org/address/0x7777777F279eba3d3Ad8F4E708545291A6fDBA8B)
 * - [__View Contract on Arbitrum Sepolia Arbiscan__](https://sepolia.arbiscan.io/address/0x7777777F279eba3d3Ad8F4E708545291A6fDBA8B)
 * - [__View Contract on Zora Explorer__](https://explorer.zora.energy/address/0x7777777F279eba3d3Ad8F4E708545291A6fDBA8B)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x7777777F279eba3d3Ad8F4E708545291A6fDBA8B)
 * - [__View Contract on Blast Sepolia Blastscan__](https://sepolia.blastscan.io/address/0x7777777F279eba3d3Ad8F4E708545291A6fDBA8B)
 * - [__View Contract on Zora Sepolia Zora Sepolia Explorer__](https://sepolia.explorer.zora.energy//address/0x7777777F279eba3d3Ad8F4E708545291A6fDBA8B)
 */
export declare const protocolRewardsAddress: {
    readonly 1: "0x7777777F279eba3d3Ad8F4E708545291A6fDBA8B";
    readonly 10: "0x7777777F279eba3d3Ad8F4E708545291A6fDBA8B";
    readonly 999: "0x7777777F279eba3d3Ad8F4E708545291A6fDBA8B";
    readonly 8453: "0x7777777F279eba3d3Ad8F4E708545291A6fDBA8B";
    readonly 42161: "0x7777777F279eba3d3Ad8F4E708545291A6fDBA8B";
    readonly 81457: "0x7777777F279eba3d3Ad8F4E708545291A6fDBA8B";
    readonly 84532: "0x7777777F279eba3d3Ad8F4E708545291A6fDBA8B";
    readonly 421614: "0x7777777F279eba3d3Ad8F4E708545291A6fDBA8B";
    readonly 7777777: "0x7777777F279eba3d3Ad8F4E708545291A6fDBA8B";
    readonly 11155111: "0x7777777F279eba3d3Ad8F4E708545291A6fDBA8B";
    readonly 168587773: "0x7777777F279eba3d3Ad8F4E708545291A6fDBA8B";
    readonly 999999999: "0x7777777F279eba3d3Ad8F4E708545291A6fDBA8B";
};
/**
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x7777777F279eba3d3Ad8F4E708545291A6fDBA8B)
 * - [__View Contract on Op Mainnet Optimism Explorer__](https://optimistic.etherscan.io/address/0x7777777F279eba3d3Ad8F4E708545291A6fDBA8B)
 * - [__View Contract on Zora Goerli Testnet Explorer__](https://testnet.explorer.zora.energy/address/0x7777777F279eba3d3Ad8F4E708545291A6fDBA8B)
 * - [__View Contract on Base Basescan__](https://basescan.org/address/0x7777777F279eba3d3Ad8F4E708545291A6fDBA8B)
 * - [__View Contract on Arbitrum One Arbiscan__](https://arbiscan.io/address/0x7777777F279eba3d3Ad8F4E708545291A6fDBA8B)
 * - [__View Contract on Blast Blastscan__](https://blastscan.io/address/0x7777777F279eba3d3Ad8F4E708545291A6fDBA8B)
 * - [__View Contract on Base Sepolia Basescan__](https://sepolia.basescan.org/address/0x7777777F279eba3d3Ad8F4E708545291A6fDBA8B)
 * - [__View Contract on Arbitrum Sepolia Arbiscan__](https://sepolia.arbiscan.io/address/0x7777777F279eba3d3Ad8F4E708545291A6fDBA8B)
 * - [__View Contract on Zora Explorer__](https://explorer.zora.energy/address/0x7777777F279eba3d3Ad8F4E708545291A6fDBA8B)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x7777777F279eba3d3Ad8F4E708545291A6fDBA8B)
 * - [__View Contract on Blast Sepolia Blastscan__](https://sepolia.blastscan.io/address/0x7777777F279eba3d3Ad8F4E708545291A6fDBA8B)
 * - [__View Contract on Zora Sepolia Zora Sepolia Explorer__](https://sepolia.explorer.zora.energy//address/0x7777777F279eba3d3Ad8F4E708545291A6fDBA8B)
 */
export declare const protocolRewardsConfig: {
    readonly address: {
        readonly 1: "0x7777777F279eba3d3Ad8F4E708545291A6fDBA8B";
        readonly 10: "0x7777777F279eba3d3Ad8F4E708545291A6fDBA8B";
        readonly 999: "0x7777777F279eba3d3Ad8F4E708545291A6fDBA8B";
        readonly 8453: "0x7777777F279eba3d3Ad8F4E708545291A6fDBA8B";
        readonly 42161: "0x7777777F279eba3d3Ad8F4E708545291A6fDBA8B";
        readonly 81457: "0x7777777F279eba3d3Ad8F4E708545291A6fDBA8B";
        readonly 84532: "0x7777777F279eba3d3Ad8F4E708545291A6fDBA8B";
        readonly 421614: "0x7777777F279eba3d3Ad8F4E708545291A6fDBA8B";
        readonly 7777777: "0x7777777F279eba3d3Ad8F4E708545291A6fDBA8B";
        readonly 11155111: "0x7777777F279eba3d3Ad8F4E708545291A6fDBA8B";
        readonly 168587773: "0x7777777F279eba3d3Ad8F4E708545291A6fDBA8B";
        readonly 999999999: "0x7777777F279eba3d3Ad8F4E708545291A6fDBA8B";
    };
    readonly abi: readonly [{
        readonly type: "constructor";
        readonly inputs: readonly [];
        readonly stateMutability: "payable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "WITHDRAW_TYPEHASH";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "balanceOf";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "to";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "reason";
            readonly internalType: "bytes4";
            readonly type: "bytes4";
        }, {
            readonly name: "comment";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly name: "deposit";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "recipients";
            readonly internalType: "address[]";
            readonly type: "address[]";
        }, {
            readonly name: "amounts";
            readonly internalType: "uint256[]";
            readonly type: "uint256[]";
        }, {
            readonly name: "reasons";
            readonly internalType: "bytes4[]";
            readonly type: "bytes4[]";
        }, {
            readonly name: "comment";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly name: "depositBatch";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "creator";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "creatorReward";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "createReferral";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "createReferralReward";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "mintReferral";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "mintReferralReward";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "firstMinter";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "firstMinterReward";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "zora";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "zoraReward";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "depositRewards";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "eip712Domain";
        readonly outputs: readonly [{
            readonly name: "fields";
            readonly internalType: "bytes1";
            readonly type: "bytes1";
        }, {
            readonly name: "name";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "version";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "chainId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "verifyingContract";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "salt";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }, {
            readonly name: "extensions";
            readonly internalType: "uint256[]";
            readonly type: "uint256[]";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "nonces";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "totalSupply";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "to";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "amount";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "withdraw";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "to";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "amount";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "withdrawFor";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "from";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "to";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "amount";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "deadline";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "v";
            readonly internalType: "uint8";
            readonly type: "uint8";
        }, {
            readonly name: "r";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }, {
            readonly name: "s";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly name: "withdrawWithSig";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "from";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "to";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "reason";
            readonly internalType: "bytes4";
            readonly type: "bytes4";
            readonly indexed: true;
        }, {
            readonly name: "amount";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: false;
        }, {
            readonly name: "comment";
            readonly internalType: "string";
            readonly type: "string";
            readonly indexed: false;
        }];
        readonly name: "Deposit";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [];
        readonly name: "EIP712DomainChanged";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "creator";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "createReferral";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "mintReferral";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "firstMinter";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }, {
            readonly name: "zora";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }, {
            readonly name: "from";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }, {
            readonly name: "creatorReward";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: false;
        }, {
            readonly name: "createReferralReward";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: false;
        }, {
            readonly name: "mintReferralReward";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: false;
        }, {
            readonly name: "firstMinterReward";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: false;
        }, {
            readonly name: "zoraReward";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: false;
        }];
        readonly name: "RewardsDeposit";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "from";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "to";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "amount";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: false;
        }];
        readonly name: "Withdraw";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ADDRESS_ZERO";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ARRAY_LENGTH_MISMATCH";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "INVALID_DEPOSIT";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "INVALID_SIGNATURE";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "INVALID_WITHDRAW";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "InvalidShortString";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "SIGNATURE_DEADLINE_EXPIRED";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "str";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly name: "StringTooLong";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "TRANSFER_FAILED";
    }];
};
/**
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x777777EDF27Ac61671e3D5718b10bf6a8802f9f1)
 * - [__View Contract on Op Mainnet Optimism Explorer__](https://optimistic.etherscan.io/address/0x777777EDF27Ac61671e3D5718b10bf6a8802f9f1)
 * - [__View Contract on Base Basescan__](https://basescan.org/address/0x777777EDF27Ac61671e3D5718b10bf6a8802f9f1)
 * - [__View Contract on Arbitrum One Arbiscan__](https://arbiscan.io/address/0x777777EDF27Ac61671e3D5718b10bf6a8802f9f1)
 * - [__View Contract on Blast Blastscan__](https://blastscan.io/address/0x777777EDF27Ac61671e3D5718b10bf6a8802f9f1)
 * - [__View Contract on Base Sepolia Basescan__](https://sepolia.basescan.org/address/0x777777EDF27Ac61671e3D5718b10bf6a8802f9f1)
 * - [__View Contract on Arbitrum Sepolia Arbiscan__](https://sepolia.arbiscan.io/address/0x777777794a6e310F2A55da6f157b16ED28Fa5D91)
 * - [__View Contract on Zora Explorer__](https://explorer.zora.energy/address/0x777777EDF27Ac61671e3D5718b10bf6a8802f9f1)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x777777EDF27Ac61671e3D5718b10bf6a8802f9f1)
 * - [__View Contract on Zora Sepolia Zora Sepolia Explorer__](https://sepolia.explorer.zora.energy//address/0x777777EDF27Ac61671e3D5718b10bf6a8802f9f1)
 */
export declare const secondarySwapABI: readonly [{
    readonly type: "receive";
    readonly stateMutability: "payable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "WETH";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "contract IWETH";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "erc20zAddress";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "num1155ToBuy";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "recipient";
        readonly internalType: "address payable";
        readonly type: "address";
    }, {
        readonly name: "excessRefundRecipient";
        readonly internalType: "address payable";
        readonly type: "address";
    }, {
        readonly name: "maxEthToSpend";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "sqrtPriceLimitX96";
        readonly internalType: "uint160";
        readonly type: "uint160";
    }];
    readonly name: "buy1155";
    readonly outputs: readonly [];
    readonly stateMutability: "payable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "weth_";
        readonly internalType: "contract IWETH";
        readonly type: "address";
    }, {
        readonly name: "swapRouter_";
        readonly internalType: "contract ISwapRouter";
        readonly type: "address";
    }, {
        readonly name: "uniswapFee_";
        readonly internalType: "uint24";
        readonly type: "uint24";
    }, {
        readonly name: "zoraTimedSaleStrategy_";
        readonly internalType: "contract IZoraTimedSaleStrategy";
        readonly type: "address";
    }];
    readonly name: "initialize";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "";
        readonly internalType: "uint256[]";
        readonly type: "uint256[]";
    }, {
        readonly name: "";
        readonly internalType: "uint256[]";
        readonly type: "uint256[]";
    }, {
        readonly name: "";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "onERC1155BatchReceived";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes4";
        readonly type: "bytes4";
    }];
    readonly stateMutability: "pure";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "id";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "value";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "data";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "onERC1155Received";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes4";
        readonly type: "bytes4";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "erc20zAddress";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "num1155ToSell";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "recipient";
        readonly internalType: "address payable";
        readonly type: "address";
    }, {
        readonly name: "minEthToAcquire";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "sqrtPriceLimitX96";
        readonly internalType: "uint160";
        readonly type: "uint160";
    }];
    readonly name: "sell1155";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "interfaceId";
        readonly internalType: "bytes4";
        readonly type: "bytes4";
    }];
    readonly name: "supportsInterface";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "swapRouter";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "contract ISwapRouter";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "uniswapFee";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint24";
        readonly type: "uint24";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "zoraTimedSaleStrategy";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "contract IZoraTimedSaleStrategy";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "msgSender";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "recipient";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "erc20zAddress";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "amountETHSold";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }, {
        readonly name: "num1155Purchased";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }];
    readonly name: "SecondaryBuy";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "sender";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "collection";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: true;
    }, {
        readonly name: "quantity";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }, {
        readonly name: "comment";
        readonly internalType: "string";
        readonly type: "string";
        readonly indexed: false;
    }, {
        readonly name: "secondaryType";
        readonly internalType: "enum ISecondarySwap.SecondaryType";
        readonly type: "uint8";
        readonly indexed: false;
    }];
    readonly name: "SecondaryComment";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "msgSender";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "recipient";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "erc20zAddress";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "amountETHPurchased";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }, {
        readonly name: "num1155Sold";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }];
    readonly name: "SecondarySell";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "account";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "AddressInsufficientBalance";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "AddressZero";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "AlreadyInitialized";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ERC20ZEquivalentAmountNotConverted";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ERC20ZMinimumAmountNotReceived";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "FailedInnerCall";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "InvalidRecipient";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "NoETHSent";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "NotSupported";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "OnlyWETH";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ReentrancyGuardReentrantCall";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "SaleNotSet";
}];
/**
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x777777EDF27Ac61671e3D5718b10bf6a8802f9f1)
 * - [__View Contract on Op Mainnet Optimism Explorer__](https://optimistic.etherscan.io/address/0x777777EDF27Ac61671e3D5718b10bf6a8802f9f1)
 * - [__View Contract on Base Basescan__](https://basescan.org/address/0x777777EDF27Ac61671e3D5718b10bf6a8802f9f1)
 * - [__View Contract on Arbitrum One Arbiscan__](https://arbiscan.io/address/0x777777EDF27Ac61671e3D5718b10bf6a8802f9f1)
 * - [__View Contract on Blast Blastscan__](https://blastscan.io/address/0x777777EDF27Ac61671e3D5718b10bf6a8802f9f1)
 * - [__View Contract on Base Sepolia Basescan__](https://sepolia.basescan.org/address/0x777777EDF27Ac61671e3D5718b10bf6a8802f9f1)
 * - [__View Contract on Arbitrum Sepolia Arbiscan__](https://sepolia.arbiscan.io/address/0x777777794a6e310F2A55da6f157b16ED28Fa5D91)
 * - [__View Contract on Zora Explorer__](https://explorer.zora.energy/address/0x777777EDF27Ac61671e3D5718b10bf6a8802f9f1)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x777777EDF27Ac61671e3D5718b10bf6a8802f9f1)
 * - [__View Contract on Zora Sepolia Zora Sepolia Explorer__](https://sepolia.explorer.zora.energy//address/0x777777EDF27Ac61671e3D5718b10bf6a8802f9f1)
 */
export declare const secondarySwapAddress: {
    readonly 1: "0x777777EDF27Ac61671e3D5718b10bf6a8802f9f1";
    readonly 10: "0x777777EDF27Ac61671e3D5718b10bf6a8802f9f1";
    readonly 8453: "0x777777EDF27Ac61671e3D5718b10bf6a8802f9f1";
    readonly 42161: "0x777777EDF27Ac61671e3D5718b10bf6a8802f9f1";
    readonly 81457: "0x777777EDF27Ac61671e3D5718b10bf6a8802f9f1";
    readonly 84532: "0x777777EDF27Ac61671e3D5718b10bf6a8802f9f1";
    readonly 421614: "0x777777794a6e310F2A55da6f157b16ED28Fa5D91";
    readonly 7777777: "0x777777EDF27Ac61671e3D5718b10bf6a8802f9f1";
    readonly 11155111: "0x777777EDF27Ac61671e3D5718b10bf6a8802f9f1";
    readonly 999999999: "0x777777EDF27Ac61671e3D5718b10bf6a8802f9f1";
};
/**
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x777777EDF27Ac61671e3D5718b10bf6a8802f9f1)
 * - [__View Contract on Op Mainnet Optimism Explorer__](https://optimistic.etherscan.io/address/0x777777EDF27Ac61671e3D5718b10bf6a8802f9f1)
 * - [__View Contract on Base Basescan__](https://basescan.org/address/0x777777EDF27Ac61671e3D5718b10bf6a8802f9f1)
 * - [__View Contract on Arbitrum One Arbiscan__](https://arbiscan.io/address/0x777777EDF27Ac61671e3D5718b10bf6a8802f9f1)
 * - [__View Contract on Blast Blastscan__](https://blastscan.io/address/0x777777EDF27Ac61671e3D5718b10bf6a8802f9f1)
 * - [__View Contract on Base Sepolia Basescan__](https://sepolia.basescan.org/address/0x777777EDF27Ac61671e3D5718b10bf6a8802f9f1)
 * - [__View Contract on Arbitrum Sepolia Arbiscan__](https://sepolia.arbiscan.io/address/0x777777794a6e310F2A55da6f157b16ED28Fa5D91)
 * - [__View Contract on Zora Explorer__](https://explorer.zora.energy/address/0x777777EDF27Ac61671e3D5718b10bf6a8802f9f1)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x777777EDF27Ac61671e3D5718b10bf6a8802f9f1)
 * - [__View Contract on Zora Sepolia Zora Sepolia Explorer__](https://sepolia.explorer.zora.energy//address/0x777777EDF27Ac61671e3D5718b10bf6a8802f9f1)
 */
export declare const secondarySwapConfig: {
    readonly address: {
        readonly 1: "0x777777EDF27Ac61671e3D5718b10bf6a8802f9f1";
        readonly 10: "0x777777EDF27Ac61671e3D5718b10bf6a8802f9f1";
        readonly 8453: "0x777777EDF27Ac61671e3D5718b10bf6a8802f9f1";
        readonly 42161: "0x777777EDF27Ac61671e3D5718b10bf6a8802f9f1";
        readonly 81457: "0x777777EDF27Ac61671e3D5718b10bf6a8802f9f1";
        readonly 84532: "0x777777EDF27Ac61671e3D5718b10bf6a8802f9f1";
        readonly 421614: "0x777777794a6e310F2A55da6f157b16ED28Fa5D91";
        readonly 7777777: "0x777777EDF27Ac61671e3D5718b10bf6a8802f9f1";
        readonly 11155111: "0x777777EDF27Ac61671e3D5718b10bf6a8802f9f1";
        readonly 999999999: "0x777777EDF27Ac61671e3D5718b10bf6a8802f9f1";
    };
    readonly abi: readonly [{
        readonly type: "receive";
        readonly stateMutability: "payable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "WETH";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "contract IWETH";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "erc20zAddress";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "num1155ToBuy";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "recipient";
            readonly internalType: "address payable";
            readonly type: "address";
        }, {
            readonly name: "excessRefundRecipient";
            readonly internalType: "address payable";
            readonly type: "address";
        }, {
            readonly name: "maxEthToSpend";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "sqrtPriceLimitX96";
            readonly internalType: "uint160";
            readonly type: "uint160";
        }];
        readonly name: "buy1155";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "weth_";
            readonly internalType: "contract IWETH";
            readonly type: "address";
        }, {
            readonly name: "swapRouter_";
            readonly internalType: "contract ISwapRouter";
            readonly type: "address";
        }, {
            readonly name: "uniswapFee_";
            readonly internalType: "uint24";
            readonly type: "uint24";
        }, {
            readonly name: "zoraTimedSaleStrategy_";
            readonly internalType: "contract IZoraTimedSaleStrategy";
            readonly type: "address";
        }];
        readonly name: "initialize";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "";
            readonly internalType: "uint256[]";
            readonly type: "uint256[]";
        }, {
            readonly name: "";
            readonly internalType: "uint256[]";
            readonly type: "uint256[]";
        }, {
            readonly name: "";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "onERC1155BatchReceived";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes4";
            readonly type: "bytes4";
        }];
        readonly stateMutability: "pure";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "id";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "value";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "data";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "onERC1155Received";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes4";
            readonly type: "bytes4";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "erc20zAddress";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "num1155ToSell";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "recipient";
            readonly internalType: "address payable";
            readonly type: "address";
        }, {
            readonly name: "minEthToAcquire";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "sqrtPriceLimitX96";
            readonly internalType: "uint160";
            readonly type: "uint160";
        }];
        readonly name: "sell1155";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "interfaceId";
            readonly internalType: "bytes4";
            readonly type: "bytes4";
        }];
        readonly name: "supportsInterface";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "swapRouter";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "contract ISwapRouter";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "uniswapFee";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint24";
            readonly type: "uint24";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "zoraTimedSaleStrategy";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "contract IZoraTimedSaleStrategy";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "msgSender";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "recipient";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "erc20zAddress";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "amountETHSold";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: false;
        }, {
            readonly name: "num1155Purchased";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: false;
        }];
        readonly name: "SecondaryBuy";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "sender";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "collection";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: true;
        }, {
            readonly name: "quantity";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: false;
        }, {
            readonly name: "comment";
            readonly internalType: "string";
            readonly type: "string";
            readonly indexed: false;
        }, {
            readonly name: "secondaryType";
            readonly internalType: "enum ISecondarySwap.SecondaryType";
            readonly type: "uint8";
            readonly indexed: false;
        }];
        readonly name: "SecondaryComment";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "msgSender";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "recipient";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "erc20zAddress";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "amountETHPurchased";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: false;
        }, {
            readonly name: "num1155Sold";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: false;
        }];
        readonly name: "SecondarySell";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "account";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "AddressInsufficientBalance";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "AddressZero";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "AlreadyInitialized";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ERC20ZEquivalentAmountNotConverted";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ERC20ZMinimumAmountNotReceived";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "FailedInnerCall";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "InvalidRecipient";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "NoETHSent";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "NotSupported";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "OnlyWETH";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ReentrancyGuardReentrantCall";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "SaleNotSet";
    }];
};
/**
 * - [__View Contract on Op Mainnet Optimism Explorer__](https://optimistic.etherscan.io/address/0x35ca784918bf11692708c1D530691704AAcEA95E)
 * - [__View Contract on Base Basescan__](https://basescan.org/address/0x6958A8866A40118e2CC21ab4752353835321b5e6)
 * - [__View Contract on Arbitrum One Arbiscan__](https://arbiscan.io/address/0x2fBdBc34B6015e7b40638179Aa05a2D2267452c7)
 * - [__View Contract on Blast Blastscan__](https://blastscan.io/address/0x786F0f6aE196715Cd6d65693f06DA57426ac8463)
 * - [__View Contract on Base Sepolia Basescan__](https://sepolia.basescan.org/address/0x23150f60E233F519A01C735C29c1591f9E8353dE)
 * - [__View Contract on Zora Explorer__](https://explorer.zora.energy/address/0x362Ef86acAD2FAa66A28Ee8d1F5a835ac0BBD11d)
 * - [__View Contract on Zora Sepolia Zora Sepolia Explorer__](https://sepolia.explorer.zora.energy//address/0x3A98313fB00918a81d98f9986aED089365428293)
 */
export declare const sponsoredSparksSpenderABI: readonly [{
    readonly type: "constructor";
    readonly inputs: readonly [{
        readonly name: "_zoraSparks1155";
        readonly internalType: "contract IZoraSparks1155";
        readonly type: "address";
    }, {
        readonly name: "fundsManager";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "defaultVerifiers";
        readonly internalType: "address[]";
        readonly type: "address[]";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "receive";
    readonly stateMutability: "payable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "NAME";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "SPONSORED_SPEND_TYPEHASH";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "SPONSORSHIP_TYPEHASH";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "VERSION";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "acceptOwnership";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "allowedVerifiers";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "contractName";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly stateMutability: "pure";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "contractVersion";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly stateMutability: "pure";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "eip712Domain";
    readonly outputs: readonly [{
        readonly name: "fields";
        readonly internalType: "bytes1";
        readonly type: "bytes1";
    }, {
        readonly name: "name";
        readonly internalType: "string";
        readonly type: "string";
    }, {
        readonly name: "version";
        readonly internalType: "string";
        readonly type: "string";
    }, {
        readonly name: "chainId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "verifyingContract";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "salt";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }, {
        readonly name: "extensions";
        readonly internalType: "uint256[]";
        readonly type: "uint256[]";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "fund";
    readonly outputs: readonly [];
    readonly stateMutability: "payable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "sponsorship";
        readonly internalType: "struct SponsoredMintBatch";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "verifier";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "from";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "destination";
            readonly internalType: "address payable";
            readonly type: "address";
        }, {
            readonly name: "data";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }, {
            readonly name: "expectedRedeemAmount";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "totalAmount";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "ids";
            readonly internalType: "uint256[]";
            readonly type: "uint256[]";
        }, {
            readonly name: "quantities";
            readonly internalType: "uint256[]";
            readonly type: "uint256[]";
        }, {
            readonly name: "nonce";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "deadline";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
    }];
    readonly name: "hashSponsoredMint";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "sponsoredSpend";
        readonly internalType: "struct SponsoredSpend";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "verifier";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "from";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "destination";
            readonly internalType: "address payable";
            readonly type: "address";
        }, {
            readonly name: "data";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }, {
            readonly name: "expectedInputAmount";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "totalAmount";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "nonce";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "deadline";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
    }];
    readonly name: "hashSponsoredSpend";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "from";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "ids";
        readonly internalType: "uint256[]";
        readonly type: "uint256[]";
    }, {
        readonly name: "values";
        readonly internalType: "uint256[]";
        readonly type: "uint256[]";
    }, {
        readonly name: "data";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "onERC1155BatchReceived";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes4";
        readonly type: "bytes4";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "from";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "id";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "value";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "data";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "onERC1155Received";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes4";
        readonly type: "bytes4";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "owner";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "pendingOwner";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "renounceOwnership";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "verifier";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "enabled";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly name: "setVerifierStatus";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "sponsoredSpend";
        readonly internalType: "struct SponsoredSpend";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "verifier";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "from";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "destination";
            readonly internalType: "address payable";
            readonly type: "address";
        }, {
            readonly name: "data";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }, {
            readonly name: "expectedInputAmount";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "totalAmount";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "nonce";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "deadline";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
    }, {
        readonly name: "signature";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "sponsoredExecute";
    readonly outputs: readonly [];
    readonly stateMutability: "payable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "newOwner";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "transferOwnership";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "usedNonces";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "amount";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "withdraw";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "sender";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "amount";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: true;
    }];
    readonly name: "ContractFunded";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [];
    readonly name: "EIP712DomainChanged";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "previousOwner";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "newOwner";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }];
    readonly name: "OwnershipTransferStarted";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "previousOwner";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "newOwner";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }];
    readonly name: "OwnershipTransferred";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "verifier";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "from";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "amountSpent";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }, {
        readonly name: "contractValue";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }];
    readonly name: "SentSponsoredCallFromMintBalances";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "verifier";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "enabled";
        readonly internalType: "bool";
        readonly type: "bool";
        readonly indexed: true;
    }];
    readonly name: "SetVerifierStatus";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "data";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "CallFailed";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "ERC20NotSupported";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "IdsMismatch";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "InvalidShortString";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "InvalidSignature";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "LengthMismatch";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "NoMoreFundsToSponsor";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "NonceUsed";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "NotExpectingReceive";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "NotZoraSparks1155";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "owner";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "OwnableInvalidOwner";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "account";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "OwnableUnauthorizedAccount";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "expectedRedeemAmount";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "transientReceivedAmount";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "RedeemAmountIsIncorrect";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "SenderNotAllowedInSignature";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "SignatureExpired";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "SingleTransferNotSupported";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "str";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly name: "StringTooLong";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "data";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "TransferFailed";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "UnknownAction";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "UnknownUserAction";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ValuesMismatch";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "verifier";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "VerifierNotAllowed";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "WithdrawFailed";
}];
/**
 * - [__View Contract on Op Mainnet Optimism Explorer__](https://optimistic.etherscan.io/address/0x35ca784918bf11692708c1D530691704AAcEA95E)
 * - [__View Contract on Base Basescan__](https://basescan.org/address/0x6958A8866A40118e2CC21ab4752353835321b5e6)
 * - [__View Contract on Arbitrum One Arbiscan__](https://arbiscan.io/address/0x2fBdBc34B6015e7b40638179Aa05a2D2267452c7)
 * - [__View Contract on Blast Blastscan__](https://blastscan.io/address/0x786F0f6aE196715Cd6d65693f06DA57426ac8463)
 * - [__View Contract on Base Sepolia Basescan__](https://sepolia.basescan.org/address/0x23150f60E233F519A01C735C29c1591f9E8353dE)
 * - [__View Contract on Zora Explorer__](https://explorer.zora.energy/address/0x362Ef86acAD2FAa66A28Ee8d1F5a835ac0BBD11d)
 * - [__View Contract on Zora Sepolia Zora Sepolia Explorer__](https://sepolia.explorer.zora.energy//address/0x3A98313fB00918a81d98f9986aED089365428293)
 */
export declare const sponsoredSparksSpenderAddress: {
    readonly 10: "0x35ca784918bf11692708c1D530691704AAcEA95E";
    readonly 8453: "0x6958A8866A40118e2CC21ab4752353835321b5e6";
    readonly 42161: "0x2fBdBc34B6015e7b40638179Aa05a2D2267452c7";
    readonly 81457: "0x786F0f6aE196715Cd6d65693f06DA57426ac8463";
    readonly 84532: "0x23150f60E233F519A01C735C29c1591f9E8353dE";
    readonly 7777777: "0x362Ef86acAD2FAa66A28Ee8d1F5a835ac0BBD11d";
    readonly 999999999: "0x3A98313fB00918a81d98f9986aED089365428293";
};
/**
 * - [__View Contract on Op Mainnet Optimism Explorer__](https://optimistic.etherscan.io/address/0x35ca784918bf11692708c1D530691704AAcEA95E)
 * - [__View Contract on Base Basescan__](https://basescan.org/address/0x6958A8866A40118e2CC21ab4752353835321b5e6)
 * - [__View Contract on Arbitrum One Arbiscan__](https://arbiscan.io/address/0x2fBdBc34B6015e7b40638179Aa05a2D2267452c7)
 * - [__View Contract on Blast Blastscan__](https://blastscan.io/address/0x786F0f6aE196715Cd6d65693f06DA57426ac8463)
 * - [__View Contract on Base Sepolia Basescan__](https://sepolia.basescan.org/address/0x23150f60E233F519A01C735C29c1591f9E8353dE)
 * - [__View Contract on Zora Explorer__](https://explorer.zora.energy/address/0x362Ef86acAD2FAa66A28Ee8d1F5a835ac0BBD11d)
 * - [__View Contract on Zora Sepolia Zora Sepolia Explorer__](https://sepolia.explorer.zora.energy//address/0x3A98313fB00918a81d98f9986aED089365428293)
 */
export declare const sponsoredSparksSpenderConfig: {
    readonly address: {
        readonly 10: "0x35ca784918bf11692708c1D530691704AAcEA95E";
        readonly 8453: "0x6958A8866A40118e2CC21ab4752353835321b5e6";
        readonly 42161: "0x2fBdBc34B6015e7b40638179Aa05a2D2267452c7";
        readonly 81457: "0x786F0f6aE196715Cd6d65693f06DA57426ac8463";
        readonly 84532: "0x23150f60E233F519A01C735C29c1591f9E8353dE";
        readonly 7777777: "0x362Ef86acAD2FAa66A28Ee8d1F5a835ac0BBD11d";
        readonly 999999999: "0x3A98313fB00918a81d98f9986aED089365428293";
    };
    readonly abi: readonly [{
        readonly type: "constructor";
        readonly inputs: readonly [{
            readonly name: "_zoraSparks1155";
            readonly internalType: "contract IZoraSparks1155";
            readonly type: "address";
        }, {
            readonly name: "fundsManager";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "defaultVerifiers";
            readonly internalType: "address[]";
            readonly type: "address[]";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "receive";
        readonly stateMutability: "payable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "NAME";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "SPONSORED_SPEND_TYPEHASH";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "SPONSORSHIP_TYPEHASH";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "VERSION";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "acceptOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "allowedVerifiers";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "contractName";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly stateMutability: "pure";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "contractVersion";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly stateMutability: "pure";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "eip712Domain";
        readonly outputs: readonly [{
            readonly name: "fields";
            readonly internalType: "bytes1";
            readonly type: "bytes1";
        }, {
            readonly name: "name";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "version";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "chainId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "verifyingContract";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "salt";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }, {
            readonly name: "extensions";
            readonly internalType: "uint256[]";
            readonly type: "uint256[]";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "fund";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "sponsorship";
            readonly internalType: "struct SponsoredMintBatch";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "verifier";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "from";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "destination";
                readonly internalType: "address payable";
                readonly type: "address";
            }, {
                readonly name: "data";
                readonly internalType: "bytes";
                readonly type: "bytes";
            }, {
                readonly name: "expectedRedeemAmount";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "totalAmount";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "ids";
                readonly internalType: "uint256[]";
                readonly type: "uint256[]";
            }, {
                readonly name: "quantities";
                readonly internalType: "uint256[]";
                readonly type: "uint256[]";
            }, {
                readonly name: "nonce";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "deadline";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }];
        }];
        readonly name: "hashSponsoredMint";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "sponsoredSpend";
            readonly internalType: "struct SponsoredSpend";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "verifier";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "from";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "destination";
                readonly internalType: "address payable";
                readonly type: "address";
            }, {
                readonly name: "data";
                readonly internalType: "bytes";
                readonly type: "bytes";
            }, {
                readonly name: "expectedInputAmount";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "totalAmount";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "nonce";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "deadline";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }];
        }];
        readonly name: "hashSponsoredSpend";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "from";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "ids";
            readonly internalType: "uint256[]";
            readonly type: "uint256[]";
        }, {
            readonly name: "values";
            readonly internalType: "uint256[]";
            readonly type: "uint256[]";
        }, {
            readonly name: "data";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "onERC1155BatchReceived";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes4";
            readonly type: "bytes4";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "from";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "id";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "value";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "data";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "onERC1155Received";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes4";
            readonly type: "bytes4";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "owner";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "pendingOwner";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "renounceOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "verifier";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "enabled";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly name: "setVerifierStatus";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "sponsoredSpend";
            readonly internalType: "struct SponsoredSpend";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "verifier";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "from";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "destination";
                readonly internalType: "address payable";
                readonly type: "address";
            }, {
                readonly name: "data";
                readonly internalType: "bytes";
                readonly type: "bytes";
            }, {
                readonly name: "expectedInputAmount";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "totalAmount";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "nonce";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "deadline";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }];
        }, {
            readonly name: "signature";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "sponsoredExecute";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "newOwner";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "transferOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "usedNonces";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "amount";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "withdraw";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "sender";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "amount";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: true;
        }];
        readonly name: "ContractFunded";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [];
        readonly name: "EIP712DomainChanged";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "previousOwner";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "newOwner";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }];
        readonly name: "OwnershipTransferStarted";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "previousOwner";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "newOwner";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }];
        readonly name: "OwnershipTransferred";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "verifier";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "from";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "amountSpent";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: false;
        }, {
            readonly name: "contractValue";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: false;
        }];
        readonly name: "SentSponsoredCallFromMintBalances";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "verifier";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "enabled";
            readonly internalType: "bool";
            readonly type: "bool";
            readonly indexed: true;
        }];
        readonly name: "SetVerifierStatus";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "data";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "CallFailed";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "ERC20NotSupported";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "IdsMismatch";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "InvalidShortString";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "InvalidSignature";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "LengthMismatch";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "NoMoreFundsToSponsor";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "NonceUsed";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "NotExpectingReceive";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "NotZoraSparks1155";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "owner";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "OwnableInvalidOwner";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "account";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "OwnableUnauthorizedAccount";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "expectedRedeemAmount";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "transientReceivedAmount";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "RedeemAmountIsIncorrect";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "SenderNotAllowedInSignature";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "SignatureExpired";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "SingleTransferNotSupported";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "str";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly name: "StringTooLong";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "data";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "TransferFailed";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "UnknownAction";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "UnknownUserAction";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ValuesMismatch";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "verifier";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "VerifierNotAllowed";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "WithdrawFailed";
    }];
};
/**
 * - [__View Contract on Base Basescan__](https://basescan.org/address/0x6ff5693b99212da76ad316178a184ab56d299b43)
 * - [__View Contract on Base Sepolia Basescan__](https://sepolia.basescan.org/address/0x492E6456D9528771018DeB9E87ef7750EF184104)
 */
export declare const uniswapUniversalRouterABI: readonly [{
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "commands";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }, {
        readonly name: "inputs";
        readonly internalType: "bytes[]";
        readonly type: "bytes[]";
    }, {
        readonly name: "deadline";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "execute";
    readonly outputs: readonly [];
    readonly stateMutability: "payable";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ETHNotAccepted";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "commandIndex";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "message";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "ExecutionFailed";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "InvalidEthSender";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "LengthMismatch";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "TransactionDeadlinePassed";
}];
/**
 * - [__View Contract on Base Basescan__](https://basescan.org/address/0x6ff5693b99212da76ad316178a184ab56d299b43)
 * - [__View Contract on Base Sepolia Basescan__](https://sepolia.basescan.org/address/0x492E6456D9528771018DeB9E87ef7750EF184104)
 */
export declare const uniswapUniversalRouterAddress: {
    readonly 8453: "0x6fF5693b99212Da76ad316178A184AB56D299b43";
    readonly 84532: "0x492E6456D9528771018DeB9E87ef7750EF184104";
};
/**
 * - [__View Contract on Base Basescan__](https://basescan.org/address/0x6ff5693b99212da76ad316178a184ab56d299b43)
 * - [__View Contract on Base Sepolia Basescan__](https://sepolia.basescan.org/address/0x492E6456D9528771018DeB9E87ef7750EF184104)
 */
export declare const uniswapUniversalRouterConfig: {
    readonly address: {
        readonly 8453: "0x6fF5693b99212Da76ad316178A184AB56D299b43";
        readonly 84532: "0x492E6456D9528771018DeB9E87ef7750EF184104";
    };
    readonly abi: readonly [{
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "commands";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }, {
            readonly name: "inputs";
            readonly internalType: "bytes[]";
            readonly type: "bytes[]";
        }, {
            readonly name: "deadline";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "execute";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ETHNotAccepted";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "commandIndex";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "message";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "ExecutionFailed";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "InvalidEthSender";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "LengthMismatch";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "TransactionDeadlinePassed";
    }];
};
/**
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45)
 * - [__View Contract on Op Mainnet Optimism Explorer__](https://optimistic.etherscan.io/address/0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45)
 * - [__View Contract on Base Basescan__](https://basescan.org/address/0x2626664c2603336E57B271c5C0b26F421741e481)
 * - [__View Contract on Arbitrum One Arbiscan__](https://arbiscan.io/address/0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45)
 * - [__View Contract on Blast Blastscan__](https://blastscan.io/address/0x549FEB8c9bd4c12Ad2AB27022dA12492aC452B66)
 * - [__View Contract on Base Sepolia Basescan__](https://sepolia.basescan.org/address/0x94cC0AaC535CCDB3C01d6787D6413C739ae12bc4)
 * - [__View Contract on Arbitrum Sepolia Arbiscan__](https://sepolia.arbiscan.io/address/0x101F443B4d1b059569D643917553c771E1b9663E)
 * - [__View Contract on Zora Explorer__](https://explorer.zora.energy/address/0x7De04c96BE5159c3b5CeffC82aa176dc81281557)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x3bFA4769FB09eefC5a80d6E87c3B9C650f7Ae48E)
 * - [__View Contract on Op Sepolia Blockscout__](https://optimism-sepolia.blockscout.com/address/0x94cC0AaC535CCDB3C01d6787D6413C739ae12bc4)
 * - [__View Contract on Zora Sepolia Zora Sepolia Explorer__](https://sepolia.explorer.zora.energy//address/0x6B36d761981d82B1e07cF3c4daF4cB4615c4850a)
 */
export declare const uniswapV3SwapRouterABI: readonly [{
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "params";
        readonly internalType: "struct ISwapRouter.ExactInputParams";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "path";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }, {
            readonly name: "recipient";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "amountIn";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "amountOutMinimum";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
    }];
    readonly name: "exactInput";
    readonly outputs: readonly [{
        readonly name: "amountOut";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "payable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "params";
        readonly internalType: "struct ISwapRouter.ExactInputSingleParams";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "tokenIn";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "tokenOut";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "fee";
            readonly internalType: "uint24";
            readonly type: "uint24";
        }, {
            readonly name: "recipient";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "amountIn";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "amountOutMinimum";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "sqrtPriceLimitX96";
            readonly internalType: "uint160";
            readonly type: "uint160";
        }];
    }];
    readonly name: "exactInputSingle";
    readonly outputs: readonly [{
        readonly name: "amountOut";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "payable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "params";
        readonly internalType: "struct ISwapRouter.ExactOutputParams";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "path";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }, {
            readonly name: "recipient";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "amountOut";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "amountInMaximum";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
    }];
    readonly name: "exactOutput";
    readonly outputs: readonly [{
        readonly name: "amountIn";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "payable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "params";
        readonly internalType: "struct ISwapRouter.ExactOutputSingleParams";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "tokenIn";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "tokenOut";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "fee";
            readonly internalType: "uint24";
            readonly type: "uint24";
        }, {
            readonly name: "recipient";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "amountOut";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "amountInMaximum";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "sqrtPriceLimitX96";
            readonly internalType: "uint160";
            readonly type: "uint160";
        }];
    }];
    readonly name: "exactOutputSingle";
    readonly outputs: readonly [{
        readonly name: "amountIn";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "payable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "amount0Delta";
        readonly internalType: "int256";
        readonly type: "int256";
    }, {
        readonly name: "amount1Delta";
        readonly internalType: "int256";
        readonly type: "int256";
    }, {
        readonly name: "data";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "uniswapV3SwapCallback";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}];
/**
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45)
 * - [__View Contract on Op Mainnet Optimism Explorer__](https://optimistic.etherscan.io/address/0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45)
 * - [__View Contract on Base Basescan__](https://basescan.org/address/0x2626664c2603336E57B271c5C0b26F421741e481)
 * - [__View Contract on Arbitrum One Arbiscan__](https://arbiscan.io/address/0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45)
 * - [__View Contract on Blast Blastscan__](https://blastscan.io/address/0x549FEB8c9bd4c12Ad2AB27022dA12492aC452B66)
 * - [__View Contract on Base Sepolia Basescan__](https://sepolia.basescan.org/address/0x94cC0AaC535CCDB3C01d6787D6413C739ae12bc4)
 * - [__View Contract on Arbitrum Sepolia Arbiscan__](https://sepolia.arbiscan.io/address/0x101F443B4d1b059569D643917553c771E1b9663E)
 * - [__View Contract on Zora Explorer__](https://explorer.zora.energy/address/0x7De04c96BE5159c3b5CeffC82aa176dc81281557)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x3bFA4769FB09eefC5a80d6E87c3B9C650f7Ae48E)
 * - [__View Contract on Op Sepolia Blockscout__](https://optimism-sepolia.blockscout.com/address/0x94cC0AaC535CCDB3C01d6787D6413C739ae12bc4)
 * - [__View Contract on Zora Sepolia Zora Sepolia Explorer__](https://sepolia.explorer.zora.energy//address/0x6B36d761981d82B1e07cF3c4daF4cB4615c4850a)
 */
export declare const uniswapV3SwapRouterAddress: {
    readonly 1: "0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45";
    readonly 10: "0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45";
    readonly 8453: "0x2626664c2603336E57B271c5C0b26F421741e481";
    readonly 42161: "0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45";
    readonly 81457: "0x549FEB8c9bd4c12Ad2AB27022dA12492aC452B66";
    readonly 84532: "0x94cC0AaC535CCDB3C01d6787D6413C739ae12bc4";
    readonly 421614: "0x101F443B4d1b059569D643917553c771E1b9663E";
    readonly 7777777: "0x7De04c96BE5159c3b5CeffC82aa176dc81281557";
    readonly 11155111: "0x3bFA4769FB09eefC5a80d6E87c3B9C650f7Ae48E";
    readonly 11155420: "0x94cC0AaC535CCDB3C01d6787D6413C739ae12bc4";
    readonly 999999999: "0x6B36d761981d82B1e07cF3c4daF4cB4615c4850a";
};
/**
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45)
 * - [__View Contract on Op Mainnet Optimism Explorer__](https://optimistic.etherscan.io/address/0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45)
 * - [__View Contract on Base Basescan__](https://basescan.org/address/0x2626664c2603336E57B271c5C0b26F421741e481)
 * - [__View Contract on Arbitrum One Arbiscan__](https://arbiscan.io/address/0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45)
 * - [__View Contract on Blast Blastscan__](https://blastscan.io/address/0x549FEB8c9bd4c12Ad2AB27022dA12492aC452B66)
 * - [__View Contract on Base Sepolia Basescan__](https://sepolia.basescan.org/address/0x94cC0AaC535CCDB3C01d6787D6413C739ae12bc4)
 * - [__View Contract on Arbitrum Sepolia Arbiscan__](https://sepolia.arbiscan.io/address/0x101F443B4d1b059569D643917553c771E1b9663E)
 * - [__View Contract on Zora Explorer__](https://explorer.zora.energy/address/0x7De04c96BE5159c3b5CeffC82aa176dc81281557)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x3bFA4769FB09eefC5a80d6E87c3B9C650f7Ae48E)
 * - [__View Contract on Op Sepolia Blockscout__](https://optimism-sepolia.blockscout.com/address/0x94cC0AaC535CCDB3C01d6787D6413C739ae12bc4)
 * - [__View Contract on Zora Sepolia Zora Sepolia Explorer__](https://sepolia.explorer.zora.energy//address/0x6B36d761981d82B1e07cF3c4daF4cB4615c4850a)
 */
export declare const uniswapV3SwapRouterConfig: {
    readonly address: {
        readonly 1: "0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45";
        readonly 10: "0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45";
        readonly 8453: "0x2626664c2603336E57B271c5C0b26F421741e481";
        readonly 42161: "0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45";
        readonly 81457: "0x549FEB8c9bd4c12Ad2AB27022dA12492aC452B66";
        readonly 84532: "0x94cC0AaC535CCDB3C01d6787D6413C739ae12bc4";
        readonly 421614: "0x101F443B4d1b059569D643917553c771E1b9663E";
        readonly 7777777: "0x7De04c96BE5159c3b5CeffC82aa176dc81281557";
        readonly 11155111: "0x3bFA4769FB09eefC5a80d6E87c3B9C650f7Ae48E";
        readonly 11155420: "0x94cC0AaC535CCDB3C01d6787D6413C739ae12bc4";
        readonly 999999999: "0x6B36d761981d82B1e07cF3c4daF4cB4615c4850a";
    };
    readonly abi: readonly [{
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "params";
            readonly internalType: "struct ISwapRouter.ExactInputParams";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "path";
                readonly internalType: "bytes";
                readonly type: "bytes";
            }, {
                readonly name: "recipient";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "amountIn";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "amountOutMinimum";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }];
        }];
        readonly name: "exactInput";
        readonly outputs: readonly [{
            readonly name: "amountOut";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "payable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "params";
            readonly internalType: "struct ISwapRouter.ExactInputSingleParams";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "tokenIn";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "tokenOut";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "fee";
                readonly internalType: "uint24";
                readonly type: "uint24";
            }, {
                readonly name: "recipient";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "amountIn";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "amountOutMinimum";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "sqrtPriceLimitX96";
                readonly internalType: "uint160";
                readonly type: "uint160";
            }];
        }];
        readonly name: "exactInputSingle";
        readonly outputs: readonly [{
            readonly name: "amountOut";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "payable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "params";
            readonly internalType: "struct ISwapRouter.ExactOutputParams";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "path";
                readonly internalType: "bytes";
                readonly type: "bytes";
            }, {
                readonly name: "recipient";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "amountOut";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "amountInMaximum";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }];
        }];
        readonly name: "exactOutput";
        readonly outputs: readonly [{
            readonly name: "amountIn";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "payable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "params";
            readonly internalType: "struct ISwapRouter.ExactOutputSingleParams";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "tokenIn";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "tokenOut";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "fee";
                readonly internalType: "uint24";
                readonly type: "uint24";
            }, {
                readonly name: "recipient";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "amountOut";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "amountInMaximum";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "sqrtPriceLimitX96";
                readonly internalType: "uint160";
                readonly type: "uint160";
            }];
        }];
        readonly name: "exactOutputSingle";
        readonly outputs: readonly [{
            readonly name: "amountIn";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "payable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "amount0Delta";
            readonly internalType: "int256";
            readonly type: "int256";
        }, {
            readonly name: "amount1Delta";
            readonly internalType: "int256";
            readonly type: "int256";
        }, {
            readonly name: "data";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "uniswapV3SwapCallback";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }];
};
/**
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xbC50029836A59A4E5e1Bb8988272F46ebA0F9900)
 * - [__View Contract on Op Mainnet Optimism Explorer__](https://optimistic.etherscan.io/address/0xbC50029836A59A4E5e1Bb8988272F46ebA0F9900)
 * - [__View Contract on Base Basescan__](https://basescan.org/address/0xbC50029836A59A4E5e1Bb8988272F46ebA0F9900)
 * - [__View Contract on Arbitrum One Arbiscan__](https://arbiscan.io/address/0xbC50029836A59A4E5e1Bb8988272F46ebA0F9900)
 * - [__View Contract on Blast Blastscan__](https://blastscan.io/address/0xbC50029836A59A4E5e1Bb8988272F46ebA0F9900)
 * - [__View Contract on Base Sepolia Basescan__](https://sepolia.basescan.org/address/0xbC50029836A59A4E5e1Bb8988272F46ebA0F9900)
 * - [__View Contract on Arbitrum Sepolia Arbiscan__](https://sepolia.arbiscan.io/address/0xbC50029836A59A4E5e1Bb8988272F46ebA0F9900)
 * - [__View Contract on Zora Explorer__](https://explorer.zora.energy/address/0xbC50029836A59A4E5e1Bb8988272F46ebA0F9900)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0xbC50029836A59A4E5e1Bb8988272F46ebA0F9900)
 * - [__View Contract on Blast Sepolia Blastscan__](https://sepolia.blastscan.io/address/0xbC50029836A59A4E5e1Bb8988272F46ebA0F9900)
 */
export declare const upgradeGateABI: readonly [{
    readonly type: "constructor";
    readonly inputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "acceptOwnership";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "cancelOwnershipTransfer";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "contractName";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly stateMutability: "pure";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "contractURI";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly stateMutability: "pure";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "_initialOwner";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "initialize";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "isAllowedUpgrade";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "baseImpl";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "upgradeImpl";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "isRegisteredUpgradePath";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "owner";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "pendingOwner";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "baseImpls";
        readonly internalType: "address[]";
        readonly type: "address[]";
    }, {
        readonly name: "upgradeImpl";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "registerUpgradePath";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "baseImpl";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "upgradeImpl";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "removeUpgradePath";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "resignOwnership";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "_newOwner";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "safeTransferOwnership";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "_newOwner";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "transferOwnership";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "version";
        readonly internalType: "uint8";
        readonly type: "uint8";
        readonly indexed: false;
    }];
    readonly name: "Initialized";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "owner";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "canceledOwner";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }];
    readonly name: "OwnerCanceled";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "owner";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "pendingOwner";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }];
    readonly name: "OwnerPending";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "prevOwner";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "newOwner";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }];
    readonly name: "OwnerUpdated";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [];
    readonly name: "UpgradeGateSetup";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "baseImpl";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "upgradeImpl";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }];
    readonly name: "UpgradeRegistered";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "baseImpl";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "upgradeImpl";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }];
    readonly name: "UpgradeRemoved";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "INITIALIZABLE_CONTRACT_ALREADY_INITIALIZED";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "INITIALIZABLE_CONTRACT_IS_NOT_INITIALIZING";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ONLY_OWNER";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ONLY_PENDING_OWNER";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "OWNER_CANNOT_BE_ZERO_ADDRESS";
}];
/**
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xbC50029836A59A4E5e1Bb8988272F46ebA0F9900)
 * - [__View Contract on Op Mainnet Optimism Explorer__](https://optimistic.etherscan.io/address/0xbC50029836A59A4E5e1Bb8988272F46ebA0F9900)
 * - [__View Contract on Base Basescan__](https://basescan.org/address/0xbC50029836A59A4E5e1Bb8988272F46ebA0F9900)
 * - [__View Contract on Arbitrum One Arbiscan__](https://arbiscan.io/address/0xbC50029836A59A4E5e1Bb8988272F46ebA0F9900)
 * - [__View Contract on Blast Blastscan__](https://blastscan.io/address/0xbC50029836A59A4E5e1Bb8988272F46ebA0F9900)
 * - [__View Contract on Base Sepolia Basescan__](https://sepolia.basescan.org/address/0xbC50029836A59A4E5e1Bb8988272F46ebA0F9900)
 * - [__View Contract on Arbitrum Sepolia Arbiscan__](https://sepolia.arbiscan.io/address/0xbC50029836A59A4E5e1Bb8988272F46ebA0F9900)
 * - [__View Contract on Zora Explorer__](https://explorer.zora.energy/address/0xbC50029836A59A4E5e1Bb8988272F46ebA0F9900)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0xbC50029836A59A4E5e1Bb8988272F46ebA0F9900)
 * - [__View Contract on Blast Sepolia Blastscan__](https://sepolia.blastscan.io/address/0xbC50029836A59A4E5e1Bb8988272F46ebA0F9900)
 */
export declare const upgradeGateAddress: {
    readonly 1: "0xbC50029836A59A4E5e1Bb8988272F46ebA0F9900";
    readonly 10: "0xbC50029836A59A4E5e1Bb8988272F46ebA0F9900";
    readonly 8453: "0xbC50029836A59A4E5e1Bb8988272F46ebA0F9900";
    readonly 42161: "0xbC50029836A59A4E5e1Bb8988272F46ebA0F9900";
    readonly 81457: "0xbC50029836A59A4E5e1Bb8988272F46ebA0F9900";
    readonly 84532: "0xbC50029836A59A4E5e1Bb8988272F46ebA0F9900";
    readonly 421614: "0xbC50029836A59A4E5e1Bb8988272F46ebA0F9900";
    readonly 7777777: "0xbC50029836A59A4E5e1Bb8988272F46ebA0F9900";
    readonly 11155111: "0xbC50029836A59A4E5e1Bb8988272F46ebA0F9900";
    readonly 168587773: "0xbC50029836A59A4E5e1Bb8988272F46ebA0F9900";
};
/**
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xbC50029836A59A4E5e1Bb8988272F46ebA0F9900)
 * - [__View Contract on Op Mainnet Optimism Explorer__](https://optimistic.etherscan.io/address/0xbC50029836A59A4E5e1Bb8988272F46ebA0F9900)
 * - [__View Contract on Base Basescan__](https://basescan.org/address/0xbC50029836A59A4E5e1Bb8988272F46ebA0F9900)
 * - [__View Contract on Arbitrum One Arbiscan__](https://arbiscan.io/address/0xbC50029836A59A4E5e1Bb8988272F46ebA0F9900)
 * - [__View Contract on Blast Blastscan__](https://blastscan.io/address/0xbC50029836A59A4E5e1Bb8988272F46ebA0F9900)
 * - [__View Contract on Base Sepolia Basescan__](https://sepolia.basescan.org/address/0xbC50029836A59A4E5e1Bb8988272F46ebA0F9900)
 * - [__View Contract on Arbitrum Sepolia Arbiscan__](https://sepolia.arbiscan.io/address/0xbC50029836A59A4E5e1Bb8988272F46ebA0F9900)
 * - [__View Contract on Zora Explorer__](https://explorer.zora.energy/address/0xbC50029836A59A4E5e1Bb8988272F46ebA0F9900)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0xbC50029836A59A4E5e1Bb8988272F46ebA0F9900)
 * - [__View Contract on Blast Sepolia Blastscan__](https://sepolia.blastscan.io/address/0xbC50029836A59A4E5e1Bb8988272F46ebA0F9900)
 */
export declare const upgradeGateConfig: {
    readonly address: {
        readonly 1: "0xbC50029836A59A4E5e1Bb8988272F46ebA0F9900";
        readonly 10: "0xbC50029836A59A4E5e1Bb8988272F46ebA0F9900";
        readonly 8453: "0xbC50029836A59A4E5e1Bb8988272F46ebA0F9900";
        readonly 42161: "0xbC50029836A59A4E5e1Bb8988272F46ebA0F9900";
        readonly 81457: "0xbC50029836A59A4E5e1Bb8988272F46ebA0F9900";
        readonly 84532: "0xbC50029836A59A4E5e1Bb8988272F46ebA0F9900";
        readonly 421614: "0xbC50029836A59A4E5e1Bb8988272F46ebA0F9900";
        readonly 7777777: "0xbC50029836A59A4E5e1Bb8988272F46ebA0F9900";
        readonly 11155111: "0xbC50029836A59A4E5e1Bb8988272F46ebA0F9900";
        readonly 168587773: "0xbC50029836A59A4E5e1Bb8988272F46ebA0F9900";
    };
    readonly abi: readonly [{
        readonly type: "constructor";
        readonly inputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "acceptOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "cancelOwnershipTransfer";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "contractName";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly stateMutability: "pure";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "contractURI";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly stateMutability: "pure";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "_initialOwner";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "initialize";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "isAllowedUpgrade";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "baseImpl";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "upgradeImpl";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "isRegisteredUpgradePath";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "owner";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "pendingOwner";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "baseImpls";
            readonly internalType: "address[]";
            readonly type: "address[]";
        }, {
            readonly name: "upgradeImpl";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "registerUpgradePath";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "baseImpl";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "upgradeImpl";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "removeUpgradePath";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "resignOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "_newOwner";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "safeTransferOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "_newOwner";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "transferOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "version";
            readonly internalType: "uint8";
            readonly type: "uint8";
            readonly indexed: false;
        }];
        readonly name: "Initialized";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "owner";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "canceledOwner";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }];
        readonly name: "OwnerCanceled";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "owner";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "pendingOwner";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }];
        readonly name: "OwnerPending";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "prevOwner";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "newOwner";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }];
        readonly name: "OwnerUpdated";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [];
        readonly name: "UpgradeGateSetup";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "baseImpl";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "upgradeImpl";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }];
        readonly name: "UpgradeRegistered";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "baseImpl";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "upgradeImpl";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }];
        readonly name: "UpgradeRemoved";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "INITIALIZABLE_CONTRACT_ALREADY_INITIALIZED";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "INITIALIZABLE_CONTRACT_IS_NOT_INITIALIZING";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ONLY_OWNER";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ONLY_PENDING_OWNER";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "OWNER_CANNOT_BE_ZERO_ADDRESS";
    }];
};
/**
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2)
 * - [__View Contract on Op Mainnet Optimism Explorer__](https://optimistic.etherscan.io/address/0x4200000000000000000000000000000000000006)
 * - [__View Contract on Base Basescan__](https://basescan.org/address/0x4200000000000000000000000000000000000006)
 * - [__View Contract on Arbitrum One Arbiscan__](https://arbiscan.io/address/0x82af49447d8a07e3bd95bd0d56f35241523fbab1)
 * - [__View Contract on Blast Blastscan__](https://blastscan.io/address/0x4300000000000000000000000000000000000004)
 * - [__View Contract on Base Sepolia Basescan__](https://sepolia.basescan.org/address/0x4200000000000000000000000000000000000006)
 * - [__View Contract on Arbitrum Sepolia Arbiscan__](https://sepolia.arbiscan.io/address/0xc556bae1e86b2ae9c22ea5e036b07e55e7596074)
 * - [__View Contract on Zora Explorer__](https://explorer.zora.energy/address/0x4200000000000000000000000000000000000006)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x7b79995e5f793A07Bc00c21412e50Ecae098E7f9)
 * - [__View Contract on Op Sepolia Blockscout__](https://optimism-sepolia.blockscout.com/address/0x4200000000000000000000000000000000000006)
 * - [__View Contract on Zora Sepolia Zora Sepolia Explorer__](https://sepolia.explorer.zora.energy//address/0x4200000000000000000000000000000000000006)
 */
export declare const wethABI: readonly [{
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "guy";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "wad";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "approve";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "guy";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "balanceOf";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "deposit";
    readonly outputs: readonly [];
    readonly stateMutability: "payable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "dst";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "wad";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "transfer";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "src";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "dst";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "wad";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "transferFrom";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "wad";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "withdraw";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}];
/**
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2)
 * - [__View Contract on Op Mainnet Optimism Explorer__](https://optimistic.etherscan.io/address/0x4200000000000000000000000000000000000006)
 * - [__View Contract on Base Basescan__](https://basescan.org/address/0x4200000000000000000000000000000000000006)
 * - [__View Contract on Arbitrum One Arbiscan__](https://arbiscan.io/address/0x82af49447d8a07e3bd95bd0d56f35241523fbab1)
 * - [__View Contract on Blast Blastscan__](https://blastscan.io/address/0x4300000000000000000000000000000000000004)
 * - [__View Contract on Base Sepolia Basescan__](https://sepolia.basescan.org/address/0x4200000000000000000000000000000000000006)
 * - [__View Contract on Arbitrum Sepolia Arbiscan__](https://sepolia.arbiscan.io/address/0xc556bae1e86b2ae9c22ea5e036b07e55e7596074)
 * - [__View Contract on Zora Explorer__](https://explorer.zora.energy/address/0x4200000000000000000000000000000000000006)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x7b79995e5f793A07Bc00c21412e50Ecae098E7f9)
 * - [__View Contract on Op Sepolia Blockscout__](https://optimism-sepolia.blockscout.com/address/0x4200000000000000000000000000000000000006)
 * - [__View Contract on Zora Sepolia Zora Sepolia Explorer__](https://sepolia.explorer.zora.energy//address/0x4200000000000000000000000000000000000006)
 */
export declare const wethAddress: {
    readonly 1: "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2";
    readonly 10: "0x4200000000000000000000000000000000000006";
    readonly 8453: "0x4200000000000000000000000000000000000006";
    readonly 42161: "0x82aF49447D8a07e3bd95BD0d56f35241523fBab1";
    readonly 81457: "0x4300000000000000000000000000000000000004";
    readonly 84532: "0x4200000000000000000000000000000000000006";
    readonly 421614: "0xc556bAe1e86B2aE9c22eA5E036b07E55E7596074";
    readonly 7777777: "0x4200000000000000000000000000000000000006";
    readonly 11155111: "0x7b79995e5f793A07Bc00c21412e50Ecae098E7f9";
    readonly 11155420: "0x4200000000000000000000000000000000000006";
    readonly 999999999: "0x4200000000000000000000000000000000000006";
};
/**
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2)
 * - [__View Contract on Op Mainnet Optimism Explorer__](https://optimistic.etherscan.io/address/0x4200000000000000000000000000000000000006)
 * - [__View Contract on Base Basescan__](https://basescan.org/address/0x4200000000000000000000000000000000000006)
 * - [__View Contract on Arbitrum One Arbiscan__](https://arbiscan.io/address/0x82af49447d8a07e3bd95bd0d56f35241523fbab1)
 * - [__View Contract on Blast Blastscan__](https://blastscan.io/address/0x4300000000000000000000000000000000000004)
 * - [__View Contract on Base Sepolia Basescan__](https://sepolia.basescan.org/address/0x4200000000000000000000000000000000000006)
 * - [__View Contract on Arbitrum Sepolia Arbiscan__](https://sepolia.arbiscan.io/address/0xc556bae1e86b2ae9c22ea5e036b07e55e7596074)
 * - [__View Contract on Zora Explorer__](https://explorer.zora.energy/address/0x4200000000000000000000000000000000000006)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x7b79995e5f793A07Bc00c21412e50Ecae098E7f9)
 * - [__View Contract on Op Sepolia Blockscout__](https://optimism-sepolia.blockscout.com/address/0x4200000000000000000000000000000000000006)
 * - [__View Contract on Zora Sepolia Zora Sepolia Explorer__](https://sepolia.explorer.zora.energy//address/0x4200000000000000000000000000000000000006)
 */
export declare const wethConfig: {
    readonly address: {
        readonly 1: "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2";
        readonly 10: "0x4200000000000000000000000000000000000006";
        readonly 8453: "0x4200000000000000000000000000000000000006";
        readonly 42161: "0x82aF49447D8a07e3bd95BD0d56f35241523fBab1";
        readonly 81457: "0x4300000000000000000000000000000000000004";
        readonly 84532: "0x4200000000000000000000000000000000000006";
        readonly 421614: "0xc556bAe1e86B2aE9c22eA5E036b07E55E7596074";
        readonly 7777777: "0x4200000000000000000000000000000000000006";
        readonly 11155111: "0x7b79995e5f793A07Bc00c21412e50Ecae098E7f9";
        readonly 11155420: "0x4200000000000000000000000000000000000006";
        readonly 999999999: "0x4200000000000000000000000000000000000006";
    };
    readonly abi: readonly [{
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "guy";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "wad";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "approve";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "guy";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "balanceOf";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "deposit";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "dst";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "wad";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "transfer";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "src";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "dst";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "wad";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "transferFrom";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "wad";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "withdraw";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }];
};
/**
 * - [__View Contract on Base Basescan__](https://basescan.org/address/0x0Ba958A449701907302e28F5955fa9d16dDC45c3)
 * - [__View Contract on Zora Explorer__](https://explorer.zora.energy/address/0x7777777f7bA9ce74A5d7f058B30Ac824d940fB52)
 */
export declare const zoraAccountManagerABI: readonly [{
    readonly type: "constructor";
    readonly inputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "UPGRADE_INTERFACE_VERSION";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "encodedOwners";
        readonly internalType: "bytes[]";
        readonly type: "bytes[]";
    }, {
        readonly name: "nonce";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "createSmartWallet";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "entryPoint";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "contract IEntryPoint";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "encodedOwners";
        readonly internalType: "bytes[]";
        readonly type: "bytes[]";
    }, {
        readonly name: "nonce";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "getAddress";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "smartWallet";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "key";
        readonly internalType: "uint192";
        readonly type: "uint192";
    }];
    readonly name: "getKeyNonce";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "smartWallet";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "getNonce";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "implementation";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "initialOwner";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "initialize";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "owner";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "proxiableUUID";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "renounceOwnership";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "smartWalletFactory";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "contract ICoinbaseSmartWalletFactory";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "newOwner";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "transferOwnership";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "newImplementation";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "data";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "upgradeToAndCall";
    readonly outputs: readonly [];
    readonly stateMutability: "payable";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "version";
        readonly internalType: "uint64";
        readonly type: "uint64";
        readonly indexed: false;
    }];
    readonly name: "Initialized";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "previousOwner";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "newOwner";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }];
    readonly name: "OwnershipTransferred";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "implementation";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }];
    readonly name: "Upgraded";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "smartWallet";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "baseOwner";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "owners";
        readonly internalType: "address[]";
        readonly type: "address[]";
        readonly indexed: false;
    }, {
        readonly name: "nonce";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }];
    readonly name: "ZoraSmartWalletCreated";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "target";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "AddressEmptyCode";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "implementation";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "ERC1967InvalidImplementation";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ERC1967NonPayable";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "FailedInnerCall";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "InvalidInitialization";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "NotInitializing";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "owner";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "OwnableInvalidOwner";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "account";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "OwnableUnauthorizedAccount";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "UUPSUnauthorizedCallContext";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "slot";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly name: "UUPSUnsupportedProxiableUUID";
}];
/**
 * - [__View Contract on Base Basescan__](https://basescan.org/address/0x0Ba958A449701907302e28F5955fa9d16dDC45c3)
 * - [__View Contract on Zora Explorer__](https://explorer.zora.energy/address/0x7777777f7bA9ce74A5d7f058B30Ac824d940fB52)
 */
export declare const zoraAccountManagerAddress: {
    readonly 8453: "0x0Ba958A449701907302e28F5955fa9d16dDC45c3";
    readonly 7777777: "0x7777777f7bA9ce74A5d7f058B30Ac824d940fB52";
};
/**
 * - [__View Contract on Base Basescan__](https://basescan.org/address/0x0Ba958A449701907302e28F5955fa9d16dDC45c3)
 * - [__View Contract on Zora Explorer__](https://explorer.zora.energy/address/0x7777777f7bA9ce74A5d7f058B30Ac824d940fB52)
 */
export declare const zoraAccountManagerConfig: {
    readonly address: {
        readonly 8453: "0x0Ba958A449701907302e28F5955fa9d16dDC45c3";
        readonly 7777777: "0x7777777f7bA9ce74A5d7f058B30Ac824d940fB52";
    };
    readonly abi: readonly [{
        readonly type: "constructor";
        readonly inputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "UPGRADE_INTERFACE_VERSION";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "encodedOwners";
            readonly internalType: "bytes[]";
            readonly type: "bytes[]";
        }, {
            readonly name: "nonce";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "createSmartWallet";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "entryPoint";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "contract IEntryPoint";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "encodedOwners";
            readonly internalType: "bytes[]";
            readonly type: "bytes[]";
        }, {
            readonly name: "nonce";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "getAddress";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "smartWallet";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "key";
            readonly internalType: "uint192";
            readonly type: "uint192";
        }];
        readonly name: "getKeyNonce";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "smartWallet";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "getNonce";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "implementation";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "initialOwner";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "initialize";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "owner";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "proxiableUUID";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "renounceOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "smartWalletFactory";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "contract ICoinbaseSmartWalletFactory";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "newOwner";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "transferOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "newImplementation";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "data";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "upgradeToAndCall";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "version";
            readonly internalType: "uint64";
            readonly type: "uint64";
            readonly indexed: false;
        }];
        readonly name: "Initialized";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "previousOwner";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "newOwner";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }];
        readonly name: "OwnershipTransferred";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "implementation";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }];
        readonly name: "Upgraded";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "smartWallet";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "baseOwner";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "owners";
            readonly internalType: "address[]";
            readonly type: "address[]";
            readonly indexed: false;
        }, {
            readonly name: "nonce";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: false;
        }];
        readonly name: "ZoraSmartWalletCreated";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "target";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "AddressEmptyCode";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "implementation";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "ERC1967InvalidImplementation";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ERC1967NonPayable";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "FailedInnerCall";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "InvalidInitialization";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "NotInitializing";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "owner";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "OwnableInvalidOwner";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "account";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "OwnableUnauthorizedAccount";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "UUPSUnauthorizedCallContext";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "slot";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly name: "UUPSUnsupportedProxiableUUID";
    }];
};
/**
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x777777C338d93e2C7adf08D102d45CA7CC4Ed021)
 * - [__View Contract on Op Mainnet Optimism Explorer__](https://optimistic.etherscan.io/address/0x777777C338d93e2C7adf08D102d45CA7CC4Ed021)
 * - [__View Contract on Zora Goerli Testnet Explorer__](https://testnet.explorer.zora.energy/address/0x777777C338d93e2C7adf08D102d45CA7CC4Ed021)
 * - [__View Contract on Base Basescan__](https://basescan.org/address/0x777777C338d93e2C7adf08D102d45CA7CC4Ed021)
 * - [__View Contract on Arbitrum One Arbiscan__](https://arbiscan.io/address/0x777777C338d93e2C7adf08D102d45CA7CC4Ed021)
 * - [__View Contract on Blast Blastscan__](https://blastscan.io/address/0x777777C338d93e2C7adf08D102d45CA7CC4Ed021)
 * - [__View Contract on Base Sepolia Basescan__](https://sepolia.basescan.org/address/0x777777C338d93e2C7adf08D102d45CA7CC4Ed021)
 * - [__View Contract on Arbitrum Sepolia Arbiscan__](https://sepolia.arbiscan.io/address/0x777777C338d93e2C7adf08D102d45CA7CC4Ed021)
 * - [__View Contract on Zora Explorer__](https://explorer.zora.energy/address/0x777777C338d93e2C7adf08D102d45CA7CC4Ed021)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x777777C338d93e2C7adf08D102d45CA7CC4Ed021)
 * - [__View Contract on Blast Sepolia Blastscan__](https://sepolia.blastscan.io/address/0x777777C338d93e2C7adf08D102d45CA7CC4Ed021)
 * - [__View Contract on Zora Sepolia Zora Sepolia Explorer__](https://sepolia.explorer.zora.energy//address/0x777777C338d93e2C7adf08D102d45CA7CC4Ed021)
 */
export declare const zoraCreator1155FactoryImplABI: readonly [{
    readonly type: "constructor";
    readonly inputs: readonly [{
        readonly name: "_zora1155Impl";
        readonly internalType: "contract IZoraCreator1155";
        readonly type: "address";
    }, {
        readonly name: "_merkleMinter";
        readonly internalType: "contract IMinter1155";
        readonly type: "address";
    }, {
        readonly name: "_fixedPriceMinter";
        readonly internalType: "contract IMinter1155";
        readonly type: "address";
    }, {
        readonly name: "_redeemMinterFactory";
        readonly internalType: "contract IMinter1155";
        readonly type: "address";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "acceptOwnership";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "cancelOwnershipTransfer";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "contractName";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly stateMutability: "pure";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "contractURI";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly stateMutability: "pure";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "contractVersion";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly stateMutability: "pure";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "newContractURI";
        readonly internalType: "string";
        readonly type: "string";
    }, {
        readonly name: "name";
        readonly internalType: "string";
        readonly type: "string";
    }, {
        readonly name: "defaultRoyaltyConfiguration";
        readonly internalType: "struct ICreatorRoyaltiesControl.RoyaltyConfiguration";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "royaltyMintSchedule";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }, {
            readonly name: "royaltyBPS";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }, {
            readonly name: "royaltyRecipient";
            readonly internalType: "address";
            readonly type: "address";
        }];
    }, {
        readonly name: "defaultAdmin";
        readonly internalType: "address payable";
        readonly type: "address";
    }, {
        readonly name: "setupActions";
        readonly internalType: "bytes[]";
        readonly type: "bytes[]";
    }];
    readonly name: "createContract";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "newContractURI";
        readonly internalType: "string";
        readonly type: "string";
    }, {
        readonly name: "name";
        readonly internalType: "string";
        readonly type: "string";
    }, {
        readonly name: "defaultRoyaltyConfiguration";
        readonly internalType: "struct ICreatorRoyaltiesControl.RoyaltyConfiguration";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "royaltyMintSchedule";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }, {
            readonly name: "royaltyBPS";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }, {
            readonly name: "royaltyRecipient";
            readonly internalType: "address";
            readonly type: "address";
        }];
    }, {
        readonly name: "defaultAdmin";
        readonly internalType: "address payable";
        readonly type: "address";
    }, {
        readonly name: "setupActions";
        readonly internalType: "bytes[]";
        readonly type: "bytes[]";
    }];
    readonly name: "createContractDeterministic";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "defaultMinters";
    readonly outputs: readonly [{
        readonly name: "minters";
        readonly internalType: "contract IMinter1155[]";
        readonly type: "address[]";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "msgSender";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "newContractURI";
        readonly internalType: "string";
        readonly type: "string";
    }, {
        readonly name: "name";
        readonly internalType: "string";
        readonly type: "string";
    }, {
        readonly name: "contractAdmin";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "deterministicContractAddress";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "msgSender";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "newContractURI";
        readonly internalType: "string";
        readonly type: "string";
    }, {
        readonly name: "name";
        readonly internalType: "string";
        readonly type: "string";
    }, {
        readonly name: "contractAdmin";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "setupActions";
        readonly internalType: "bytes[]";
        readonly type: "bytes[]";
    }];
    readonly name: "deterministicContractAddressWithSetupActions";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "fixedPriceMinter";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "contract IMinter1155";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "expectedContractAddress";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "newContractURI";
        readonly internalType: "string";
        readonly type: "string";
    }, {
        readonly name: "name";
        readonly internalType: "string";
        readonly type: "string";
    }, {
        readonly name: "defaultRoyaltyConfiguration";
        readonly internalType: "struct ICreatorRoyaltiesControl.RoyaltyConfiguration";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "royaltyMintSchedule";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }, {
            readonly name: "royaltyBPS";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }, {
            readonly name: "royaltyRecipient";
            readonly internalType: "address";
            readonly type: "address";
        }];
    }, {
        readonly name: "defaultAdmin";
        readonly internalType: "address payable";
        readonly type: "address";
    }, {
        readonly name: "setupActions";
        readonly internalType: "bytes[]";
        readonly type: "bytes[]";
    }];
    readonly name: "getOrCreateContractDeterministic";
    readonly outputs: readonly [{
        readonly name: "calculatedContractAddress";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "implementation";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "_initialOwner";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "initialize";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "merkleMinter";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "contract IMinter1155";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "owner";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "pendingOwner";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "proxiableUUID";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "redeemMinterFactory";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "contract IMinter1155";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "resignOwnership";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "_newOwner";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "safeTransferOwnership";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "_newOwner";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "transferOwnership";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "newImplementation";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "upgradeTo";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "newImplementation";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "data";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "upgradeToAndCall";
    readonly outputs: readonly [];
    readonly stateMutability: "payable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "zora1155Impl";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "contract IZoraCreator1155";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "previousAdmin";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }, {
        readonly name: "newAdmin";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }];
    readonly name: "AdminChanged";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "beacon";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }];
    readonly name: "BeaconUpgraded";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "calculatedContractAddress";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }];
    readonly name: "ContractAlreadyExistsSkippingDeploy";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [];
    readonly name: "FactorySetup";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "version";
        readonly internalType: "uint8";
        readonly type: "uint8";
        readonly indexed: false;
    }];
    readonly name: "Initialized";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "owner";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "canceledOwner";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }];
    readonly name: "OwnerCanceled";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "owner";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "pendingOwner";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }];
    readonly name: "OwnerPending";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "prevOwner";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "newOwner";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }];
    readonly name: "OwnerUpdated";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "newContract";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "creator";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "defaultAdmin";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "contractURI";
        readonly internalType: "string";
        readonly type: "string";
        readonly indexed: false;
    }, {
        readonly name: "name";
        readonly internalType: "string";
        readonly type: "string";
        readonly indexed: false;
    }, {
        readonly name: "defaultRoyaltyConfiguration";
        readonly internalType: "struct ICreatorRoyaltiesControl.RoyaltyConfiguration";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "royaltyMintSchedule";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }, {
            readonly name: "royaltyBPS";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }, {
            readonly name: "royaltyRecipient";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly indexed: false;
    }];
    readonly name: "SetupNewContract";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "implementation";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }];
    readonly name: "Upgraded";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ADDRESS_DELEGATECALL_TO_NON_CONTRACT";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ADDRESS_LOW_LEVEL_CALL_FAILED";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "Constructor_ImplCannotBeZero";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ERC1967_NEW_IMPL_NOT_CONTRACT";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ERC1967_NEW_IMPL_NOT_UUPS";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ERC1967_UNSUPPORTED_PROXIABLEUUID";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "expectedContractAddress";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "calculcatedContractAddress";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "ExpectedContractAddressDoesNotMatchCalculatedContractAddress";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "FUNCTION_MUST_BE_CALLED_THROUGH_ACTIVE_PROXY";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "FUNCTION_MUST_BE_CALLED_THROUGH_DELEGATECALL";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "INITIALIZABLE_CONTRACT_ALREADY_INITIALIZED";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "INITIALIZABLE_CONTRACT_IS_NOT_INITIALIZING";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ONLY_OWNER";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ONLY_PENDING_OWNER";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "OWNER_CANNOT_BE_ZERO_ADDRESS";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "UUPS_UPGRADEABLE_MUST_NOT_BE_CALLED_THROUGH_DELEGATECALL";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "expected";
        readonly internalType: "string";
        readonly type: "string";
    }, {
        readonly name: "actual";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly name: "UpgradeToMismatchedContractName";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ADDRESS_DELEGATECALL_TO_NON_CONTRACT";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ADDRESS_LOW_LEVEL_CALL_FAILED";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "operator";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "user";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "Burn_NotOwnerOrApproved";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "CREATOR_FUNDS_RECIPIENT_NOT_SET";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "reason";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "CallFailed";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "Call_TokenIdMismatch";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "CallerNotZoraCreator1155";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "CanOnlyReduceMaxSupply";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "quantity";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "totalMinted";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "maxSupply";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "CannotMintMoreTokens";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "CannotReduceMaxSupplyBelowMinted";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "proposedAddress";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "Config_TransferHookNotSupported";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ERC1155_ACCOUNTS_AND_IDS_LENGTH_MISMATCH";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ERC1155_ADDRESS_ZERO_IS_NOT_A_VALID_OWNER";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ERC1155_BURN_AMOUNT_EXCEEDS_BALANCE";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ERC1155_BURN_FROM_ZERO_ADDRESS";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ERC1155_CALLER_IS_NOT_TOKEN_OWNER_OR_APPROVED";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ERC1155_ERC1155RECEIVER_REJECTED_TOKENS";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ERC1155_IDS_AND_AMOUNTS_LENGTH_MISMATCH";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ERC1155_INSUFFICIENT_BALANCE_FOR_TRANSFER";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ERC1155_MINT_TO_ZERO_ADDRESS";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ERC1155_MINT_TO_ZERO_ADDRESS";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ERC1155_SETTING_APPROVAL_FOR_SELF";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ERC1155_TRANSFER_TO_NON_ERC1155RECEIVER_IMPLEMENTER";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ERC1155_TRANSFER_TO_ZERO_ADDRESS";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ERC1967_NEW_IMPL_NOT_CONTRACT";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ERC1967_NEW_IMPL_NOT_UUPS";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ERC1967_UNSUPPORTED_PROXIABLEUUID";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "recipient";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "amount";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "ETHWithdrawFailed";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "FUNCTION_MUST_BE_CALLED_THROUGH_ACTIVE_PROXY";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "FUNCTION_MUST_BE_CALLED_THROUGH_DELEGATECALL";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "FirstMinterAddressZero";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "amount";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "contractValue";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "FundsWithdrawInsolvent";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "INITIALIZABLE_CONTRACT_ALREADY_INITIALIZED";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "INITIALIZABLE_CONTRACT_IS_NOT_INITIALIZING";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "INVALID_ADDRESS_ZERO";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "INVALID_ETH_AMOUNT";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "mintTo";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "merkleProof";
        readonly internalType: "bytes32[]";
        readonly type: "bytes32[]";
    }, {
        readonly name: "merkleRoot";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly name: "InvalidMerkleProof";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "InvalidMintSchedule";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "InvalidMintSchedule";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "InvalidPremintVersion";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "InvalidSignature";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "InvalidSignatureVersion";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "magicValue";
        readonly internalType: "bytes4";
        readonly type: "bytes4";
    }];
    readonly name: "InvalidSigner";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "MintNotYetStarted";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "Mint_InsolventSaleTransfer";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "Mint_InvalidMintArrayLength";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "Mint_TokenIDMintNotAllowed";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "Mint_UnknownCommand";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "Mint_ValueTransferFail";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "MinterContractAlreadyExists";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "MinterContractDoesNotExist";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "NewOwnerNeedsToBeAdmin";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "NoRendererForToken";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "NonEthRedemption";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ONLY_CREATE_REFERRAL";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "OnlyAllowedForRegisteredMinter";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "OnlyAllowedForTimedSaleStrategy";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "OnlyTransfersFromZoraMints";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "PremintDeleted";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "caller";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "recipient";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "amount";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "ProtocolRewardsWithdrawFailed";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "renderer";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "RendererNotValid";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "Renderer_NotValidRendererContract";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "SaleEnded";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "SaleHasNotStarted";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "targetContract";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "Sale_CannotCallNonSalesContract";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "expected";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "actual";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "TokenIdMismatch";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "UUPS_UPGRADEABLE_MUST_NOT_BE_CALLED_THROUGH_DELEGATECALL";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "user";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "limit";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "requestedAmount";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "UserExceedsMintLimit";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "user";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "role";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "UserMissingRoleForToken";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "WrongValueSent";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "premintSignerContractFailedToRecoverSigner";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "premintSignerContractNotAContract";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "target";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "AddressEmptyCode";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "account";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "AddressInsufficientBalance";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "AddressZero";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ERC1167FailedCreateClone";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "implementation";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "ERC1967InvalidImplementation";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ERC1967NonPayable";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "EndTimeCannotBeInThePast";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "FailedInnerCall";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "InsufficientFunds";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "InvalidInitialization";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "MarketAlreadyLaunched";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "MarketMinimumNotReached";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "MinimumMarketEthNotMet";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "NeedsToBeAtLeastOneSaleToStartMarket";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "NotInitializing";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "OnlyZoraRewardRecipient";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "owner";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "OwnableInvalidOwner";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "account";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "OwnableUnauthorizedAccount";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ReentrancyGuardReentrantCall";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "RequestMintInvalidUseMint";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ResetSaleNotAvailable";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "SaleAlreadySet";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "SaleEnded";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "SaleHasNotStarted";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "SaleInProgress";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "SaleNotSet";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "SaleV2AlreadyStarted";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "SaleV2Ended";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "SaleV2NotSet";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "StartTimeCannotBeAfterEndTime";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "UUPSUnauthorizedCallContext";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "slot";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly name: "UUPSUnsupportedProxiableUUID";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "WrongValueSent";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ZoraCreator1155ContractNeedsToSupportReduceSupply";
}];
/**
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x777777C338d93e2C7adf08D102d45CA7CC4Ed021)
 * - [__View Contract on Op Mainnet Optimism Explorer__](https://optimistic.etherscan.io/address/0x777777C338d93e2C7adf08D102d45CA7CC4Ed021)
 * - [__View Contract on Zora Goerli Testnet Explorer__](https://testnet.explorer.zora.energy/address/0x777777C338d93e2C7adf08D102d45CA7CC4Ed021)
 * - [__View Contract on Base Basescan__](https://basescan.org/address/0x777777C338d93e2C7adf08D102d45CA7CC4Ed021)
 * - [__View Contract on Arbitrum One Arbiscan__](https://arbiscan.io/address/0x777777C338d93e2C7adf08D102d45CA7CC4Ed021)
 * - [__View Contract on Blast Blastscan__](https://blastscan.io/address/0x777777C338d93e2C7adf08D102d45CA7CC4Ed021)
 * - [__View Contract on Base Sepolia Basescan__](https://sepolia.basescan.org/address/0x777777C338d93e2C7adf08D102d45CA7CC4Ed021)
 * - [__View Contract on Arbitrum Sepolia Arbiscan__](https://sepolia.arbiscan.io/address/0x777777C338d93e2C7adf08D102d45CA7CC4Ed021)
 * - [__View Contract on Zora Explorer__](https://explorer.zora.energy/address/0x777777C338d93e2C7adf08D102d45CA7CC4Ed021)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x777777C338d93e2C7adf08D102d45CA7CC4Ed021)
 * - [__View Contract on Blast Sepolia Blastscan__](https://sepolia.blastscan.io/address/0x777777C338d93e2C7adf08D102d45CA7CC4Ed021)
 * - [__View Contract on Zora Sepolia Zora Sepolia Explorer__](https://sepolia.explorer.zora.energy//address/0x777777C338d93e2C7adf08D102d45CA7CC4Ed021)
 */
export declare const zoraCreator1155FactoryImplAddress: {
    readonly 1: "0x777777C338d93e2C7adf08D102d45CA7CC4Ed021";
    readonly 10: "0x777777C338d93e2C7adf08D102d45CA7CC4Ed021";
    readonly 999: "0x777777C338d93e2C7adf08D102d45CA7CC4Ed021";
    readonly 8453: "0x777777C338d93e2C7adf08D102d45CA7CC4Ed021";
    readonly 42161: "0x777777C338d93e2C7adf08D102d45CA7CC4Ed021";
    readonly 81457: "0x777777C338d93e2C7adf08D102d45CA7CC4Ed021";
    readonly 84532: "0x777777C338d93e2C7adf08D102d45CA7CC4Ed021";
    readonly 421614: "0x777777C338d93e2C7adf08D102d45CA7CC4Ed021";
    readonly 7777777: "0x777777C338d93e2C7adf08D102d45CA7CC4Ed021";
    readonly 11155111: "0x777777C338d93e2C7adf08D102d45CA7CC4Ed021";
    readonly 168587773: "0x777777C338d93e2C7adf08D102d45CA7CC4Ed021";
    readonly 999999999: "0x777777C338d93e2C7adf08D102d45CA7CC4Ed021";
};
/**
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x777777C338d93e2C7adf08D102d45CA7CC4Ed021)
 * - [__View Contract on Op Mainnet Optimism Explorer__](https://optimistic.etherscan.io/address/0x777777C338d93e2C7adf08D102d45CA7CC4Ed021)
 * - [__View Contract on Zora Goerli Testnet Explorer__](https://testnet.explorer.zora.energy/address/0x777777C338d93e2C7adf08D102d45CA7CC4Ed021)
 * - [__View Contract on Base Basescan__](https://basescan.org/address/0x777777C338d93e2C7adf08D102d45CA7CC4Ed021)
 * - [__View Contract on Arbitrum One Arbiscan__](https://arbiscan.io/address/0x777777C338d93e2C7adf08D102d45CA7CC4Ed021)
 * - [__View Contract on Blast Blastscan__](https://blastscan.io/address/0x777777C338d93e2C7adf08D102d45CA7CC4Ed021)
 * - [__View Contract on Base Sepolia Basescan__](https://sepolia.basescan.org/address/0x777777C338d93e2C7adf08D102d45CA7CC4Ed021)
 * - [__View Contract on Arbitrum Sepolia Arbiscan__](https://sepolia.arbiscan.io/address/0x777777C338d93e2C7adf08D102d45CA7CC4Ed021)
 * - [__View Contract on Zora Explorer__](https://explorer.zora.energy/address/0x777777C338d93e2C7adf08D102d45CA7CC4Ed021)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x777777C338d93e2C7adf08D102d45CA7CC4Ed021)
 * - [__View Contract on Blast Sepolia Blastscan__](https://sepolia.blastscan.io/address/0x777777C338d93e2C7adf08D102d45CA7CC4Ed021)
 * - [__View Contract on Zora Sepolia Zora Sepolia Explorer__](https://sepolia.explorer.zora.energy//address/0x777777C338d93e2C7adf08D102d45CA7CC4Ed021)
 */
export declare const zoraCreator1155FactoryImplConfig: {
    readonly address: {
        readonly 1: "0x777777C338d93e2C7adf08D102d45CA7CC4Ed021";
        readonly 10: "0x777777C338d93e2C7adf08D102d45CA7CC4Ed021";
        readonly 999: "0x777777C338d93e2C7adf08D102d45CA7CC4Ed021";
        readonly 8453: "0x777777C338d93e2C7adf08D102d45CA7CC4Ed021";
        readonly 42161: "0x777777C338d93e2C7adf08D102d45CA7CC4Ed021";
        readonly 81457: "0x777777C338d93e2C7adf08D102d45CA7CC4Ed021";
        readonly 84532: "0x777777C338d93e2C7adf08D102d45CA7CC4Ed021";
        readonly 421614: "0x777777C338d93e2C7adf08D102d45CA7CC4Ed021";
        readonly 7777777: "0x777777C338d93e2C7adf08D102d45CA7CC4Ed021";
        readonly 11155111: "0x777777C338d93e2C7adf08D102d45CA7CC4Ed021";
        readonly 168587773: "0x777777C338d93e2C7adf08D102d45CA7CC4Ed021";
        readonly 999999999: "0x777777C338d93e2C7adf08D102d45CA7CC4Ed021";
    };
    readonly abi: readonly [{
        readonly type: "constructor";
        readonly inputs: readonly [{
            readonly name: "_zora1155Impl";
            readonly internalType: "contract IZoraCreator1155";
            readonly type: "address";
        }, {
            readonly name: "_merkleMinter";
            readonly internalType: "contract IMinter1155";
            readonly type: "address";
        }, {
            readonly name: "_fixedPriceMinter";
            readonly internalType: "contract IMinter1155";
            readonly type: "address";
        }, {
            readonly name: "_redeemMinterFactory";
            readonly internalType: "contract IMinter1155";
            readonly type: "address";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "acceptOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "cancelOwnershipTransfer";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "contractName";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly stateMutability: "pure";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "contractURI";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly stateMutability: "pure";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "contractVersion";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly stateMutability: "pure";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "newContractURI";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "name";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "defaultRoyaltyConfiguration";
            readonly internalType: "struct ICreatorRoyaltiesControl.RoyaltyConfiguration";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "royaltyMintSchedule";
                readonly internalType: "uint32";
                readonly type: "uint32";
            }, {
                readonly name: "royaltyBPS";
                readonly internalType: "uint32";
                readonly type: "uint32";
            }, {
                readonly name: "royaltyRecipient";
                readonly internalType: "address";
                readonly type: "address";
            }];
        }, {
            readonly name: "defaultAdmin";
            readonly internalType: "address payable";
            readonly type: "address";
        }, {
            readonly name: "setupActions";
            readonly internalType: "bytes[]";
            readonly type: "bytes[]";
        }];
        readonly name: "createContract";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "newContractURI";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "name";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "defaultRoyaltyConfiguration";
            readonly internalType: "struct ICreatorRoyaltiesControl.RoyaltyConfiguration";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "royaltyMintSchedule";
                readonly internalType: "uint32";
                readonly type: "uint32";
            }, {
                readonly name: "royaltyBPS";
                readonly internalType: "uint32";
                readonly type: "uint32";
            }, {
                readonly name: "royaltyRecipient";
                readonly internalType: "address";
                readonly type: "address";
            }];
        }, {
            readonly name: "defaultAdmin";
            readonly internalType: "address payable";
            readonly type: "address";
        }, {
            readonly name: "setupActions";
            readonly internalType: "bytes[]";
            readonly type: "bytes[]";
        }];
        readonly name: "createContractDeterministic";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "defaultMinters";
        readonly outputs: readonly [{
            readonly name: "minters";
            readonly internalType: "contract IMinter1155[]";
            readonly type: "address[]";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "msgSender";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "newContractURI";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "name";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "contractAdmin";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "deterministicContractAddress";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "msgSender";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "newContractURI";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "name";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "contractAdmin";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "setupActions";
            readonly internalType: "bytes[]";
            readonly type: "bytes[]";
        }];
        readonly name: "deterministicContractAddressWithSetupActions";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "fixedPriceMinter";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "contract IMinter1155";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "expectedContractAddress";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "newContractURI";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "name";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "defaultRoyaltyConfiguration";
            readonly internalType: "struct ICreatorRoyaltiesControl.RoyaltyConfiguration";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "royaltyMintSchedule";
                readonly internalType: "uint32";
                readonly type: "uint32";
            }, {
                readonly name: "royaltyBPS";
                readonly internalType: "uint32";
                readonly type: "uint32";
            }, {
                readonly name: "royaltyRecipient";
                readonly internalType: "address";
                readonly type: "address";
            }];
        }, {
            readonly name: "defaultAdmin";
            readonly internalType: "address payable";
            readonly type: "address";
        }, {
            readonly name: "setupActions";
            readonly internalType: "bytes[]";
            readonly type: "bytes[]";
        }];
        readonly name: "getOrCreateContractDeterministic";
        readonly outputs: readonly [{
            readonly name: "calculatedContractAddress";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "implementation";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "_initialOwner";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "initialize";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "merkleMinter";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "contract IMinter1155";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "owner";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "pendingOwner";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "proxiableUUID";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "redeemMinterFactory";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "contract IMinter1155";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "resignOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "_newOwner";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "safeTransferOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "_newOwner";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "transferOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "newImplementation";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "upgradeTo";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "newImplementation";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "data";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "upgradeToAndCall";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "zora1155Impl";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "contract IZoraCreator1155";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "previousAdmin";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }, {
            readonly name: "newAdmin";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }];
        readonly name: "AdminChanged";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "beacon";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }];
        readonly name: "BeaconUpgraded";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "calculatedContractAddress";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }];
        readonly name: "ContractAlreadyExistsSkippingDeploy";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [];
        readonly name: "FactorySetup";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "version";
            readonly internalType: "uint8";
            readonly type: "uint8";
            readonly indexed: false;
        }];
        readonly name: "Initialized";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "owner";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "canceledOwner";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }];
        readonly name: "OwnerCanceled";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "owner";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "pendingOwner";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }];
        readonly name: "OwnerPending";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "prevOwner";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "newOwner";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }];
        readonly name: "OwnerUpdated";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "newContract";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "creator";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "defaultAdmin";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "contractURI";
            readonly internalType: "string";
            readonly type: "string";
            readonly indexed: false;
        }, {
            readonly name: "name";
            readonly internalType: "string";
            readonly type: "string";
            readonly indexed: false;
        }, {
            readonly name: "defaultRoyaltyConfiguration";
            readonly internalType: "struct ICreatorRoyaltiesControl.RoyaltyConfiguration";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "royaltyMintSchedule";
                readonly internalType: "uint32";
                readonly type: "uint32";
            }, {
                readonly name: "royaltyBPS";
                readonly internalType: "uint32";
                readonly type: "uint32";
            }, {
                readonly name: "royaltyRecipient";
                readonly internalType: "address";
                readonly type: "address";
            }];
            readonly indexed: false;
        }];
        readonly name: "SetupNewContract";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "implementation";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }];
        readonly name: "Upgraded";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ADDRESS_DELEGATECALL_TO_NON_CONTRACT";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ADDRESS_LOW_LEVEL_CALL_FAILED";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "Constructor_ImplCannotBeZero";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ERC1967_NEW_IMPL_NOT_CONTRACT";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ERC1967_NEW_IMPL_NOT_UUPS";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ERC1967_UNSUPPORTED_PROXIABLEUUID";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "expectedContractAddress";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "calculcatedContractAddress";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "ExpectedContractAddressDoesNotMatchCalculatedContractAddress";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "FUNCTION_MUST_BE_CALLED_THROUGH_ACTIVE_PROXY";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "FUNCTION_MUST_BE_CALLED_THROUGH_DELEGATECALL";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "INITIALIZABLE_CONTRACT_ALREADY_INITIALIZED";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "INITIALIZABLE_CONTRACT_IS_NOT_INITIALIZING";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ONLY_OWNER";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ONLY_PENDING_OWNER";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "OWNER_CANNOT_BE_ZERO_ADDRESS";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "UUPS_UPGRADEABLE_MUST_NOT_BE_CALLED_THROUGH_DELEGATECALL";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "expected";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "actual";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly name: "UpgradeToMismatchedContractName";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ADDRESS_DELEGATECALL_TO_NON_CONTRACT";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ADDRESS_LOW_LEVEL_CALL_FAILED";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "operator";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "user";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "Burn_NotOwnerOrApproved";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "CREATOR_FUNDS_RECIPIENT_NOT_SET";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "reason";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "CallFailed";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "Call_TokenIdMismatch";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "CallerNotZoraCreator1155";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "CanOnlyReduceMaxSupply";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "quantity";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "totalMinted";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "maxSupply";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "CannotMintMoreTokens";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "CannotReduceMaxSupplyBelowMinted";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "proposedAddress";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "Config_TransferHookNotSupported";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ERC1155_ACCOUNTS_AND_IDS_LENGTH_MISMATCH";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ERC1155_ADDRESS_ZERO_IS_NOT_A_VALID_OWNER";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ERC1155_BURN_AMOUNT_EXCEEDS_BALANCE";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ERC1155_BURN_FROM_ZERO_ADDRESS";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ERC1155_CALLER_IS_NOT_TOKEN_OWNER_OR_APPROVED";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ERC1155_ERC1155RECEIVER_REJECTED_TOKENS";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ERC1155_IDS_AND_AMOUNTS_LENGTH_MISMATCH";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ERC1155_INSUFFICIENT_BALANCE_FOR_TRANSFER";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ERC1155_MINT_TO_ZERO_ADDRESS";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ERC1155_MINT_TO_ZERO_ADDRESS";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ERC1155_SETTING_APPROVAL_FOR_SELF";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ERC1155_TRANSFER_TO_NON_ERC1155RECEIVER_IMPLEMENTER";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ERC1155_TRANSFER_TO_ZERO_ADDRESS";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ERC1967_NEW_IMPL_NOT_CONTRACT";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ERC1967_NEW_IMPL_NOT_UUPS";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ERC1967_UNSUPPORTED_PROXIABLEUUID";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "recipient";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "amount";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "ETHWithdrawFailed";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "FUNCTION_MUST_BE_CALLED_THROUGH_ACTIVE_PROXY";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "FUNCTION_MUST_BE_CALLED_THROUGH_DELEGATECALL";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "FirstMinterAddressZero";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "amount";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "contractValue";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "FundsWithdrawInsolvent";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "INITIALIZABLE_CONTRACT_ALREADY_INITIALIZED";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "INITIALIZABLE_CONTRACT_IS_NOT_INITIALIZING";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "INVALID_ADDRESS_ZERO";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "INVALID_ETH_AMOUNT";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "mintTo";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "merkleProof";
            readonly internalType: "bytes32[]";
            readonly type: "bytes32[]";
        }, {
            readonly name: "merkleRoot";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly name: "InvalidMerkleProof";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "InvalidMintSchedule";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "InvalidMintSchedule";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "InvalidPremintVersion";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "InvalidSignature";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "InvalidSignatureVersion";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "magicValue";
            readonly internalType: "bytes4";
            readonly type: "bytes4";
        }];
        readonly name: "InvalidSigner";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "MintNotYetStarted";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "Mint_InsolventSaleTransfer";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "Mint_InvalidMintArrayLength";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "Mint_TokenIDMintNotAllowed";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "Mint_UnknownCommand";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "Mint_ValueTransferFail";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "MinterContractAlreadyExists";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "MinterContractDoesNotExist";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "NewOwnerNeedsToBeAdmin";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "NoRendererForToken";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "NonEthRedemption";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ONLY_CREATE_REFERRAL";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "OnlyAllowedForRegisteredMinter";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "OnlyAllowedForTimedSaleStrategy";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "OnlyTransfersFromZoraMints";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "PremintDeleted";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "caller";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "recipient";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "amount";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "ProtocolRewardsWithdrawFailed";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "renderer";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "RendererNotValid";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "Renderer_NotValidRendererContract";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "SaleEnded";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "SaleHasNotStarted";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "targetContract";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "Sale_CannotCallNonSalesContract";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "expected";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "actual";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "TokenIdMismatch";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "UUPS_UPGRADEABLE_MUST_NOT_BE_CALLED_THROUGH_DELEGATECALL";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "user";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "limit";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "requestedAmount";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "UserExceedsMintLimit";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "user";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "role";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "UserMissingRoleForToken";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "WrongValueSent";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "premintSignerContractFailedToRecoverSigner";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "premintSignerContractNotAContract";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "target";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "AddressEmptyCode";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "account";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "AddressInsufficientBalance";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "AddressZero";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ERC1167FailedCreateClone";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "implementation";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "ERC1967InvalidImplementation";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ERC1967NonPayable";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "EndTimeCannotBeInThePast";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "FailedInnerCall";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "InsufficientFunds";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "InvalidInitialization";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "MarketAlreadyLaunched";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "MarketMinimumNotReached";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "MinimumMarketEthNotMet";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "NeedsToBeAtLeastOneSaleToStartMarket";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "NotInitializing";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "OnlyZoraRewardRecipient";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "owner";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "OwnableInvalidOwner";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "account";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "OwnableUnauthorizedAccount";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ReentrancyGuardReentrantCall";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "RequestMintInvalidUseMint";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ResetSaleNotAvailable";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "SaleAlreadySet";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "SaleEnded";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "SaleHasNotStarted";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "SaleInProgress";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "SaleNotSet";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "SaleV2AlreadyStarted";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "SaleV2Ended";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "SaleV2NotSet";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "StartTimeCannotBeAfterEndTime";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "UUPSUnauthorizedCallContext";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "slot";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly name: "UUPSUnsupportedProxiableUUID";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "WrongValueSent";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ZoraCreator1155ContractNeedsToSupportReduceSupply";
    }];
};
export declare const zoraCreator1155ImplABI: readonly [{
    readonly type: "constructor";
    readonly inputs: readonly [{
        readonly name: "_mintFeeRecipient";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "_upgradeGate";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "_protocolRewards";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "_timedSaleStrategy";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "receive";
    readonly stateMutability: "payable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "CONTRACT_BASE_ID";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "PERMISSION_BIT_ADMIN";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "PERMISSION_BIT_FUNDS_MANAGER";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "PERMISSION_BIT_METADATA";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "PERMISSION_BIT_MINTER";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "PERMISSION_BIT_SALES";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "user";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "permissionBits";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "addPermission";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "recipient";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "quantity";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "data";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "adminMint";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "lastTokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "assumeLastTokenIdMatches";
    readonly outputs: readonly [];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "account";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "id";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "balanceOf";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "accounts";
        readonly internalType: "address[]";
        readonly type: "address[]";
    }, {
        readonly name: "ids";
        readonly internalType: "uint256[]";
        readonly type: "uint256[]";
    }];
    readonly name: "balanceOfBatch";
    readonly outputs: readonly [{
        readonly name: "batchBalances";
        readonly internalType: "uint256[]";
        readonly type: "uint256[]";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "from";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "tokenIds";
        readonly internalType: "uint256[]";
        readonly type: "uint256[]";
    }, {
        readonly name: "amounts";
        readonly internalType: "uint256[]";
        readonly type: "uint256[]";
    }];
    readonly name: "burnBatch";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "data";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "callRenderer";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "salesConfig";
        readonly internalType: "contract IMinter1155";
        readonly type: "address";
    }, {
        readonly name: "data";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "callSale";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "mintPrice";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "quantity";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "computeTotalReward";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "pure";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "config";
    readonly outputs: readonly [{
        readonly name: "owner";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "__gap1";
        readonly internalType: "uint96";
        readonly type: "uint96";
    }, {
        readonly name: "fundsRecipient";
        readonly internalType: "address payable";
        readonly type: "address";
    }, {
        readonly name: "__gap2";
        readonly internalType: "uint96";
        readonly type: "uint96";
    }, {
        readonly name: "transferHook";
        readonly internalType: "contract ITransferHookReceiver";
        readonly type: "address";
    }, {
        readonly name: "__gap3";
        readonly internalType: "uint96";
        readonly type: "uint96";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "contractName";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "contractURI";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "contractVersion";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly stateMutability: "pure";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "createReferrals";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "customRenderers";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "contract IRenderer1155";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "premintConfig";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }, {
        readonly name: "premintVersion";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }, {
        readonly name: "signature";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }, {
        readonly name: "firstMinter";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "premintSignerContract";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "delegateSetupNewToken";
    readonly outputs: readonly [{
        readonly name: "newTokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "";
        readonly internalType: "uint32";
        readonly type: "uint32";
    }];
    readonly name: "delegatedTokenId";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "firstMinters";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "getCreatorRewardRecipient";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "getCustomRenderer";
    readonly outputs: readonly [{
        readonly name: "customRenderer";
        readonly internalType: "contract IRenderer1155";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "getRoyalties";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "struct ICreatorRoyaltiesControl.RoyaltyConfiguration";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "royaltyMintSchedule";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }, {
            readonly name: "royaltyBPS";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }, {
            readonly name: "royaltyRecipient";
            readonly internalType: "address";
            readonly type: "address";
        }];
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "getTokenInfo";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "struct IZoraCreator1155TypesV1.TokenData";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "uri";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "maxSupply";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "totalMinted";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "implementation";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "contractName";
        readonly internalType: "string";
        readonly type: "string";
    }, {
        readonly name: "newContractURI";
        readonly internalType: "string";
        readonly type: "string";
    }, {
        readonly name: "defaultRoyaltyConfiguration";
        readonly internalType: "struct ICreatorRoyaltiesControl.RoyaltyConfiguration";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "royaltyMintSchedule";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }, {
            readonly name: "royaltyBPS";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }, {
            readonly name: "royaltyRecipient";
            readonly internalType: "address";
            readonly type: "address";
        }];
    }, {
        readonly name: "defaultAdmin";
        readonly internalType: "address payable";
        readonly type: "address";
    }, {
        readonly name: "setupActions";
        readonly internalType: "bytes[]";
        readonly type: "bytes[]";
    }];
    readonly name: "initialize";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "user";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "role";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "isAdminOrRole";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "account";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "operator";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "isApprovedForAll";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "metadataRendererContract";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "minter";
        readonly internalType: "contract IMinter1155";
        readonly type: "address";
    }, {
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "quantity";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "rewardsRecipients";
        readonly internalType: "address[]";
        readonly type: "address[]";
    }, {
        readonly name: "minterArguments";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "mint";
    readonly outputs: readonly [];
    readonly stateMutability: "payable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "mintFee";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "data";
        readonly internalType: "bytes[]";
        readonly type: "bytes[]";
    }];
    readonly name: "multicall";
    readonly outputs: readonly [{
        readonly name: "results";
        readonly internalType: "bytes[]";
        readonly type: "bytes[]";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "name";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "nextTokenId";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "owner";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "permissions";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "proxiableUUID";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "newMaxSupply";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "reduceSupply";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "user";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "permissionBits";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "removePermission";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "royalties";
    readonly outputs: readonly [{
        readonly name: "royaltyMintSchedule";
        readonly internalType: "uint32";
        readonly type: "uint32";
    }, {
        readonly name: "royaltyBPS";
        readonly internalType: "uint32";
        readonly type: "uint32";
    }, {
        readonly name: "royaltyRecipient";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "salePrice";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "royaltyInfo";
    readonly outputs: readonly [{
        readonly name: "receiver";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "royaltyAmount";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "from";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "to";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "ids";
        readonly internalType: "uint256[]";
        readonly type: "uint256[]";
    }, {
        readonly name: "amounts";
        readonly internalType: "uint256[]";
        readonly type: "uint256[]";
    }, {
        readonly name: "data";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "safeBatchTransferFrom";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "from";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "to";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "id";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "amount";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "data";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "safeTransferFrom";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "operator";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "approved";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly name: "setApprovalForAll";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "fundsRecipient";
        readonly internalType: "address payable";
        readonly type: "address";
    }];
    readonly name: "setFundsRecipient";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "newOwner";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "setOwner";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "renderer";
        readonly internalType: "contract IRenderer1155";
        readonly type: "address";
    }];
    readonly name: "setTokenMetadataRenderer";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "transferHook";
        readonly internalType: "contract ITransferHookReceiver";
        readonly type: "address";
    }];
    readonly name: "setTransferHook";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "newURI";
        readonly internalType: "string";
        readonly type: "string";
    }, {
        readonly name: "maxSupply";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "setupNewToken";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "newURI";
        readonly internalType: "string";
        readonly type: "string";
    }, {
        readonly name: "maxSupply";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "createReferral";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "setupNewTokenWithCreateReferral";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "supportedPremintSignatureVersions";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string[]";
        readonly type: "string[]";
    }];
    readonly stateMutability: "pure";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "interfaceId";
        readonly internalType: "bytes4";
        readonly type: "bytes4";
    }];
    readonly name: "supportsInterface";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "symbol";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly stateMutability: "pure";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "_newURI";
        readonly internalType: "string";
        readonly type: "string";
    }, {
        readonly name: "_newName";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly name: "updateContractMetadata";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "recipient";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "updateCreateReferral";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "newConfiguration";
        readonly internalType: "struct ICreatorRoyaltiesControl.RoyaltyConfiguration";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "royaltyMintSchedule";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }, {
            readonly name: "royaltyBPS";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }, {
            readonly name: "royaltyRecipient";
            readonly internalType: "address";
            readonly type: "address";
        }];
    }];
    readonly name: "updateRoyaltiesForToken";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "_newURI";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly name: "updateTokenURI";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "newImplementation";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "upgradeTo";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "newImplementation";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "data";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "upgradeToAndCall";
    readonly outputs: readonly [];
    readonly stateMutability: "payable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "uri";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "withdraw";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "previousAdmin";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }, {
        readonly name: "newAdmin";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }];
    readonly name: "AdminChanged";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "account";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "operator";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "approved";
        readonly internalType: "bool";
        readonly type: "bool";
        readonly indexed: false;
    }];
    readonly name: "ApprovalForAll";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "beacon";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }];
    readonly name: "BeaconUpgraded";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "updater";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "updateType";
        readonly internalType: "enum IZoraCreator1155.ConfigUpdate";
        readonly type: "uint8";
        readonly indexed: true;
    }, {
        readonly name: "newConfig";
        readonly internalType: "struct IZoraCreator1155TypesV1.ContractConfig";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "owner";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "__gap1";
            readonly internalType: "uint96";
            readonly type: "uint96";
        }, {
            readonly name: "fundsRecipient";
            readonly internalType: "address payable";
            readonly type: "address";
        }, {
            readonly name: "__gap2";
            readonly internalType: "uint96";
            readonly type: "uint96";
        }, {
            readonly name: "transferHook";
            readonly internalType: "contract ITransferHookReceiver";
            readonly type: "address";
        }, {
            readonly name: "__gap3";
            readonly internalType: "uint96";
            readonly type: "uint96";
        }];
        readonly indexed: false;
    }];
    readonly name: "ConfigUpdated";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "updater";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "uri";
        readonly internalType: "string";
        readonly type: "string";
        readonly indexed: false;
    }, {
        readonly name: "name";
        readonly internalType: "string";
        readonly type: "string";
        readonly indexed: false;
    }];
    readonly name: "ContractMetadataUpdated";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "renderer";
        readonly internalType: "contract IRenderer1155";
        readonly type: "address";
        readonly indexed: false;
    }];
    readonly name: "ContractRendererUpdated";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [];
    readonly name: "ContractURIUpdated";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "structHash";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
        readonly indexed: false;
    }, {
        readonly name: "domainName";
        readonly internalType: "string";
        readonly type: "string";
        readonly indexed: false;
    }, {
        readonly name: "version";
        readonly internalType: "string";
        readonly type: "string";
        readonly indexed: false;
    }, {
        readonly name: "creator";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }, {
        readonly name: "signature";
        readonly internalType: "bytes";
        readonly type: "bytes";
        readonly indexed: false;
    }];
    readonly name: "CreatorAttribution";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "version";
        readonly internalType: "uint8";
        readonly type: "uint8";
        readonly indexed: false;
    }];
    readonly name: "Initialized";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "lastOwner";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }, {
        readonly name: "newOwner";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }];
    readonly name: "OwnershipTransferred";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "sender";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "minter";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: true;
    }, {
        readonly name: "quantity";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }, {
        readonly name: "value";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }];
    readonly name: "Purchased";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: true;
    }, {
        readonly name: "renderer";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "user";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }];
    readonly name: "RendererUpdated";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: true;
    }, {
        readonly name: "sender";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "newURI";
        readonly internalType: "string";
        readonly type: "string";
        readonly indexed: false;
    }, {
        readonly name: "maxSupply";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }];
    readonly name: "SetupNewToken";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "operator";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "from";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "to";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "ids";
        readonly internalType: "uint256[]";
        readonly type: "uint256[]";
        readonly indexed: false;
    }, {
        readonly name: "values";
        readonly internalType: "uint256[]";
        readonly type: "uint256[]";
        readonly indexed: false;
    }];
    readonly name: "TransferBatch";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "operator";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "from";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "to";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "id";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }, {
        readonly name: "value";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }];
    readonly name: "TransferSingle";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "value";
        readonly internalType: "string";
        readonly type: "string";
        readonly indexed: false;
    }, {
        readonly name: "id";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: true;
    }];
    readonly name: "URI";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: true;
    }, {
        readonly name: "user";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "permissions";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: true;
    }];
    readonly name: "UpdatedPermissions";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: true;
    }, {
        readonly name: "user";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "configuration";
        readonly internalType: "struct ICreatorRoyaltiesControl.RoyaltyConfiguration";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "royaltyMintSchedule";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }, {
            readonly name: "royaltyBPS";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }, {
            readonly name: "royaltyRecipient";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly indexed: false;
    }];
    readonly name: "UpdatedRoyalties";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "from";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: true;
    }, {
        readonly name: "tokenData";
        readonly internalType: "struct IZoraCreator1155TypesV1.TokenData";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "uri";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "maxSupply";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "totalMinted";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly indexed: false;
    }];
    readonly name: "UpdatedToken";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "implementation";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }];
    readonly name: "Upgraded";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ADDRESS_DELEGATECALL_TO_NON_CONTRACT";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ADDRESS_LOW_LEVEL_CALL_FAILED";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "operator";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "user";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "Burn_NotOwnerOrApproved";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "CREATOR_FUNDS_RECIPIENT_NOT_SET";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "reason";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "CallFailed";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "Call_TokenIdMismatch";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "CallerNotZoraCreator1155";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "CanOnlyReduceMaxSupply";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "quantity";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "totalMinted";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "maxSupply";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "CannotMintMoreTokens";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "CannotReduceMaxSupplyBelowMinted";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "proposedAddress";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "Config_TransferHookNotSupported";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ERC1155_ACCOUNTS_AND_IDS_LENGTH_MISMATCH";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ERC1155_ADDRESS_ZERO_IS_NOT_A_VALID_OWNER";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ERC1155_BURN_AMOUNT_EXCEEDS_BALANCE";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ERC1155_BURN_FROM_ZERO_ADDRESS";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ERC1155_CALLER_IS_NOT_TOKEN_OWNER_OR_APPROVED";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ERC1155_ERC1155RECEIVER_REJECTED_TOKENS";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ERC1155_IDS_AND_AMOUNTS_LENGTH_MISMATCH";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ERC1155_INSUFFICIENT_BALANCE_FOR_TRANSFER";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ERC1155_MINT_TO_ZERO_ADDRESS";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ERC1155_MINT_TO_ZERO_ADDRESS";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ERC1155_SETTING_APPROVAL_FOR_SELF";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ERC1155_TRANSFER_TO_NON_ERC1155RECEIVER_IMPLEMENTER";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ERC1155_TRANSFER_TO_ZERO_ADDRESS";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ERC1967_NEW_IMPL_NOT_CONTRACT";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ERC1967_NEW_IMPL_NOT_UUPS";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ERC1967_UNSUPPORTED_PROXIABLEUUID";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "recipient";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "amount";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "ETHWithdrawFailed";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "FUNCTION_MUST_BE_CALLED_THROUGH_ACTIVE_PROXY";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "FUNCTION_MUST_BE_CALLED_THROUGH_DELEGATECALL";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "FirstMinterAddressZero";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "amount";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "contractValue";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "FundsWithdrawInsolvent";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "INITIALIZABLE_CONTRACT_ALREADY_INITIALIZED";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "INITIALIZABLE_CONTRACT_IS_NOT_INITIALIZING";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "INVALID_ADDRESS_ZERO";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "INVALID_ETH_AMOUNT";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "mintTo";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "merkleProof";
        readonly internalType: "bytes32[]";
        readonly type: "bytes32[]";
    }, {
        readonly name: "merkleRoot";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly name: "InvalidMerkleProof";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "InvalidMintSchedule";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "InvalidMintSchedule";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "InvalidPremintVersion";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "InvalidSignature";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "InvalidSignatureVersion";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "magicValue";
        readonly internalType: "bytes4";
        readonly type: "bytes4";
    }];
    readonly name: "InvalidSigner";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "MintNotYetStarted";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "Mint_InsolventSaleTransfer";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "Mint_InvalidMintArrayLength";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "Mint_TokenIDMintNotAllowed";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "Mint_UnknownCommand";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "Mint_ValueTransferFail";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "MinterContractAlreadyExists";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "MinterContractDoesNotExist";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "NewOwnerNeedsToBeAdmin";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "NoRendererForToken";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "NonEthRedemption";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ONLY_CREATE_REFERRAL";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "OnlyAllowedForRegisteredMinter";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "OnlyAllowedForTimedSaleStrategy";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "OnlyTransfersFromZoraMints";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "PremintDeleted";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "caller";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "recipient";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "amount";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "ProtocolRewardsWithdrawFailed";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "renderer";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "RendererNotValid";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "Renderer_NotValidRendererContract";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "SaleEnded";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "SaleHasNotStarted";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "targetContract";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "Sale_CannotCallNonSalesContract";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "expected";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "actual";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "TokenIdMismatch";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "UUPS_UPGRADEABLE_MUST_NOT_BE_CALLED_THROUGH_DELEGATECALL";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "user";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "limit";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "requestedAmount";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "UserExceedsMintLimit";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "user";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "role";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "UserMissingRoleForToken";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "WrongValueSent";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "premintSignerContractFailedToRecoverSigner";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "premintSignerContractNotAContract";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "target";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "AddressEmptyCode";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "account";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "AddressInsufficientBalance";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "AddressZero";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ERC1167FailedCreateClone";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "implementation";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "ERC1967InvalidImplementation";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ERC1967NonPayable";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "EndTimeCannotBeInThePast";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "FailedInnerCall";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "InsufficientFunds";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "InvalidInitialization";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "MarketAlreadyLaunched";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "MarketMinimumNotReached";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "MinimumMarketEthNotMet";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "NeedsToBeAtLeastOneSaleToStartMarket";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "NotInitializing";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "OnlyZoraRewardRecipient";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "owner";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "OwnableInvalidOwner";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "account";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "OwnableUnauthorizedAccount";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ReentrancyGuardReentrantCall";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "RequestMintInvalidUseMint";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ResetSaleNotAvailable";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "SaleAlreadySet";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "SaleEnded";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "SaleHasNotStarted";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "SaleInProgress";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "SaleNotSet";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "SaleV2AlreadyStarted";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "SaleV2Ended";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "SaleV2NotSet";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "StartTimeCannotBeAfterEndTime";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "UUPSUnauthorizedCallContext";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "slot";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly name: "UUPSUnsupportedProxiableUUID";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "WrongValueSent";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ZoraCreator1155ContractNeedsToSupportReduceSupply";
}];
/**
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x7777773606e7e46C8Ba8B98C08f5cD218e31d340)
 * - [__View Contract on Op Mainnet Optimism Explorer__](https://optimistic.etherscan.io/address/0x7777773606e7e46C8Ba8B98C08f5cD218e31d340)
 * - [__View Contract on Zora Goerli Testnet Explorer__](https://testnet.explorer.zora.energy/address/0x7777773606e7e46C8Ba8B98C08f5cD218e31d340)
 * - [__View Contract on Base Basescan__](https://basescan.org/address/0x7777773606e7e46C8Ba8B98C08f5cD218e31d340)
 * - [__View Contract on Arbitrum One Arbiscan__](https://arbiscan.io/address/0x7777773606e7e46C8Ba8B98C08f5cD218e31d340)
 * - [__View Contract on Blast Blastscan__](https://blastscan.io/address/0x7777773606e7e46C8Ba8B98C08f5cD218e31d340)
 * - [__View Contract on Base Sepolia Basescan__](https://sepolia.basescan.org/address/0x7777773606e7e46C8Ba8B98C08f5cD218e31d340)
 * - [__View Contract on Arbitrum Sepolia Arbiscan__](https://sepolia.arbiscan.io/address/0x7777773606e7e46C8Ba8B98C08f5cD218e31d340)
 * - [__View Contract on Zora Explorer__](https://explorer.zora.energy/address/0x7777773606e7e46C8Ba8B98C08f5cD218e31d340)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x7777773606e7e46C8Ba8B98C08f5cD218e31d340)
 * - [__View Contract on Blast Sepolia Blastscan__](https://sepolia.blastscan.io/address/0x7777773606e7e46C8Ba8B98C08f5cD218e31d340)
 * - [__View Contract on Zora Sepolia Zora Sepolia Explorer__](https://sepolia.explorer.zora.energy//address/0x7777773606e7e46C8Ba8B98C08f5cD218e31d340)
 */
export declare const zoraCreator1155PremintExecutorImplABI: readonly [{
    readonly type: "constructor";
    readonly inputs: readonly [{
        readonly name: "_factory";
        readonly internalType: "contract IZoraCreator1155Factory";
        readonly type: "address";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "acceptOwnership";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "cancelOwnershipTransfer";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "contractName";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly stateMutability: "pure";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "contractVersion";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly stateMutability: "pure";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "contractConfig";
        readonly internalType: "struct ContractCreationConfig";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "contractAdmin";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "contractURI";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "contractName";
            readonly internalType: "string";
            readonly type: "string";
        }];
    }];
    readonly name: "getContractAddress";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "contractConfig";
        readonly internalType: "struct ContractWithAdditionalAdminsCreationConfig";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "contractAdmin";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "contractURI";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "contractName";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "additionalAdmins";
            readonly internalType: "address[]";
            readonly type: "address[]";
        }];
    }];
    readonly name: "getContractWithAdditionalAdminsAddress";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "implementation";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "_initialOwner";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "initialize";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "signer";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "premintContractConfigContractAdmin";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "contractAddress";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "isAuthorizedToCreatePremint";
    readonly outputs: readonly [{
        readonly name: "isAuthorized";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "signer";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "premintContractConfigContractAdmin";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "contractAddress";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "additionalAdmins";
        readonly internalType: "address[]";
        readonly type: "address[]";
    }];
    readonly name: "isAuthorizedToCreatePremintWithAdditionalAdmins";
    readonly outputs: readonly [{
        readonly name: "isAuthorized";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "contractConfig";
        readonly internalType: "struct ContractCreationConfig";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "contractAdmin";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "contractURI";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "contractName";
            readonly internalType: "string";
            readonly type: "string";
        }];
    }, {
        readonly name: "premintConfig";
        readonly internalType: "struct PremintConfig";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "tokenConfig";
            readonly internalType: "struct TokenCreationConfig";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "tokenURI";
                readonly internalType: "string";
                readonly type: "string";
            }, {
                readonly name: "maxSupply";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "maxTokensPerAddress";
                readonly internalType: "uint64";
                readonly type: "uint64";
            }, {
                readonly name: "pricePerToken";
                readonly internalType: "uint96";
                readonly type: "uint96";
            }, {
                readonly name: "mintStart";
                readonly internalType: "uint64";
                readonly type: "uint64";
            }, {
                readonly name: "mintDuration";
                readonly internalType: "uint64";
                readonly type: "uint64";
            }, {
                readonly name: "royaltyMintSchedule";
                readonly internalType: "uint32";
                readonly type: "uint32";
            }, {
                readonly name: "royaltyBPS";
                readonly internalType: "uint32";
                readonly type: "uint32";
            }, {
                readonly name: "royaltyRecipient";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "fixedPriceMinter";
                readonly internalType: "address";
                readonly type: "address";
            }];
        }, {
            readonly name: "uid";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }, {
            readonly name: "version";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }, {
            readonly name: "deleted";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
    }, {
        readonly name: "signature";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "isValidSignature";
    readonly outputs: readonly [{
        readonly name: "isValid";
        readonly internalType: "bool";
        readonly type: "bool";
    }, {
        readonly name: "contractAddress";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "recoveredSigner";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "collectionAddress";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "mintFee";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "owner";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "pendingOwner";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "contractConfig";
        readonly internalType: "struct ContractWithAdditionalAdminsCreationConfig";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "contractAdmin";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "contractURI";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "contractName";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "additionalAdmins";
            readonly internalType: "address[]";
            readonly type: "address[]";
        }];
    }, {
        readonly name: "premintCollection";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "encodedPremintConfig";
        readonly internalType: "struct PremintConfigEncoded";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "uid";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }, {
            readonly name: "version";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }, {
            readonly name: "deleted";
            readonly internalType: "bool";
            readonly type: "bool";
        }, {
            readonly name: "tokenConfig";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }, {
            readonly name: "premintConfigVersion";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
    }, {
        readonly name: "signature";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }, {
        readonly name: "quantityToMint";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "mintArguments";
        readonly internalType: "struct MintArguments";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "mintRecipient";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "mintComment";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "mintRewardsRecipients";
            readonly internalType: "address[]";
            readonly type: "address[]";
        }];
    }, {
        readonly name: "firstMinter";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "signerContract";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "premint";
    readonly outputs: readonly [{
        readonly name: "premintResult";
        readonly internalType: "struct PremintResult";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "contractAddress";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "createdNewContract";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
    }];
    readonly stateMutability: "payable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "contractAddress";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "uid";
        readonly internalType: "uint32";
        readonly type: "uint32";
    }];
    readonly name: "premintStatus";
    readonly outputs: readonly [{
        readonly name: "contractCreated";
        readonly internalType: "bool";
        readonly type: "bool";
    }, {
        readonly name: "tokenIdForPremint";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "contractConfig";
        readonly internalType: "struct ContractCreationConfig";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "contractAdmin";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "contractURI";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "contractName";
            readonly internalType: "string";
            readonly type: "string";
        }];
    }, {
        readonly name: "premintConfig";
        readonly internalType: "struct PremintConfig";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "tokenConfig";
            readonly internalType: "struct TokenCreationConfig";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "tokenURI";
                readonly internalType: "string";
                readonly type: "string";
            }, {
                readonly name: "maxSupply";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "maxTokensPerAddress";
                readonly internalType: "uint64";
                readonly type: "uint64";
            }, {
                readonly name: "pricePerToken";
                readonly internalType: "uint96";
                readonly type: "uint96";
            }, {
                readonly name: "mintStart";
                readonly internalType: "uint64";
                readonly type: "uint64";
            }, {
                readonly name: "mintDuration";
                readonly internalType: "uint64";
                readonly type: "uint64";
            }, {
                readonly name: "royaltyMintSchedule";
                readonly internalType: "uint32";
                readonly type: "uint32";
            }, {
                readonly name: "royaltyBPS";
                readonly internalType: "uint32";
                readonly type: "uint32";
            }, {
                readonly name: "royaltyRecipient";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "fixedPriceMinter";
                readonly internalType: "address";
                readonly type: "address";
            }];
        }, {
            readonly name: "uid";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }, {
            readonly name: "version";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }, {
            readonly name: "deleted";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
    }, {
        readonly name: "signature";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }, {
        readonly name: "quantityToMint";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "mintArguments";
        readonly internalType: "struct MintArguments";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "mintRecipient";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "mintComment";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "mintRewardsRecipients";
            readonly internalType: "address[]";
            readonly type: "address[]";
        }];
    }];
    readonly name: "premintV1";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "struct PremintResult";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "contractAddress";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "createdNewContract";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
    }];
    readonly stateMutability: "payable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "contractConfig";
        readonly internalType: "struct ContractCreationConfig";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "contractAdmin";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "contractURI";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "contractName";
            readonly internalType: "string";
            readonly type: "string";
        }];
    }, {
        readonly name: "premintConfig";
        readonly internalType: "struct PremintConfigV2";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "tokenConfig";
            readonly internalType: "struct TokenCreationConfigV2";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "tokenURI";
                readonly internalType: "string";
                readonly type: "string";
            }, {
                readonly name: "maxSupply";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "maxTokensPerAddress";
                readonly internalType: "uint64";
                readonly type: "uint64";
            }, {
                readonly name: "pricePerToken";
                readonly internalType: "uint96";
                readonly type: "uint96";
            }, {
                readonly name: "mintStart";
                readonly internalType: "uint64";
                readonly type: "uint64";
            }, {
                readonly name: "mintDuration";
                readonly internalType: "uint64";
                readonly type: "uint64";
            }, {
                readonly name: "royaltyBPS";
                readonly internalType: "uint32";
                readonly type: "uint32";
            }, {
                readonly name: "payoutRecipient";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "fixedPriceMinter";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "createReferral";
                readonly internalType: "address";
                readonly type: "address";
            }];
        }, {
            readonly name: "uid";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }, {
            readonly name: "version";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }, {
            readonly name: "deleted";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
    }, {
        readonly name: "signature";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }, {
        readonly name: "quantityToMint";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "mintArguments";
        readonly internalType: "struct MintArguments";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "mintRecipient";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "mintComment";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "mintRewardsRecipients";
            readonly internalType: "address[]";
            readonly type: "address[]";
        }];
    }];
    readonly name: "premintV2";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "struct PremintResult";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "contractAddress";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "createdNewContract";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
    }];
    readonly stateMutability: "payable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "proxiableUUID";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "resignOwnership";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "_newOwner";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "safeTransferOwnership";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "contractAddress";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "supportedPremintSignatureVersions";
    readonly outputs: readonly [{
        readonly name: "versions";
        readonly internalType: "string[]";
        readonly type: "string[]";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "_newOwner";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "transferOwnership";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "newImplementation";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "upgradeTo";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "newImplementation";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "data";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "upgradeToAndCall";
    readonly outputs: readonly [];
    readonly stateMutability: "payable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "zora1155Factory";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "contract IZoraCreator1155Factory";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "previousAdmin";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }, {
        readonly name: "newAdmin";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }];
    readonly name: "AdminChanged";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "beacon";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }];
    readonly name: "BeaconUpgraded";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "version";
        readonly internalType: "uint8";
        readonly type: "uint8";
        readonly indexed: false;
    }];
    readonly name: "Initialized";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "owner";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "canceledOwner";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }];
    readonly name: "OwnerCanceled";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "owner";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "pendingOwner";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }];
    readonly name: "OwnerPending";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "prevOwner";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "newOwner";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }];
    readonly name: "OwnerUpdated";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "contractAddress";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: true;
    }, {
        readonly name: "createdNewContract";
        readonly internalType: "bool";
        readonly type: "bool";
        readonly indexed: true;
    }, {
        readonly name: "uid";
        readonly internalType: "uint32";
        readonly type: "uint32";
        readonly indexed: false;
    }, {
        readonly name: "contractConfig";
        readonly internalType: "struct ContractCreationConfig";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "contractAdmin";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "contractURI";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "contractName";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly indexed: false;
    }, {
        readonly name: "tokenConfig";
        readonly internalType: "struct TokenCreationConfig";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "tokenURI";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "maxSupply";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "maxTokensPerAddress";
            readonly internalType: "uint64";
            readonly type: "uint64";
        }, {
            readonly name: "pricePerToken";
            readonly internalType: "uint96";
            readonly type: "uint96";
        }, {
            readonly name: "mintStart";
            readonly internalType: "uint64";
            readonly type: "uint64";
        }, {
            readonly name: "mintDuration";
            readonly internalType: "uint64";
            readonly type: "uint64";
        }, {
            readonly name: "royaltyMintSchedule";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }, {
            readonly name: "royaltyBPS";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }, {
            readonly name: "royaltyRecipient";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "fixedPriceMinter";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly indexed: false;
    }, {
        readonly name: "minter";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }, {
        readonly name: "quantityMinted";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }];
    readonly name: "Preminted";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "contractAddress";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: true;
    }, {
        readonly name: "createdNewContract";
        readonly internalType: "bool";
        readonly type: "bool";
        readonly indexed: true;
    }, {
        readonly name: "uid";
        readonly internalType: "uint32";
        readonly type: "uint32";
        readonly indexed: false;
    }, {
        readonly name: "minter";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }, {
        readonly name: "quantityMinted";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }];
    readonly name: "PremintedV2";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "implementation";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }];
    readonly name: "Upgraded";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ADDRESS_DELEGATECALL_TO_NON_CONTRACT";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ADDRESS_LOW_LEVEL_CALL_FAILED";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "operator";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "user";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "Burn_NotOwnerOrApproved";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "CREATOR_FUNDS_RECIPIENT_NOT_SET";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "reason";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "CallFailed";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "Call_TokenIdMismatch";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "CallerNotZoraCreator1155";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "CanOnlyReduceMaxSupply";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "quantity";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "totalMinted";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "maxSupply";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "CannotMintMoreTokens";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "CannotReduceMaxSupplyBelowMinted";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "proposedAddress";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "Config_TransferHookNotSupported";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ERC1155_MINT_TO_ZERO_ADDRESS";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ERC1967_NEW_IMPL_NOT_CONTRACT";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ERC1967_NEW_IMPL_NOT_UUPS";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ERC1967_UNSUPPORTED_PROXIABLEUUID";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ERC20TransferSlippage";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "recipient";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "amount";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "ETHWithdrawFailed";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "FUNCTION_MUST_BE_CALLED_THROUGH_ACTIVE_PROXY";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "FUNCTION_MUST_BE_CALLED_THROUGH_DELEGATECALL";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "FirstMinterAddressZero";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "amount";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "contractValue";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "FundsWithdrawInsolvent";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "INITIALIZABLE_CONTRACT_ALREADY_INITIALIZED";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "INITIALIZABLE_CONTRACT_IS_INITIALIZING";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "INITIALIZABLE_CONTRACT_IS_NOT_INITIALIZING";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "INVALID_ADDRESS_ZERO";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "INVALID_ETH_AMOUNT";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "mintTo";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "merkleProof";
        readonly internalType: "bytes32[]";
        readonly type: "bytes32[]";
    }, {
        readonly name: "merkleRoot";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly name: "InvalidMerkleProof";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "InvalidMintSchedule";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "InvalidPremintVersion";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "InvalidSignature";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "InvalidSignatureVersion";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "magicValue";
        readonly internalType: "bytes4";
        readonly type: "bytes4";
    }];
    readonly name: "InvalidSigner";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "MintNotYetStarted";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "Mint_InsolventSaleTransfer";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "Mint_InvalidMintArrayLength";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "Mint_TokenIDMintNotAllowed";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "Mint_UnknownCommand";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "Mint_ValueTransferFail";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "MinterContractAlreadyExists";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "MinterContractDoesNotExist";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "NewOwnerNeedsToBeAdmin";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "NonEthRedemption";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ONLY_CREATE_REFERRAL";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ONLY_OWNER";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ONLY_PENDING_OWNER";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "OWNER_CANNOT_BE_ZERO_ADDRESS";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "OnlyAllowedForRegisteredMinter";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "OnlyAllowedForTimedSaleStrategy";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "OnlyTransfersFromZoraMints";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "PremintDeleted";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "caller";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "recipient";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "amount";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "ProtocolRewardsWithdrawFailed";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "Renderer_NotValidRendererContract";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "SaleEnded";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "SaleHasNotStarted";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "targetContract";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "Sale_CannotCallNonSalesContract";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "expected";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "actual";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "TokenIdMismatch";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "UUPS_UPGRADEABLE_MUST_NOT_BE_CALLED_THROUGH_DELEGATECALL";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "expected";
        readonly internalType: "string";
        readonly type: "string";
    }, {
        readonly name: "actual";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly name: "UpgradeToMismatchedContractName";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "user";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "limit";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "requestedAmount";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "UserExceedsMintLimit";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "user";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "role";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "UserMissingRoleForToken";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "WrongValueSent";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "premintSignerContractFailedToRecoverSigner";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "premintSignerContractNotAContract";
}];
/**
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x7777773606e7e46C8Ba8B98C08f5cD218e31d340)
 * - [__View Contract on Op Mainnet Optimism Explorer__](https://optimistic.etherscan.io/address/0x7777773606e7e46C8Ba8B98C08f5cD218e31d340)
 * - [__View Contract on Zora Goerli Testnet Explorer__](https://testnet.explorer.zora.energy/address/0x7777773606e7e46C8Ba8B98C08f5cD218e31d340)
 * - [__View Contract on Base Basescan__](https://basescan.org/address/0x7777773606e7e46C8Ba8B98C08f5cD218e31d340)
 * - [__View Contract on Arbitrum One Arbiscan__](https://arbiscan.io/address/0x7777773606e7e46C8Ba8B98C08f5cD218e31d340)
 * - [__View Contract on Blast Blastscan__](https://blastscan.io/address/0x7777773606e7e46C8Ba8B98C08f5cD218e31d340)
 * - [__View Contract on Base Sepolia Basescan__](https://sepolia.basescan.org/address/0x7777773606e7e46C8Ba8B98C08f5cD218e31d340)
 * - [__View Contract on Arbitrum Sepolia Arbiscan__](https://sepolia.arbiscan.io/address/0x7777773606e7e46C8Ba8B98C08f5cD218e31d340)
 * - [__View Contract on Zora Explorer__](https://explorer.zora.energy/address/0x7777773606e7e46C8Ba8B98C08f5cD218e31d340)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x7777773606e7e46C8Ba8B98C08f5cD218e31d340)
 * - [__View Contract on Blast Sepolia Blastscan__](https://sepolia.blastscan.io/address/0x7777773606e7e46C8Ba8B98C08f5cD218e31d340)
 * - [__View Contract on Zora Sepolia Zora Sepolia Explorer__](https://sepolia.explorer.zora.energy//address/0x7777773606e7e46C8Ba8B98C08f5cD218e31d340)
 */
export declare const zoraCreator1155PremintExecutorImplAddress: {
    readonly 1: "0x7777773606e7e46C8Ba8B98C08f5cD218e31d340";
    readonly 10: "0x7777773606e7e46C8Ba8B98C08f5cD218e31d340";
    readonly 999: "0x7777773606e7e46C8Ba8B98C08f5cD218e31d340";
    readonly 8453: "0x7777773606e7e46C8Ba8B98C08f5cD218e31d340";
    readonly 42161: "0x7777773606e7e46C8Ba8B98C08f5cD218e31d340";
    readonly 81457: "0x7777773606e7e46C8Ba8B98C08f5cD218e31d340";
    readonly 84532: "0x7777773606e7e46C8Ba8B98C08f5cD218e31d340";
    readonly 421614: "0x7777773606e7e46C8Ba8B98C08f5cD218e31d340";
    readonly 7777777: "0x7777773606e7e46C8Ba8B98C08f5cD218e31d340";
    readonly 11155111: "0x7777773606e7e46C8Ba8B98C08f5cD218e31d340";
    readonly 168587773: "0x7777773606e7e46C8Ba8B98C08f5cD218e31d340";
    readonly 999999999: "0x7777773606e7e46C8Ba8B98C08f5cD218e31d340";
};
/**
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x7777773606e7e46C8Ba8B98C08f5cD218e31d340)
 * - [__View Contract on Op Mainnet Optimism Explorer__](https://optimistic.etherscan.io/address/0x7777773606e7e46C8Ba8B98C08f5cD218e31d340)
 * - [__View Contract on Zora Goerli Testnet Explorer__](https://testnet.explorer.zora.energy/address/0x7777773606e7e46C8Ba8B98C08f5cD218e31d340)
 * - [__View Contract on Base Basescan__](https://basescan.org/address/0x7777773606e7e46C8Ba8B98C08f5cD218e31d340)
 * - [__View Contract on Arbitrum One Arbiscan__](https://arbiscan.io/address/0x7777773606e7e46C8Ba8B98C08f5cD218e31d340)
 * - [__View Contract on Blast Blastscan__](https://blastscan.io/address/0x7777773606e7e46C8Ba8B98C08f5cD218e31d340)
 * - [__View Contract on Base Sepolia Basescan__](https://sepolia.basescan.org/address/0x7777773606e7e46C8Ba8B98C08f5cD218e31d340)
 * - [__View Contract on Arbitrum Sepolia Arbiscan__](https://sepolia.arbiscan.io/address/0x7777773606e7e46C8Ba8B98C08f5cD218e31d340)
 * - [__View Contract on Zora Explorer__](https://explorer.zora.energy/address/0x7777773606e7e46C8Ba8B98C08f5cD218e31d340)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x7777773606e7e46C8Ba8B98C08f5cD218e31d340)
 * - [__View Contract on Blast Sepolia Blastscan__](https://sepolia.blastscan.io/address/0x7777773606e7e46C8Ba8B98C08f5cD218e31d340)
 * - [__View Contract on Zora Sepolia Zora Sepolia Explorer__](https://sepolia.explorer.zora.energy//address/0x7777773606e7e46C8Ba8B98C08f5cD218e31d340)
 */
export declare const zoraCreator1155PremintExecutorImplConfig: {
    readonly address: {
        readonly 1: "0x7777773606e7e46C8Ba8B98C08f5cD218e31d340";
        readonly 10: "0x7777773606e7e46C8Ba8B98C08f5cD218e31d340";
        readonly 999: "0x7777773606e7e46C8Ba8B98C08f5cD218e31d340";
        readonly 8453: "0x7777773606e7e46C8Ba8B98C08f5cD218e31d340";
        readonly 42161: "0x7777773606e7e46C8Ba8B98C08f5cD218e31d340";
        readonly 81457: "0x7777773606e7e46C8Ba8B98C08f5cD218e31d340";
        readonly 84532: "0x7777773606e7e46C8Ba8B98C08f5cD218e31d340";
        readonly 421614: "0x7777773606e7e46C8Ba8B98C08f5cD218e31d340";
        readonly 7777777: "0x7777773606e7e46C8Ba8B98C08f5cD218e31d340";
        readonly 11155111: "0x7777773606e7e46C8Ba8B98C08f5cD218e31d340";
        readonly 168587773: "0x7777773606e7e46C8Ba8B98C08f5cD218e31d340";
        readonly 999999999: "0x7777773606e7e46C8Ba8B98C08f5cD218e31d340";
    };
    readonly abi: readonly [{
        readonly type: "constructor";
        readonly inputs: readonly [{
            readonly name: "_factory";
            readonly internalType: "contract IZoraCreator1155Factory";
            readonly type: "address";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "acceptOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "cancelOwnershipTransfer";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "contractName";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly stateMutability: "pure";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "contractVersion";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly stateMutability: "pure";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "contractConfig";
            readonly internalType: "struct ContractCreationConfig";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "contractAdmin";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "contractURI";
                readonly internalType: "string";
                readonly type: "string";
            }, {
                readonly name: "contractName";
                readonly internalType: "string";
                readonly type: "string";
            }];
        }];
        readonly name: "getContractAddress";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "contractConfig";
            readonly internalType: "struct ContractWithAdditionalAdminsCreationConfig";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "contractAdmin";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "contractURI";
                readonly internalType: "string";
                readonly type: "string";
            }, {
                readonly name: "contractName";
                readonly internalType: "string";
                readonly type: "string";
            }, {
                readonly name: "additionalAdmins";
                readonly internalType: "address[]";
                readonly type: "address[]";
            }];
        }];
        readonly name: "getContractWithAdditionalAdminsAddress";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "implementation";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "_initialOwner";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "initialize";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "signer";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "premintContractConfigContractAdmin";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "contractAddress";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "isAuthorizedToCreatePremint";
        readonly outputs: readonly [{
            readonly name: "isAuthorized";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "signer";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "premintContractConfigContractAdmin";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "contractAddress";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "additionalAdmins";
            readonly internalType: "address[]";
            readonly type: "address[]";
        }];
        readonly name: "isAuthorizedToCreatePremintWithAdditionalAdmins";
        readonly outputs: readonly [{
            readonly name: "isAuthorized";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "contractConfig";
            readonly internalType: "struct ContractCreationConfig";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "contractAdmin";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "contractURI";
                readonly internalType: "string";
                readonly type: "string";
            }, {
                readonly name: "contractName";
                readonly internalType: "string";
                readonly type: "string";
            }];
        }, {
            readonly name: "premintConfig";
            readonly internalType: "struct PremintConfig";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "tokenConfig";
                readonly internalType: "struct TokenCreationConfig";
                readonly type: "tuple";
                readonly components: readonly [{
                    readonly name: "tokenURI";
                    readonly internalType: "string";
                    readonly type: "string";
                }, {
                    readonly name: "maxSupply";
                    readonly internalType: "uint256";
                    readonly type: "uint256";
                }, {
                    readonly name: "maxTokensPerAddress";
                    readonly internalType: "uint64";
                    readonly type: "uint64";
                }, {
                    readonly name: "pricePerToken";
                    readonly internalType: "uint96";
                    readonly type: "uint96";
                }, {
                    readonly name: "mintStart";
                    readonly internalType: "uint64";
                    readonly type: "uint64";
                }, {
                    readonly name: "mintDuration";
                    readonly internalType: "uint64";
                    readonly type: "uint64";
                }, {
                    readonly name: "royaltyMintSchedule";
                    readonly internalType: "uint32";
                    readonly type: "uint32";
                }, {
                    readonly name: "royaltyBPS";
                    readonly internalType: "uint32";
                    readonly type: "uint32";
                }, {
                    readonly name: "royaltyRecipient";
                    readonly internalType: "address";
                    readonly type: "address";
                }, {
                    readonly name: "fixedPriceMinter";
                    readonly internalType: "address";
                    readonly type: "address";
                }];
            }, {
                readonly name: "uid";
                readonly internalType: "uint32";
                readonly type: "uint32";
            }, {
                readonly name: "version";
                readonly internalType: "uint32";
                readonly type: "uint32";
            }, {
                readonly name: "deleted";
                readonly internalType: "bool";
                readonly type: "bool";
            }];
        }, {
            readonly name: "signature";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "isValidSignature";
        readonly outputs: readonly [{
            readonly name: "isValid";
            readonly internalType: "bool";
            readonly type: "bool";
        }, {
            readonly name: "contractAddress";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "recoveredSigner";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "collectionAddress";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "mintFee";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "owner";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "pendingOwner";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "contractConfig";
            readonly internalType: "struct ContractWithAdditionalAdminsCreationConfig";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "contractAdmin";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "contractURI";
                readonly internalType: "string";
                readonly type: "string";
            }, {
                readonly name: "contractName";
                readonly internalType: "string";
                readonly type: "string";
            }, {
                readonly name: "additionalAdmins";
                readonly internalType: "address[]";
                readonly type: "address[]";
            }];
        }, {
            readonly name: "premintCollection";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "encodedPremintConfig";
            readonly internalType: "struct PremintConfigEncoded";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "uid";
                readonly internalType: "uint32";
                readonly type: "uint32";
            }, {
                readonly name: "version";
                readonly internalType: "uint32";
                readonly type: "uint32";
            }, {
                readonly name: "deleted";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "tokenConfig";
                readonly internalType: "bytes";
                readonly type: "bytes";
            }, {
                readonly name: "premintConfigVersion";
                readonly internalType: "bytes32";
                readonly type: "bytes32";
            }];
        }, {
            readonly name: "signature";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }, {
            readonly name: "quantityToMint";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "mintArguments";
            readonly internalType: "struct MintArguments";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "mintRecipient";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "mintComment";
                readonly internalType: "string";
                readonly type: "string";
            }, {
                readonly name: "mintRewardsRecipients";
                readonly internalType: "address[]";
                readonly type: "address[]";
            }];
        }, {
            readonly name: "firstMinter";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "signerContract";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "premint";
        readonly outputs: readonly [{
            readonly name: "premintResult";
            readonly internalType: "struct PremintResult";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "contractAddress";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "tokenId";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "createdNewContract";
                readonly internalType: "bool";
                readonly type: "bool";
            }];
        }];
        readonly stateMutability: "payable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "contractAddress";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "uid";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }];
        readonly name: "premintStatus";
        readonly outputs: readonly [{
            readonly name: "contractCreated";
            readonly internalType: "bool";
            readonly type: "bool";
        }, {
            readonly name: "tokenIdForPremint";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "contractConfig";
            readonly internalType: "struct ContractCreationConfig";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "contractAdmin";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "contractURI";
                readonly internalType: "string";
                readonly type: "string";
            }, {
                readonly name: "contractName";
                readonly internalType: "string";
                readonly type: "string";
            }];
        }, {
            readonly name: "premintConfig";
            readonly internalType: "struct PremintConfig";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "tokenConfig";
                readonly internalType: "struct TokenCreationConfig";
                readonly type: "tuple";
                readonly components: readonly [{
                    readonly name: "tokenURI";
                    readonly internalType: "string";
                    readonly type: "string";
                }, {
                    readonly name: "maxSupply";
                    readonly internalType: "uint256";
                    readonly type: "uint256";
                }, {
                    readonly name: "maxTokensPerAddress";
                    readonly internalType: "uint64";
                    readonly type: "uint64";
                }, {
                    readonly name: "pricePerToken";
                    readonly internalType: "uint96";
                    readonly type: "uint96";
                }, {
                    readonly name: "mintStart";
                    readonly internalType: "uint64";
                    readonly type: "uint64";
                }, {
                    readonly name: "mintDuration";
                    readonly internalType: "uint64";
                    readonly type: "uint64";
                }, {
                    readonly name: "royaltyMintSchedule";
                    readonly internalType: "uint32";
                    readonly type: "uint32";
                }, {
                    readonly name: "royaltyBPS";
                    readonly internalType: "uint32";
                    readonly type: "uint32";
                }, {
                    readonly name: "royaltyRecipient";
                    readonly internalType: "address";
                    readonly type: "address";
                }, {
                    readonly name: "fixedPriceMinter";
                    readonly internalType: "address";
                    readonly type: "address";
                }];
            }, {
                readonly name: "uid";
                readonly internalType: "uint32";
                readonly type: "uint32";
            }, {
                readonly name: "version";
                readonly internalType: "uint32";
                readonly type: "uint32";
            }, {
                readonly name: "deleted";
                readonly internalType: "bool";
                readonly type: "bool";
            }];
        }, {
            readonly name: "signature";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }, {
            readonly name: "quantityToMint";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "mintArguments";
            readonly internalType: "struct MintArguments";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "mintRecipient";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "mintComment";
                readonly internalType: "string";
                readonly type: "string";
            }, {
                readonly name: "mintRewardsRecipients";
                readonly internalType: "address[]";
                readonly type: "address[]";
            }];
        }];
        readonly name: "premintV1";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "struct PremintResult";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "contractAddress";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "tokenId";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "createdNewContract";
                readonly internalType: "bool";
                readonly type: "bool";
            }];
        }];
        readonly stateMutability: "payable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "contractConfig";
            readonly internalType: "struct ContractCreationConfig";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "contractAdmin";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "contractURI";
                readonly internalType: "string";
                readonly type: "string";
            }, {
                readonly name: "contractName";
                readonly internalType: "string";
                readonly type: "string";
            }];
        }, {
            readonly name: "premintConfig";
            readonly internalType: "struct PremintConfigV2";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "tokenConfig";
                readonly internalType: "struct TokenCreationConfigV2";
                readonly type: "tuple";
                readonly components: readonly [{
                    readonly name: "tokenURI";
                    readonly internalType: "string";
                    readonly type: "string";
                }, {
                    readonly name: "maxSupply";
                    readonly internalType: "uint256";
                    readonly type: "uint256";
                }, {
                    readonly name: "maxTokensPerAddress";
                    readonly internalType: "uint64";
                    readonly type: "uint64";
                }, {
                    readonly name: "pricePerToken";
                    readonly internalType: "uint96";
                    readonly type: "uint96";
                }, {
                    readonly name: "mintStart";
                    readonly internalType: "uint64";
                    readonly type: "uint64";
                }, {
                    readonly name: "mintDuration";
                    readonly internalType: "uint64";
                    readonly type: "uint64";
                }, {
                    readonly name: "royaltyBPS";
                    readonly internalType: "uint32";
                    readonly type: "uint32";
                }, {
                    readonly name: "payoutRecipient";
                    readonly internalType: "address";
                    readonly type: "address";
                }, {
                    readonly name: "fixedPriceMinter";
                    readonly internalType: "address";
                    readonly type: "address";
                }, {
                    readonly name: "createReferral";
                    readonly internalType: "address";
                    readonly type: "address";
                }];
            }, {
                readonly name: "uid";
                readonly internalType: "uint32";
                readonly type: "uint32";
            }, {
                readonly name: "version";
                readonly internalType: "uint32";
                readonly type: "uint32";
            }, {
                readonly name: "deleted";
                readonly internalType: "bool";
                readonly type: "bool";
            }];
        }, {
            readonly name: "signature";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }, {
            readonly name: "quantityToMint";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "mintArguments";
            readonly internalType: "struct MintArguments";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "mintRecipient";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "mintComment";
                readonly internalType: "string";
                readonly type: "string";
            }, {
                readonly name: "mintRewardsRecipients";
                readonly internalType: "address[]";
                readonly type: "address[]";
            }];
        }];
        readonly name: "premintV2";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "struct PremintResult";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "contractAddress";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "tokenId";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "createdNewContract";
                readonly internalType: "bool";
                readonly type: "bool";
            }];
        }];
        readonly stateMutability: "payable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "proxiableUUID";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "resignOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "_newOwner";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "safeTransferOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "contractAddress";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "supportedPremintSignatureVersions";
        readonly outputs: readonly [{
            readonly name: "versions";
            readonly internalType: "string[]";
            readonly type: "string[]";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "_newOwner";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "transferOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "newImplementation";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "upgradeTo";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "newImplementation";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "data";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "upgradeToAndCall";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "zora1155Factory";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "contract IZoraCreator1155Factory";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "previousAdmin";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }, {
            readonly name: "newAdmin";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }];
        readonly name: "AdminChanged";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "beacon";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }];
        readonly name: "BeaconUpgraded";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "version";
            readonly internalType: "uint8";
            readonly type: "uint8";
            readonly indexed: false;
        }];
        readonly name: "Initialized";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "owner";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "canceledOwner";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }];
        readonly name: "OwnerCanceled";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "owner";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "pendingOwner";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }];
        readonly name: "OwnerPending";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "prevOwner";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "newOwner";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }];
        readonly name: "OwnerUpdated";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "contractAddress";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: true;
        }, {
            readonly name: "createdNewContract";
            readonly internalType: "bool";
            readonly type: "bool";
            readonly indexed: true;
        }, {
            readonly name: "uid";
            readonly internalType: "uint32";
            readonly type: "uint32";
            readonly indexed: false;
        }, {
            readonly name: "contractConfig";
            readonly internalType: "struct ContractCreationConfig";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "contractAdmin";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "contractURI";
                readonly internalType: "string";
                readonly type: "string";
            }, {
                readonly name: "contractName";
                readonly internalType: "string";
                readonly type: "string";
            }];
            readonly indexed: false;
        }, {
            readonly name: "tokenConfig";
            readonly internalType: "struct TokenCreationConfig";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "tokenURI";
                readonly internalType: "string";
                readonly type: "string";
            }, {
                readonly name: "maxSupply";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "maxTokensPerAddress";
                readonly internalType: "uint64";
                readonly type: "uint64";
            }, {
                readonly name: "pricePerToken";
                readonly internalType: "uint96";
                readonly type: "uint96";
            }, {
                readonly name: "mintStart";
                readonly internalType: "uint64";
                readonly type: "uint64";
            }, {
                readonly name: "mintDuration";
                readonly internalType: "uint64";
                readonly type: "uint64";
            }, {
                readonly name: "royaltyMintSchedule";
                readonly internalType: "uint32";
                readonly type: "uint32";
            }, {
                readonly name: "royaltyBPS";
                readonly internalType: "uint32";
                readonly type: "uint32";
            }, {
                readonly name: "royaltyRecipient";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "fixedPriceMinter";
                readonly internalType: "address";
                readonly type: "address";
            }];
            readonly indexed: false;
        }, {
            readonly name: "minter";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }, {
            readonly name: "quantityMinted";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: false;
        }];
        readonly name: "Preminted";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "contractAddress";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: true;
        }, {
            readonly name: "createdNewContract";
            readonly internalType: "bool";
            readonly type: "bool";
            readonly indexed: true;
        }, {
            readonly name: "uid";
            readonly internalType: "uint32";
            readonly type: "uint32";
            readonly indexed: false;
        }, {
            readonly name: "minter";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }, {
            readonly name: "quantityMinted";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: false;
        }];
        readonly name: "PremintedV2";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "implementation";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }];
        readonly name: "Upgraded";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ADDRESS_DELEGATECALL_TO_NON_CONTRACT";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ADDRESS_LOW_LEVEL_CALL_FAILED";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "operator";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "user";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "Burn_NotOwnerOrApproved";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "CREATOR_FUNDS_RECIPIENT_NOT_SET";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "reason";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "CallFailed";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "Call_TokenIdMismatch";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "CallerNotZoraCreator1155";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "CanOnlyReduceMaxSupply";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "quantity";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "totalMinted";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "maxSupply";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "CannotMintMoreTokens";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "CannotReduceMaxSupplyBelowMinted";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "proposedAddress";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "Config_TransferHookNotSupported";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ERC1155_MINT_TO_ZERO_ADDRESS";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ERC1967_NEW_IMPL_NOT_CONTRACT";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ERC1967_NEW_IMPL_NOT_UUPS";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ERC1967_UNSUPPORTED_PROXIABLEUUID";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ERC20TransferSlippage";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "recipient";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "amount";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "ETHWithdrawFailed";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "FUNCTION_MUST_BE_CALLED_THROUGH_ACTIVE_PROXY";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "FUNCTION_MUST_BE_CALLED_THROUGH_DELEGATECALL";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "FirstMinterAddressZero";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "amount";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "contractValue";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "FundsWithdrawInsolvent";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "INITIALIZABLE_CONTRACT_ALREADY_INITIALIZED";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "INITIALIZABLE_CONTRACT_IS_INITIALIZING";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "INITIALIZABLE_CONTRACT_IS_NOT_INITIALIZING";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "INVALID_ADDRESS_ZERO";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "INVALID_ETH_AMOUNT";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "mintTo";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "merkleProof";
            readonly internalType: "bytes32[]";
            readonly type: "bytes32[]";
        }, {
            readonly name: "merkleRoot";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly name: "InvalidMerkleProof";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "InvalidMintSchedule";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "InvalidPremintVersion";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "InvalidSignature";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "InvalidSignatureVersion";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "magicValue";
            readonly internalType: "bytes4";
            readonly type: "bytes4";
        }];
        readonly name: "InvalidSigner";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "MintNotYetStarted";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "Mint_InsolventSaleTransfer";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "Mint_InvalidMintArrayLength";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "Mint_TokenIDMintNotAllowed";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "Mint_UnknownCommand";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "Mint_ValueTransferFail";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "MinterContractAlreadyExists";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "MinterContractDoesNotExist";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "NewOwnerNeedsToBeAdmin";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "NonEthRedemption";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ONLY_CREATE_REFERRAL";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ONLY_OWNER";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ONLY_PENDING_OWNER";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "OWNER_CANNOT_BE_ZERO_ADDRESS";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "OnlyAllowedForRegisteredMinter";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "OnlyAllowedForTimedSaleStrategy";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "OnlyTransfersFromZoraMints";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "PremintDeleted";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "caller";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "recipient";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "amount";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "ProtocolRewardsWithdrawFailed";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "Renderer_NotValidRendererContract";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "SaleEnded";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "SaleHasNotStarted";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "targetContract";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "Sale_CannotCallNonSalesContract";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "expected";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "actual";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "TokenIdMismatch";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "UUPS_UPGRADEABLE_MUST_NOT_BE_CALLED_THROUGH_DELEGATECALL";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "expected";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "actual";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly name: "UpgradeToMismatchedContractName";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "user";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "limit";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "requestedAmount";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "UserExceedsMintLimit";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "user";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "role";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "UserMissingRoleForToken";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "WrongValueSent";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "premintSignerContractFailedToRecoverSigner";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "premintSignerContractNotAContract";
    }];
};
/**
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x04E2516A2c207E84a1839755675dfd8eF6302F0a)
 * - [__View Contract on Op Mainnet Optimism Explorer__](https://optimistic.etherscan.io/address/0x3678862f04290E565cCA2EF163BAeb92Bb76790C)
 * - [__View Contract on Zora Goerli Testnet Explorer__](https://testnet.explorer.zora.energy/address/0x04E2516A2c207E84a1839755675dfd8eF6302F0a)
 * - [__View Contract on Base Basescan__](https://basescan.org/address/0x04E2516A2c207E84a1839755675dfd8eF6302F0a)
 * - [__View Contract on Arbitrum One Arbiscan__](https://arbiscan.io/address/0x1Cd1C1f3b8B779B50Db23155F2Cb244FCcA06B21)
 * - [__View Contract on Blast Blastscan__](https://blastscan.io/address/0x3EB144aee170BF62FdA1536e38aF51f08e34A5D0)
 * - [__View Contract on Base Sepolia Basescan__](https://sepolia.basescan.org/address/0xd34872BE0cdb6b09d45FCa067B07f04a1A9aE1aE)
 * - [__View Contract on Arbitrum Sepolia Arbiscan__](https://sepolia.arbiscan.io/address/0x1Cd1C1f3b8B779B50Db23155F2Cb244FCcA06B21)
 * - [__View Contract on Zora Explorer__](https://explorer.zora.energy/address/0x04E2516A2c207E84a1839755675dfd8eF6302F0a)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x1Cd1C1f3b8B779B50Db23155F2Cb244FCcA06B21)
 * - [__View Contract on Blast Sepolia Blastscan__](https://sepolia.blastscan.io/address/0x3EB144aee170BF62FdA1536e38aF51f08e34A5D0)
 * - [__View Contract on Zora Sepolia Zora Sepolia Explorer__](https://sepolia.explorer.zora.energy//address/0x6d28164C3CE04A190D5F9f0f8881fc807EAD975A)
 */
export declare const zoraCreatorFixedPriceSaleStrategyABI: readonly [{
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "contractName";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly stateMutability: "pure";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "contractURI";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly stateMutability: "pure";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "contractVersion";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly stateMutability: "pure";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "tokenContract";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "wallet";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "getMintedPerWallet";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "quantity";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "ethValueSent";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "minterArguments";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "requestMint";
    readonly outputs: readonly [{
        readonly name: "commands";
        readonly internalType: "struct ICreatorCommands.CommandSet";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "commands";
            readonly internalType: "struct ICreatorCommands.Command[]";
            readonly type: "tuple[]";
            readonly components: readonly [{
                readonly name: "method";
                readonly internalType: "enum ICreatorCommands.CreatorActions";
                readonly type: "uint8";
            }, {
                readonly name: "args";
                readonly internalType: "bytes";
                readonly type: "bytes";
            }];
        }, {
            readonly name: "at";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "resetSale";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "tokenContract";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "sale";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "struct ZoraCreatorFixedPriceSaleStrategy.SalesConfig";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "saleStart";
            readonly internalType: "uint64";
            readonly type: "uint64";
        }, {
            readonly name: "saleEnd";
            readonly internalType: "uint64";
            readonly type: "uint64";
        }, {
            readonly name: "maxTokensPerAddress";
            readonly internalType: "uint64";
            readonly type: "uint64";
        }, {
            readonly name: "pricePerToken";
            readonly internalType: "uint96";
            readonly type: "uint96";
        }, {
            readonly name: "fundsRecipient";
            readonly internalType: "address";
            readonly type: "address";
        }];
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "salesConfig";
        readonly internalType: "struct ZoraCreatorFixedPriceSaleStrategy.SalesConfig";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "saleStart";
            readonly internalType: "uint64";
            readonly type: "uint64";
        }, {
            readonly name: "saleEnd";
            readonly internalType: "uint64";
            readonly type: "uint64";
        }, {
            readonly name: "maxTokensPerAddress";
            readonly internalType: "uint64";
            readonly type: "uint64";
        }, {
            readonly name: "pricePerToken";
            readonly internalType: "uint96";
            readonly type: "uint96";
        }, {
            readonly name: "fundsRecipient";
            readonly internalType: "address";
            readonly type: "address";
        }];
    }];
    readonly name: "setSale";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "interfaceId";
        readonly internalType: "bytes4";
        readonly type: "bytes4";
    }];
    readonly name: "supportsInterface";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "pure";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "sender";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "tokenContract";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: true;
    }, {
        readonly name: "quantity";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }, {
        readonly name: "comment";
        readonly internalType: "string";
        readonly type: "string";
        readonly indexed: false;
    }];
    readonly name: "MintComment";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "mediaContract";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: true;
    }, {
        readonly name: "salesConfig";
        readonly internalType: "struct ZoraCreatorFixedPriceSaleStrategy.SalesConfig";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "saleStart";
            readonly internalType: "uint64";
            readonly type: "uint64";
        }, {
            readonly name: "saleEnd";
            readonly internalType: "uint64";
            readonly type: "uint64";
        }, {
            readonly name: "maxTokensPerAddress";
            readonly internalType: "uint64";
            readonly type: "uint64";
        }, {
            readonly name: "pricePerToken";
            readonly internalType: "uint96";
            readonly type: "uint96";
        }, {
            readonly name: "fundsRecipient";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly indexed: false;
    }];
    readonly name: "SaleSet";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "CallerNotZoraCreator1155";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "mintTo";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "merkleProof";
        readonly internalType: "bytes32[]";
        readonly type: "bytes32[]";
    }, {
        readonly name: "merkleRoot";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly name: "InvalidMerkleProof";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "MinterContractAlreadyExists";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "MinterContractDoesNotExist";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "SaleEnded";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "SaleHasNotStarted";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "user";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "limit";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "requestedAmount";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "UserExceedsMintLimit";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "WrongValueSent";
}];
/**
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x04E2516A2c207E84a1839755675dfd8eF6302F0a)
 * - [__View Contract on Op Mainnet Optimism Explorer__](https://optimistic.etherscan.io/address/0x3678862f04290E565cCA2EF163BAeb92Bb76790C)
 * - [__View Contract on Zora Goerli Testnet Explorer__](https://testnet.explorer.zora.energy/address/0x04E2516A2c207E84a1839755675dfd8eF6302F0a)
 * - [__View Contract on Base Basescan__](https://basescan.org/address/0x04E2516A2c207E84a1839755675dfd8eF6302F0a)
 * - [__View Contract on Arbitrum One Arbiscan__](https://arbiscan.io/address/0x1Cd1C1f3b8B779B50Db23155F2Cb244FCcA06B21)
 * - [__View Contract on Blast Blastscan__](https://blastscan.io/address/0x3EB144aee170BF62FdA1536e38aF51f08e34A5D0)
 * - [__View Contract on Base Sepolia Basescan__](https://sepolia.basescan.org/address/0xd34872BE0cdb6b09d45FCa067B07f04a1A9aE1aE)
 * - [__View Contract on Arbitrum Sepolia Arbiscan__](https://sepolia.arbiscan.io/address/0x1Cd1C1f3b8B779B50Db23155F2Cb244FCcA06B21)
 * - [__View Contract on Zora Explorer__](https://explorer.zora.energy/address/0x04E2516A2c207E84a1839755675dfd8eF6302F0a)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x1Cd1C1f3b8B779B50Db23155F2Cb244FCcA06B21)
 * - [__View Contract on Blast Sepolia Blastscan__](https://sepolia.blastscan.io/address/0x3EB144aee170BF62FdA1536e38aF51f08e34A5D0)
 * - [__View Contract on Zora Sepolia Zora Sepolia Explorer__](https://sepolia.explorer.zora.energy//address/0x6d28164C3CE04A190D5F9f0f8881fc807EAD975A)
 */
export declare const zoraCreatorFixedPriceSaleStrategyAddress: {
    readonly 1: "0x04E2516A2c207E84a1839755675dfd8eF6302F0a";
    readonly 10: "0x3678862f04290E565cCA2EF163BAeb92Bb76790C";
    readonly 999: "0x04E2516A2c207E84a1839755675dfd8eF6302F0a";
    readonly 8453: "0x04E2516A2c207E84a1839755675dfd8eF6302F0a";
    readonly 42161: "0x1Cd1C1f3b8B779B50Db23155F2Cb244FCcA06B21";
    readonly 81457: "0x3EB144aee170BF62FdA1536e38aF51f08e34A5D0";
    readonly 84532: "0xd34872BE0cdb6b09d45FCa067B07f04a1A9aE1aE";
    readonly 421614: "0x1Cd1C1f3b8B779B50Db23155F2Cb244FCcA06B21";
    readonly 7777777: "0x04E2516A2c207E84a1839755675dfd8eF6302F0a";
    readonly 11155111: "0x1Cd1C1f3b8B779B50Db23155F2Cb244FCcA06B21";
    readonly 168587773: "0x3EB144aee170BF62FdA1536e38aF51f08e34A5D0";
    readonly 999999999: "0x6d28164C3CE04A190D5F9f0f8881fc807EAD975A";
};
/**
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x04E2516A2c207E84a1839755675dfd8eF6302F0a)
 * - [__View Contract on Op Mainnet Optimism Explorer__](https://optimistic.etherscan.io/address/0x3678862f04290E565cCA2EF163BAeb92Bb76790C)
 * - [__View Contract on Zora Goerli Testnet Explorer__](https://testnet.explorer.zora.energy/address/0x04E2516A2c207E84a1839755675dfd8eF6302F0a)
 * - [__View Contract on Base Basescan__](https://basescan.org/address/0x04E2516A2c207E84a1839755675dfd8eF6302F0a)
 * - [__View Contract on Arbitrum One Arbiscan__](https://arbiscan.io/address/0x1Cd1C1f3b8B779B50Db23155F2Cb244FCcA06B21)
 * - [__View Contract on Blast Blastscan__](https://blastscan.io/address/0x3EB144aee170BF62FdA1536e38aF51f08e34A5D0)
 * - [__View Contract on Base Sepolia Basescan__](https://sepolia.basescan.org/address/0xd34872BE0cdb6b09d45FCa067B07f04a1A9aE1aE)
 * - [__View Contract on Arbitrum Sepolia Arbiscan__](https://sepolia.arbiscan.io/address/0x1Cd1C1f3b8B779B50Db23155F2Cb244FCcA06B21)
 * - [__View Contract on Zora Explorer__](https://explorer.zora.energy/address/0x04E2516A2c207E84a1839755675dfd8eF6302F0a)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x1Cd1C1f3b8B779B50Db23155F2Cb244FCcA06B21)
 * - [__View Contract on Blast Sepolia Blastscan__](https://sepolia.blastscan.io/address/0x3EB144aee170BF62FdA1536e38aF51f08e34A5D0)
 * - [__View Contract on Zora Sepolia Zora Sepolia Explorer__](https://sepolia.explorer.zora.energy//address/0x6d28164C3CE04A190D5F9f0f8881fc807EAD975A)
 */
export declare const zoraCreatorFixedPriceSaleStrategyConfig: {
    readonly address: {
        readonly 1: "0x04E2516A2c207E84a1839755675dfd8eF6302F0a";
        readonly 10: "0x3678862f04290E565cCA2EF163BAeb92Bb76790C";
        readonly 999: "0x04E2516A2c207E84a1839755675dfd8eF6302F0a";
        readonly 8453: "0x04E2516A2c207E84a1839755675dfd8eF6302F0a";
        readonly 42161: "0x1Cd1C1f3b8B779B50Db23155F2Cb244FCcA06B21";
        readonly 81457: "0x3EB144aee170BF62FdA1536e38aF51f08e34A5D0";
        readonly 84532: "0xd34872BE0cdb6b09d45FCa067B07f04a1A9aE1aE";
        readonly 421614: "0x1Cd1C1f3b8B779B50Db23155F2Cb244FCcA06B21";
        readonly 7777777: "0x04E2516A2c207E84a1839755675dfd8eF6302F0a";
        readonly 11155111: "0x1Cd1C1f3b8B779B50Db23155F2Cb244FCcA06B21";
        readonly 168587773: "0x3EB144aee170BF62FdA1536e38aF51f08e34A5D0";
        readonly 999999999: "0x6d28164C3CE04A190D5F9f0f8881fc807EAD975A";
    };
    readonly abi: readonly [{
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "contractName";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly stateMutability: "pure";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "contractURI";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly stateMutability: "pure";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "contractVersion";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly stateMutability: "pure";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "tokenContract";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "wallet";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "getMintedPerWallet";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "quantity";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "ethValueSent";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "minterArguments";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "requestMint";
        readonly outputs: readonly [{
            readonly name: "commands";
            readonly internalType: "struct ICreatorCommands.CommandSet";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "commands";
                readonly internalType: "struct ICreatorCommands.Command[]";
                readonly type: "tuple[]";
                readonly components: readonly [{
                    readonly name: "method";
                    readonly internalType: "enum ICreatorCommands.CreatorActions";
                    readonly type: "uint8";
                }, {
                    readonly name: "args";
                    readonly internalType: "bytes";
                    readonly type: "bytes";
                }];
            }, {
                readonly name: "at";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }];
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "resetSale";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "tokenContract";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "sale";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "struct ZoraCreatorFixedPriceSaleStrategy.SalesConfig";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "saleStart";
                readonly internalType: "uint64";
                readonly type: "uint64";
            }, {
                readonly name: "saleEnd";
                readonly internalType: "uint64";
                readonly type: "uint64";
            }, {
                readonly name: "maxTokensPerAddress";
                readonly internalType: "uint64";
                readonly type: "uint64";
            }, {
                readonly name: "pricePerToken";
                readonly internalType: "uint96";
                readonly type: "uint96";
            }, {
                readonly name: "fundsRecipient";
                readonly internalType: "address";
                readonly type: "address";
            }];
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "salesConfig";
            readonly internalType: "struct ZoraCreatorFixedPriceSaleStrategy.SalesConfig";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "saleStart";
                readonly internalType: "uint64";
                readonly type: "uint64";
            }, {
                readonly name: "saleEnd";
                readonly internalType: "uint64";
                readonly type: "uint64";
            }, {
                readonly name: "maxTokensPerAddress";
                readonly internalType: "uint64";
                readonly type: "uint64";
            }, {
                readonly name: "pricePerToken";
                readonly internalType: "uint96";
                readonly type: "uint96";
            }, {
                readonly name: "fundsRecipient";
                readonly internalType: "address";
                readonly type: "address";
            }];
        }];
        readonly name: "setSale";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "interfaceId";
            readonly internalType: "bytes4";
            readonly type: "bytes4";
        }];
        readonly name: "supportsInterface";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "pure";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "sender";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "tokenContract";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: true;
        }, {
            readonly name: "quantity";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: false;
        }, {
            readonly name: "comment";
            readonly internalType: "string";
            readonly type: "string";
            readonly indexed: false;
        }];
        readonly name: "MintComment";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "mediaContract";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: true;
        }, {
            readonly name: "salesConfig";
            readonly internalType: "struct ZoraCreatorFixedPriceSaleStrategy.SalesConfig";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "saleStart";
                readonly internalType: "uint64";
                readonly type: "uint64";
            }, {
                readonly name: "saleEnd";
                readonly internalType: "uint64";
                readonly type: "uint64";
            }, {
                readonly name: "maxTokensPerAddress";
                readonly internalType: "uint64";
                readonly type: "uint64";
            }, {
                readonly name: "pricePerToken";
                readonly internalType: "uint96";
                readonly type: "uint96";
            }, {
                readonly name: "fundsRecipient";
                readonly internalType: "address";
                readonly type: "address";
            }];
            readonly indexed: false;
        }];
        readonly name: "SaleSet";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "CallerNotZoraCreator1155";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "mintTo";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "merkleProof";
            readonly internalType: "bytes32[]";
            readonly type: "bytes32[]";
        }, {
            readonly name: "merkleRoot";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly name: "InvalidMerkleProof";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "MinterContractAlreadyExists";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "MinterContractDoesNotExist";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "SaleEnded";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "SaleHasNotStarted";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "user";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "limit";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "requestedAmount";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "UserExceedsMintLimit";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "WrongValueSent";
    }];
};
/**
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xf48172CA3B6068B20eE4917Eb27b5472f1f272C7)
 * - [__View Contract on Op Mainnet Optimism Explorer__](https://optimistic.etherscan.io/address/0x899ce31dF6C6Af81203AcAaD285bF539234eF4b8)
 * - [__View Contract on Zora Goerli Testnet Explorer__](https://testnet.explorer.zora.energy/address/0xf48172CA3B6068B20eE4917Eb27b5472f1f272C7)
 * - [__View Contract on Base Basescan__](https://basescan.org/address/0xf48172CA3B6068B20eE4917Eb27b5472f1f272C7)
 * - [__View Contract on Arbitrum One Arbiscan__](https://arbiscan.io/address/0xe770E6f19aecF8ef3145A50087999b5556aB3610)
 * - [__View Contract on Blast Blastscan__](https://blastscan.io/address/0xB9C997FcC46a27331CC986cc2416ee99C1d506c3)
 * - [__View Contract on Base Sepolia Basescan__](https://sepolia.basescan.org/address/0x3E8524770adD176bE381a0529E09f1c6c3502A5a)
 * - [__View Contract on Arbitrum Sepolia Arbiscan__](https://sepolia.arbiscan.io/address/0xe770E6f19aecF8ef3145A50087999b5556aB3610)
 * - [__View Contract on Zora Explorer__](https://explorer.zora.energy/address/0xf48172CA3B6068B20eE4917Eb27b5472f1f272C7)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0xe770E6f19aecF8ef3145A50087999b5556aB3610)
 * - [__View Contract on Blast Sepolia Blastscan__](https://sepolia.blastscan.io/address/0xB9C997FcC46a27331CC986cc2416ee99C1d506c3)
 * - [__View Contract on Zora Sepolia Zora Sepolia Explorer__](https://sepolia.explorer.zora.energy//address/0x5e5fD4b758076BAD940db0284b711A67E8a3B88c)
 */
export declare const zoraCreatorMerkleMinterStrategyABI: readonly [{
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "allowedMerkles";
    readonly outputs: readonly [{
        readonly name: "presaleStart";
        readonly internalType: "uint64";
        readonly type: "uint64";
    }, {
        readonly name: "presaleEnd";
        readonly internalType: "uint64";
        readonly type: "uint64";
    }, {
        readonly name: "fundsRecipient";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "merkleRoot";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "contractName";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly stateMutability: "pure";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "contractURI";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly stateMutability: "pure";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "contractVersion";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly stateMutability: "pure";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "tokenContract";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "wallet";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "getMintedPerWallet";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "quantity";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "ethValueSent";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "minterArguments";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "requestMint";
    readonly outputs: readonly [{
        readonly name: "commands";
        readonly internalType: "struct ICreatorCommands.CommandSet";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "commands";
            readonly internalType: "struct ICreatorCommands.Command[]";
            readonly type: "tuple[]";
            readonly components: readonly [{
                readonly name: "method";
                readonly internalType: "enum ICreatorCommands.CreatorActions";
                readonly type: "uint8";
            }, {
                readonly name: "args";
                readonly internalType: "bytes";
                readonly type: "bytes";
            }];
        }, {
            readonly name: "at";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "resetSale";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "tokenContract";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "sale";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "struct ZoraCreatorMerkleMinterStrategy.MerkleSaleSettings";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "presaleStart";
            readonly internalType: "uint64";
            readonly type: "uint64";
        }, {
            readonly name: "presaleEnd";
            readonly internalType: "uint64";
            readonly type: "uint64";
        }, {
            readonly name: "fundsRecipient";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "merkleRoot";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "merkleSaleSettings";
        readonly internalType: "struct ZoraCreatorMerkleMinterStrategy.MerkleSaleSettings";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "presaleStart";
            readonly internalType: "uint64";
            readonly type: "uint64";
        }, {
            readonly name: "presaleEnd";
            readonly internalType: "uint64";
            readonly type: "uint64";
        }, {
            readonly name: "fundsRecipient";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "merkleRoot";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
    }];
    readonly name: "setSale";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "interfaceId";
        readonly internalType: "bytes4";
        readonly type: "bytes4";
    }];
    readonly name: "supportsInterface";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "pure";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "mediaContract";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: true;
    }, {
        readonly name: "merkleSaleSettings";
        readonly internalType: "struct ZoraCreatorMerkleMinterStrategy.MerkleSaleSettings";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "presaleStart";
            readonly internalType: "uint64";
            readonly type: "uint64";
        }, {
            readonly name: "presaleEnd";
            readonly internalType: "uint64";
            readonly type: "uint64";
        }, {
            readonly name: "fundsRecipient";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "merkleRoot";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly indexed: false;
    }];
    readonly name: "SaleSet";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "CallerNotZoraCreator1155";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "mintTo";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "merkleProof";
        readonly internalType: "bytes32[]";
        readonly type: "bytes32[]";
    }, {
        readonly name: "merkleRoot";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly name: "InvalidMerkleProof";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "MerkleClaimsExceeded";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "MinterContractAlreadyExists";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "MinterContractDoesNotExist";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "SaleEnded";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "SaleHasNotStarted";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "user";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "limit";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "requestedAmount";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "UserExceedsMintLimit";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "WrongValueSent";
}];
/**
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xf48172CA3B6068B20eE4917Eb27b5472f1f272C7)
 * - [__View Contract on Op Mainnet Optimism Explorer__](https://optimistic.etherscan.io/address/0x899ce31dF6C6Af81203AcAaD285bF539234eF4b8)
 * - [__View Contract on Zora Goerli Testnet Explorer__](https://testnet.explorer.zora.energy/address/0xf48172CA3B6068B20eE4917Eb27b5472f1f272C7)
 * - [__View Contract on Base Basescan__](https://basescan.org/address/0xf48172CA3B6068B20eE4917Eb27b5472f1f272C7)
 * - [__View Contract on Arbitrum One Arbiscan__](https://arbiscan.io/address/0xe770E6f19aecF8ef3145A50087999b5556aB3610)
 * - [__View Contract on Blast Blastscan__](https://blastscan.io/address/0xB9C997FcC46a27331CC986cc2416ee99C1d506c3)
 * - [__View Contract on Base Sepolia Basescan__](https://sepolia.basescan.org/address/0x3E8524770adD176bE381a0529E09f1c6c3502A5a)
 * - [__View Contract on Arbitrum Sepolia Arbiscan__](https://sepolia.arbiscan.io/address/0xe770E6f19aecF8ef3145A50087999b5556aB3610)
 * - [__View Contract on Zora Explorer__](https://explorer.zora.energy/address/0xf48172CA3B6068B20eE4917Eb27b5472f1f272C7)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0xe770E6f19aecF8ef3145A50087999b5556aB3610)
 * - [__View Contract on Blast Sepolia Blastscan__](https://sepolia.blastscan.io/address/0xB9C997FcC46a27331CC986cc2416ee99C1d506c3)
 * - [__View Contract on Zora Sepolia Zora Sepolia Explorer__](https://sepolia.explorer.zora.energy//address/0x5e5fD4b758076BAD940db0284b711A67E8a3B88c)
 */
export declare const zoraCreatorMerkleMinterStrategyAddress: {
    readonly 1: "0xf48172CA3B6068B20eE4917Eb27b5472f1f272C7";
    readonly 10: "0x899ce31dF6C6Af81203AcAaD285bF539234eF4b8";
    readonly 999: "0xf48172CA3B6068B20eE4917Eb27b5472f1f272C7";
    readonly 8453: "0xf48172CA3B6068B20eE4917Eb27b5472f1f272C7";
    readonly 42161: "0xe770E6f19aecF8ef3145A50087999b5556aB3610";
    readonly 81457: "0xB9C997FcC46a27331CC986cc2416ee99C1d506c3";
    readonly 84532: "0x3E8524770adD176bE381a0529E09f1c6c3502A5a";
    readonly 421614: "0xe770E6f19aecF8ef3145A50087999b5556aB3610";
    readonly 7777777: "0xf48172CA3B6068B20eE4917Eb27b5472f1f272C7";
    readonly 11155111: "0xe770E6f19aecF8ef3145A50087999b5556aB3610";
    readonly 168587773: "0xB9C997FcC46a27331CC986cc2416ee99C1d506c3";
    readonly 999999999: "0x5e5fD4b758076BAD940db0284b711A67E8a3B88c";
};
/**
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0xf48172CA3B6068B20eE4917Eb27b5472f1f272C7)
 * - [__View Contract on Op Mainnet Optimism Explorer__](https://optimistic.etherscan.io/address/0x899ce31dF6C6Af81203AcAaD285bF539234eF4b8)
 * - [__View Contract on Zora Goerli Testnet Explorer__](https://testnet.explorer.zora.energy/address/0xf48172CA3B6068B20eE4917Eb27b5472f1f272C7)
 * - [__View Contract on Base Basescan__](https://basescan.org/address/0xf48172CA3B6068B20eE4917Eb27b5472f1f272C7)
 * - [__View Contract on Arbitrum One Arbiscan__](https://arbiscan.io/address/0xe770E6f19aecF8ef3145A50087999b5556aB3610)
 * - [__View Contract on Blast Blastscan__](https://blastscan.io/address/0xB9C997FcC46a27331CC986cc2416ee99C1d506c3)
 * - [__View Contract on Base Sepolia Basescan__](https://sepolia.basescan.org/address/0x3E8524770adD176bE381a0529E09f1c6c3502A5a)
 * - [__View Contract on Arbitrum Sepolia Arbiscan__](https://sepolia.arbiscan.io/address/0xe770E6f19aecF8ef3145A50087999b5556aB3610)
 * - [__View Contract on Zora Explorer__](https://explorer.zora.energy/address/0xf48172CA3B6068B20eE4917Eb27b5472f1f272C7)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0xe770E6f19aecF8ef3145A50087999b5556aB3610)
 * - [__View Contract on Blast Sepolia Blastscan__](https://sepolia.blastscan.io/address/0xB9C997FcC46a27331CC986cc2416ee99C1d506c3)
 * - [__View Contract on Zora Sepolia Zora Sepolia Explorer__](https://sepolia.explorer.zora.energy//address/0x5e5fD4b758076BAD940db0284b711A67E8a3B88c)
 */
export declare const zoraCreatorMerkleMinterStrategyConfig: {
    readonly address: {
        readonly 1: "0xf48172CA3B6068B20eE4917Eb27b5472f1f272C7";
        readonly 10: "0x899ce31dF6C6Af81203AcAaD285bF539234eF4b8";
        readonly 999: "0xf48172CA3B6068B20eE4917Eb27b5472f1f272C7";
        readonly 8453: "0xf48172CA3B6068B20eE4917Eb27b5472f1f272C7";
        readonly 42161: "0xe770E6f19aecF8ef3145A50087999b5556aB3610";
        readonly 81457: "0xB9C997FcC46a27331CC986cc2416ee99C1d506c3";
        readonly 84532: "0x3E8524770adD176bE381a0529E09f1c6c3502A5a";
        readonly 421614: "0xe770E6f19aecF8ef3145A50087999b5556aB3610";
        readonly 7777777: "0xf48172CA3B6068B20eE4917Eb27b5472f1f272C7";
        readonly 11155111: "0xe770E6f19aecF8ef3145A50087999b5556aB3610";
        readonly 168587773: "0xB9C997FcC46a27331CC986cc2416ee99C1d506c3";
        readonly 999999999: "0x5e5fD4b758076BAD940db0284b711A67E8a3B88c";
    };
    readonly abi: readonly [{
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "allowedMerkles";
        readonly outputs: readonly [{
            readonly name: "presaleStart";
            readonly internalType: "uint64";
            readonly type: "uint64";
        }, {
            readonly name: "presaleEnd";
            readonly internalType: "uint64";
            readonly type: "uint64";
        }, {
            readonly name: "fundsRecipient";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "merkleRoot";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "contractName";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly stateMutability: "pure";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "contractURI";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly stateMutability: "pure";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "contractVersion";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly stateMutability: "pure";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "tokenContract";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "wallet";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "getMintedPerWallet";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "quantity";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "ethValueSent";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "minterArguments";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "requestMint";
        readonly outputs: readonly [{
            readonly name: "commands";
            readonly internalType: "struct ICreatorCommands.CommandSet";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "commands";
                readonly internalType: "struct ICreatorCommands.Command[]";
                readonly type: "tuple[]";
                readonly components: readonly [{
                    readonly name: "method";
                    readonly internalType: "enum ICreatorCommands.CreatorActions";
                    readonly type: "uint8";
                }, {
                    readonly name: "args";
                    readonly internalType: "bytes";
                    readonly type: "bytes";
                }];
            }, {
                readonly name: "at";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }];
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "resetSale";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "tokenContract";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "sale";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "struct ZoraCreatorMerkleMinterStrategy.MerkleSaleSettings";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "presaleStart";
                readonly internalType: "uint64";
                readonly type: "uint64";
            }, {
                readonly name: "presaleEnd";
                readonly internalType: "uint64";
                readonly type: "uint64";
            }, {
                readonly name: "fundsRecipient";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "merkleRoot";
                readonly internalType: "bytes32";
                readonly type: "bytes32";
            }];
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "merkleSaleSettings";
            readonly internalType: "struct ZoraCreatorMerkleMinterStrategy.MerkleSaleSettings";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "presaleStart";
                readonly internalType: "uint64";
                readonly type: "uint64";
            }, {
                readonly name: "presaleEnd";
                readonly internalType: "uint64";
                readonly type: "uint64";
            }, {
                readonly name: "fundsRecipient";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "merkleRoot";
                readonly internalType: "bytes32";
                readonly type: "bytes32";
            }];
        }];
        readonly name: "setSale";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "interfaceId";
            readonly internalType: "bytes4";
            readonly type: "bytes4";
        }];
        readonly name: "supportsInterface";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "pure";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "mediaContract";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: true;
        }, {
            readonly name: "merkleSaleSettings";
            readonly internalType: "struct ZoraCreatorMerkleMinterStrategy.MerkleSaleSettings";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "presaleStart";
                readonly internalType: "uint64";
                readonly type: "uint64";
            }, {
                readonly name: "presaleEnd";
                readonly internalType: "uint64";
                readonly type: "uint64";
            }, {
                readonly name: "fundsRecipient";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "merkleRoot";
                readonly internalType: "bytes32";
                readonly type: "bytes32";
            }];
            readonly indexed: false;
        }];
        readonly name: "SaleSet";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "CallerNotZoraCreator1155";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "mintTo";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "merkleProof";
            readonly internalType: "bytes32[]";
            readonly type: "bytes32[]";
        }, {
            readonly name: "merkleRoot";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly name: "InvalidMerkleProof";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "MerkleClaimsExceeded";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "MinterContractAlreadyExists";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "MinterContractDoesNotExist";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "SaleEnded";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "SaleHasNotStarted";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "user";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "limit";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "requestedAmount";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "UserExceedsMintLimit";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "WrongValueSent";
    }];
};
/**
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x78964965cF77850224513a367f899435C5B69174)
 * - [__View Contract on Op Mainnet Optimism Explorer__](https://optimistic.etherscan.io/address/0x1B28A04b7eB7b93f920ddF2021aa3fAE065395f2)
 * - [__View Contract on Zora Goerli Testnet Explorer__](https://testnet.explorer.zora.energy/address/0x78964965cF77850224513a367f899435C5B69174)
 * - [__View Contract on Base Basescan__](https://basescan.org/address/0x78964965cF77850224513a367f899435C5B69174)
 * - [__View Contract on Arbitrum One Arbiscan__](https://arbiscan.io/address/0x69bB4A24EBD8b1B87AF4538E0Ca3075b7E398c3D)
 * - [__View Contract on Blast Blastscan__](https://blastscan.io/address/0x7A0dE1B1f5420Df5D946878fBe2cF109011BE614)
 * - [__View Contract on Base Sepolia Basescan__](https://sepolia.basescan.org/address/0x805E0a08dE70f85C01F7848370d5e3fc08aAd0ea)
 * - [__View Contract on Arbitrum Sepolia Arbiscan__](https://sepolia.arbiscan.io/address/0x69bB4A24EBD8b1B87AF4538E0Ca3075b7E398c3D)
 * - [__View Contract on Zora Explorer__](https://explorer.zora.energy/address/0x78964965cF77850224513a367f899435C5B69174)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x69bB4A24EBD8b1B87AF4538E0Ca3075b7E398c3D)
 * - [__View Contract on Blast Sepolia Blastscan__](https://sepolia.blastscan.io/address/0x7A0dE1B1f5420Df5D946878fBe2cF109011BE614)
 * - [__View Contract on Zora Sepolia Zora Sepolia Explorer__](https://sepolia.explorer.zora.energy//address/0x25cFb6dd9cDE8425e781d6718a29Ccbca3F038d6)
 */
export declare const zoraCreatorRedeemMinterFactoryABI: readonly [{
    readonly type: "constructor";
    readonly inputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "CONTRACT_BASE_ID";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "contractName";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly stateMutability: "pure";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "contractURI";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly stateMutability: "pure";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "contractVersion";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly stateMutability: "pure";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "createMinterIfNoneExists";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "_creatorContract";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "doesRedeemMinterExistForCreatorContract";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "_creatorContract";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "getDeployedRedeemMinterForCreatorContract";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "_creatorContract";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "predictMinterAddress";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "sender";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "quantity";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "ethValueSent";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "minterArguments";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "requestMint";
    readonly outputs: readonly [{
        readonly name: "commands";
        readonly internalType: "struct ICreatorCommands.CommandSet";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "commands";
            readonly internalType: "struct ICreatorCommands.Command[]";
            readonly type: "tuple[]";
            readonly components: readonly [{
                readonly name: "method";
                readonly internalType: "enum ICreatorCommands.CreatorActions";
                readonly type: "uint8";
            }, {
                readonly name: "args";
                readonly internalType: "bytes";
                readonly type: "bytes";
            }];
        }, {
            readonly name: "at";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "interfaceId";
        readonly internalType: "bytes4";
        readonly type: "bytes4";
    }];
    readonly name: "supportsInterface";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "pure";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "zoraRedeemMinterImplementation";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "creatorContract";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "minterContract";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }];
    readonly name: "RedeemMinterDeployed";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "CallerNotZoraCreator1155";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "mintTo";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "merkleProof";
        readonly internalType: "bytes32[]";
        readonly type: "bytes32[]";
    }, {
        readonly name: "merkleRoot";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly name: "InvalidMerkleProof";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "MinterContractAlreadyExists";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "MinterContractDoesNotExist";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "SaleEnded";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "SaleHasNotStarted";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "WrongValueSent";
}];
/**
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x78964965cF77850224513a367f899435C5B69174)
 * - [__View Contract on Op Mainnet Optimism Explorer__](https://optimistic.etherscan.io/address/0x1B28A04b7eB7b93f920ddF2021aa3fAE065395f2)
 * - [__View Contract on Zora Goerli Testnet Explorer__](https://testnet.explorer.zora.energy/address/0x78964965cF77850224513a367f899435C5B69174)
 * - [__View Contract on Base Basescan__](https://basescan.org/address/0x78964965cF77850224513a367f899435C5B69174)
 * - [__View Contract on Arbitrum One Arbiscan__](https://arbiscan.io/address/0x69bB4A24EBD8b1B87AF4538E0Ca3075b7E398c3D)
 * - [__View Contract on Blast Blastscan__](https://blastscan.io/address/0x7A0dE1B1f5420Df5D946878fBe2cF109011BE614)
 * - [__View Contract on Base Sepolia Basescan__](https://sepolia.basescan.org/address/0x805E0a08dE70f85C01F7848370d5e3fc08aAd0ea)
 * - [__View Contract on Arbitrum Sepolia Arbiscan__](https://sepolia.arbiscan.io/address/0x69bB4A24EBD8b1B87AF4538E0Ca3075b7E398c3D)
 * - [__View Contract on Zora Explorer__](https://explorer.zora.energy/address/0x78964965cF77850224513a367f899435C5B69174)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x69bB4A24EBD8b1B87AF4538E0Ca3075b7E398c3D)
 * - [__View Contract on Blast Sepolia Blastscan__](https://sepolia.blastscan.io/address/0x7A0dE1B1f5420Df5D946878fBe2cF109011BE614)
 * - [__View Contract on Zora Sepolia Zora Sepolia Explorer__](https://sepolia.explorer.zora.energy//address/0x25cFb6dd9cDE8425e781d6718a29Ccbca3F038d6)
 */
export declare const zoraCreatorRedeemMinterFactoryAddress: {
    readonly 1: "0x78964965cF77850224513a367f899435C5B69174";
    readonly 10: "0x1B28A04b7eB7b93f920ddF2021aa3fAE065395f2";
    readonly 999: "0x78964965cF77850224513a367f899435C5B69174";
    readonly 8453: "0x78964965cF77850224513a367f899435C5B69174";
    readonly 42161: "0x69bB4A24EBD8b1B87AF4538E0Ca3075b7E398c3D";
    readonly 81457: "0x7A0dE1B1f5420Df5D946878fBe2cF109011BE614";
    readonly 84532: "0x805E0a08dE70f85C01F7848370d5e3fc08aAd0ea";
    readonly 421614: "0x69bB4A24EBD8b1B87AF4538E0Ca3075b7E398c3D";
    readonly 7777777: "0x78964965cF77850224513a367f899435C5B69174";
    readonly 11155111: "0x69bB4A24EBD8b1B87AF4538E0Ca3075b7E398c3D";
    readonly 168587773: "0x7A0dE1B1f5420Df5D946878fBe2cF109011BE614";
    readonly 999999999: "0x25cFb6dd9cDE8425e781d6718a29Ccbca3F038d6";
};
/**
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x78964965cF77850224513a367f899435C5B69174)
 * - [__View Contract on Op Mainnet Optimism Explorer__](https://optimistic.etherscan.io/address/0x1B28A04b7eB7b93f920ddF2021aa3fAE065395f2)
 * - [__View Contract on Zora Goerli Testnet Explorer__](https://testnet.explorer.zora.energy/address/0x78964965cF77850224513a367f899435C5B69174)
 * - [__View Contract on Base Basescan__](https://basescan.org/address/0x78964965cF77850224513a367f899435C5B69174)
 * - [__View Contract on Arbitrum One Arbiscan__](https://arbiscan.io/address/0x69bB4A24EBD8b1B87AF4538E0Ca3075b7E398c3D)
 * - [__View Contract on Blast Blastscan__](https://blastscan.io/address/0x7A0dE1B1f5420Df5D946878fBe2cF109011BE614)
 * - [__View Contract on Base Sepolia Basescan__](https://sepolia.basescan.org/address/0x805E0a08dE70f85C01F7848370d5e3fc08aAd0ea)
 * - [__View Contract on Arbitrum Sepolia Arbiscan__](https://sepolia.arbiscan.io/address/0x69bB4A24EBD8b1B87AF4538E0Ca3075b7E398c3D)
 * - [__View Contract on Zora Explorer__](https://explorer.zora.energy/address/0x78964965cF77850224513a367f899435C5B69174)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x69bB4A24EBD8b1B87AF4538E0Ca3075b7E398c3D)
 * - [__View Contract on Blast Sepolia Blastscan__](https://sepolia.blastscan.io/address/0x7A0dE1B1f5420Df5D946878fBe2cF109011BE614)
 * - [__View Contract on Zora Sepolia Zora Sepolia Explorer__](https://sepolia.explorer.zora.energy//address/0x25cFb6dd9cDE8425e781d6718a29Ccbca3F038d6)
 */
export declare const zoraCreatorRedeemMinterFactoryConfig: {
    readonly address: {
        readonly 1: "0x78964965cF77850224513a367f899435C5B69174";
        readonly 10: "0x1B28A04b7eB7b93f920ddF2021aa3fAE065395f2";
        readonly 999: "0x78964965cF77850224513a367f899435C5B69174";
        readonly 8453: "0x78964965cF77850224513a367f899435C5B69174";
        readonly 42161: "0x69bB4A24EBD8b1B87AF4538E0Ca3075b7E398c3D";
        readonly 81457: "0x7A0dE1B1f5420Df5D946878fBe2cF109011BE614";
        readonly 84532: "0x805E0a08dE70f85C01F7848370d5e3fc08aAd0ea";
        readonly 421614: "0x69bB4A24EBD8b1B87AF4538E0Ca3075b7E398c3D";
        readonly 7777777: "0x78964965cF77850224513a367f899435C5B69174";
        readonly 11155111: "0x69bB4A24EBD8b1B87AF4538E0Ca3075b7E398c3D";
        readonly 168587773: "0x7A0dE1B1f5420Df5D946878fBe2cF109011BE614";
        readonly 999999999: "0x25cFb6dd9cDE8425e781d6718a29Ccbca3F038d6";
    };
    readonly abi: readonly [{
        readonly type: "constructor";
        readonly inputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "CONTRACT_BASE_ID";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "contractName";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly stateMutability: "pure";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "contractURI";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly stateMutability: "pure";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "contractVersion";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly stateMutability: "pure";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "createMinterIfNoneExists";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "_creatorContract";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "doesRedeemMinterExistForCreatorContract";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "_creatorContract";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "getDeployedRedeemMinterForCreatorContract";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "_creatorContract";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "predictMinterAddress";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "sender";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "quantity";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "ethValueSent";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "minterArguments";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "requestMint";
        readonly outputs: readonly [{
            readonly name: "commands";
            readonly internalType: "struct ICreatorCommands.CommandSet";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "commands";
                readonly internalType: "struct ICreatorCommands.Command[]";
                readonly type: "tuple[]";
                readonly components: readonly [{
                    readonly name: "method";
                    readonly internalType: "enum ICreatorCommands.CreatorActions";
                    readonly type: "uint8";
                }, {
                    readonly name: "args";
                    readonly internalType: "bytes";
                    readonly type: "bytes";
                }];
            }, {
                readonly name: "at";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }];
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "interfaceId";
            readonly internalType: "bytes4";
            readonly type: "bytes4";
        }];
        readonly name: "supportsInterface";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "pure";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "zoraRedeemMinterImplementation";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "creatorContract";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "minterContract";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }];
        readonly name: "RedeemMinterDeployed";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "CallerNotZoraCreator1155";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "mintTo";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "merkleProof";
            readonly internalType: "bytes32[]";
            readonly type: "bytes32[]";
        }, {
            readonly name: "merkleRoot";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly name: "InvalidMerkleProof";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "MinterContractAlreadyExists";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "MinterContractDoesNotExist";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "SaleEnded";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "SaleHasNotStarted";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "WrongValueSent";
    }];
};
/**
 * - [__View Contract on Zora Explorer__](https://explorer.zora.energy/address/0x7777777d57c1C6e472fa379b7b3B6c6ba3835073)
 * - [__View Contract on Zora Sepolia Zora Sepolia Explorer__](https://sepolia.explorer.zora.energy//address/0x7777777d57c1C6e472fa379b7b3B6c6ba3835073)
 */
export declare const zoraMints1155ABI: readonly [{
    readonly type: "constructor";
    readonly inputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "ETH_ADDRESS";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "MINIMUM_ERC20_PRICE";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "MINIMUM_ETH_PRICE";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "NAME";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "VERSION";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "authority";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "account";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "id";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "balanceOf";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "account";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "balanceOfAccount";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "accounts";
        readonly internalType: "address[]";
        readonly type: "address[]";
    }, {
        readonly name: "ids";
        readonly internalType: "uint256[]";
        readonly type: "uint256[]";
    }];
    readonly name: "balanceOfBatch";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256[]";
        readonly type: "uint256[]";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "contractURI";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "tokenConfig";
        readonly internalType: "struct TokenConfig";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "price";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "tokenAddress";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "redeemHandler";
            readonly internalType: "address";
            readonly type: "address";
        }];
    }];
    readonly name: "createToken";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "eip712Domain";
    readonly outputs: readonly [{
        readonly name: "fields";
        readonly internalType: "bytes1";
        readonly type: "bytes1";
    }, {
        readonly name: "name";
        readonly internalType: "string";
        readonly type: "string";
    }, {
        readonly name: "version";
        readonly internalType: "string";
        readonly type: "string";
    }, {
        readonly name: "chainId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "verifyingContract";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "salt";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }, {
        readonly name: "extensions";
        readonly internalType: "uint256[]";
        readonly type: "uint256[]";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "getManager";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "getTokenConfig";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "struct TokenConfig";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "price";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "tokenAddress";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "redeemHandler";
            readonly internalType: "address";
            readonly type: "address";
        }];
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "permit";
        readonly internalType: "struct IZoraSparks1155Managed.PermitBatch";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "owner";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "to";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "tokenIds";
            readonly internalType: "uint256[]";
            readonly type: "uint256[]";
        }, {
            readonly name: "quantities";
            readonly internalType: "uint256[]";
            readonly type: "uint256[]";
        }, {
            readonly name: "safeTransferData";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }, {
            readonly name: "deadline";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "nonce";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
    }];
    readonly name: "hashPermitBatch";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "permit";
        readonly internalType: "struct IZoraSparks1155Managed.PermitSingle";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "owner";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "to";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "quantity";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "safeTransferData";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }, {
            readonly name: "deadline";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "nonce";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
    }];
    readonly name: "hashPermitSingle";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "account";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "operator";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "isApprovedForAll";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "isConsumingScheduledOp";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes4";
        readonly type: "bytes4";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "permit";
        readonly internalType: "struct IZoraSparks1155Managed.PermitBatch";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "owner";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "to";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "tokenIds";
            readonly internalType: "uint256[]";
            readonly type: "uint256[]";
        }, {
            readonly name: "quantities";
            readonly internalType: "uint256[]";
            readonly type: "uint256[]";
        }, {
            readonly name: "safeTransferData";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }, {
            readonly name: "deadline";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "nonce";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
    }, {
        readonly name: "signature";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "isValidSignatureTransferBatch";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "permit";
        readonly internalType: "struct IZoraSparks1155Managed.PermitSingle";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "owner";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "to";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "quantity";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "safeTransferData";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }, {
            readonly name: "deadline";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "nonce";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
    }, {
        readonly name: "signature";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "isValidSignatureTransferSingle";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "tokenAddress";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "quantity";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "recipient";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "data";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "mintTokenWithERC20";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "quantity";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "recipient";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "data";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "mintTokenWithEth";
    readonly outputs: readonly [];
    readonly stateMutability: "payable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "name";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly stateMutability: "pure";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "owner";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "nonce";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "nonceUsed";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "newContractURI";
        readonly internalType: "string";
        readonly type: "string";
    }, {
        readonly name: "newBaseURI";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly name: "notifyURIsUpdated";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "newUri";
        readonly internalType: "string";
        readonly type: "string";
    }, {
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "notifyUpdatedTokenURI";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "permit";
        readonly internalType: "struct IZoraSparks1155Managed.PermitSingle";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "owner";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "to";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "quantity";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "safeTransferData";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }, {
            readonly name: "deadline";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "nonce";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
    }, {
        readonly name: "signature";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "permitSafeTransfer";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "permit";
        readonly internalType: "struct IZoraSparks1155Managed.PermitBatch";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "owner";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "to";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "tokenIds";
            readonly internalType: "uint256[]";
            readonly type: "uint256[]";
        }, {
            readonly name: "quantities";
            readonly internalType: "uint256[]";
            readonly type: "uint256[]";
        }, {
            readonly name: "safeTransferData";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }, {
            readonly name: "deadline";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "nonce";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
    }, {
        readonly name: "signature";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "permitSafeTransferBatch";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "quantity";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "recipient";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "redeem";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "struct Redemption";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "tokenAddress";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "valueRedeemed";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "tokenIds";
        readonly internalType: "uint256[]";
        readonly type: "uint256[]";
    }, {
        readonly name: "quantities";
        readonly internalType: "uint256[]";
        readonly type: "uint256[]";
    }, {
        readonly name: "recipient";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "redeemBatch";
    readonly outputs: readonly [{
        readonly name: "redemptions";
        readonly internalType: "struct Redemption[]";
        readonly type: "tuple[]";
        readonly components: readonly [{
            readonly name: "tokenAddress";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "valueRedeemed";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "from";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "to";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "ids";
        readonly internalType: "uint256[]";
        readonly type: "uint256[]";
    }, {
        readonly name: "values";
        readonly internalType: "uint256[]";
        readonly type: "uint256[]";
    }, {
        readonly name: "data";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "safeBatchTransferFrom";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "from";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "to";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "id";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "value";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "data";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "safeTransferFrom";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "operator";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "approved";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly name: "setApprovalForAll";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "newAuthority";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "setAuthority";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "interfaceId";
        readonly internalType: "bytes4";
        readonly type: "bytes4";
    }];
    readonly name: "supportsInterface";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "symbol";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly stateMutability: "pure";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "tokenExists";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "tokenPrice";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "tokenIds";
        readonly internalType: "uint256[]";
        readonly type: "uint256[]";
    }, {
        readonly name: "quantities";
        readonly internalType: "uint256[]";
        readonly type: "uint256[]";
    }, {
        readonly name: "call";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "transferBatchToManagerAndCall";
    readonly outputs: readonly [{
        readonly name: "callReturn";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly stateMutability: "payable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "uri";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "account";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "operator";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "approved";
        readonly internalType: "bool";
        readonly type: "bool";
        readonly indexed: false;
    }];
    readonly name: "ApprovalForAll";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "authority";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }];
    readonly name: "AuthorityUpdated";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [];
    readonly name: "ContractURIUpdated";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [];
    readonly name: "EIP712DomainChanged";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: true;
    }, {
        readonly name: "price";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: true;
    }, {
        readonly name: "tokenAddress";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }];
    readonly name: "TokenCreated";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "operator";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "from";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "to";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "ids";
        readonly internalType: "uint256[]";
        readonly type: "uint256[]";
        readonly indexed: false;
    }, {
        readonly name: "values";
        readonly internalType: "uint256[]";
        readonly type: "uint256[]";
        readonly indexed: false;
    }];
    readonly name: "TransferBatch";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "operator";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "from";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "to";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "id";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }, {
        readonly name: "value";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }];
    readonly name: "TransferSingle";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "value";
        readonly internalType: "string";
        readonly type: "string";
        readonly indexed: false;
    }, {
        readonly name: "id";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: true;
    }];
    readonly name: "URI";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "contractURI";
        readonly internalType: "string";
        readonly type: "string";
        readonly indexed: false;
    }, {
        readonly name: "baseURI";
        readonly internalType: "string";
        readonly type: "string";
        readonly indexed: false;
    }];
    readonly name: "URIsUpdated";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "authority";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "AccessManagedInvalidAuthority";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "caller";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "delay";
        readonly internalType: "uint32";
        readonly type: "uint32";
    }];
    readonly name: "AccessManagedRequiredDelay";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "caller";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "AccessManagedUnauthorized";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "target";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "AddressEmptyCode";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "account";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "AddressInsufficientBalance";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "lengthA";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "lengthB";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "ArrayLengthMismatch";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "returnData";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "CallFailed";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "sender";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "balance";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "needed";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "ERC1155InsufficientBalance";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "approver";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "ERC1155InvalidApprover";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "idsLength";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "valuesLength";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "ERC1155InvalidArrayLength";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "operator";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "ERC1155InvalidOperator";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "receiver";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "ERC1155InvalidReceiver";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "sender";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "ERC1155InvalidSender";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "operator";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "owner";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "ERC1155MissingApprovalForAll";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ERC20TransferSlippage";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "deadline";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "ERC2612ExpiredSignature";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ETHTransferFailed";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "FailedInnerCall";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "IncorrectAmountSent";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "account";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "currentNonce";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "InvalidAccountNonce";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "InvalidRecipient";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "InvalidShortString";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "InvalidSignature";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "InvalidTokenPrice";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "NoUriForNonexistentToken";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "handler";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "NotARedeemHandler";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "token";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "SafeERC20FailedOperation";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "str";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly name: "StringTooLong";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "TokenAlreadyCreated";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "TokenDoesNotExist";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "storedTokenAddress";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "expectedTokenAddress";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "TokenMismatch";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "TokenNotMintable";
}];
/**
 * - [__View Contract on Zora Explorer__](https://explorer.zora.energy/address/0x7777777d57c1C6e472fa379b7b3B6c6ba3835073)
 * - [__View Contract on Zora Sepolia Zora Sepolia Explorer__](https://sepolia.explorer.zora.energy//address/0x7777777d57c1C6e472fa379b7b3B6c6ba3835073)
 */
export declare const zoraMints1155Address: {
    readonly 7777777: "0x7777777d57c1C6e472fa379b7b3B6c6ba3835073";
    readonly 999999999: "0x7777777d57c1C6e472fa379b7b3B6c6ba3835073";
};
/**
 * - [__View Contract on Zora Explorer__](https://explorer.zora.energy/address/0x7777777d57c1C6e472fa379b7b3B6c6ba3835073)
 * - [__View Contract on Zora Sepolia Zora Sepolia Explorer__](https://sepolia.explorer.zora.energy//address/0x7777777d57c1C6e472fa379b7b3B6c6ba3835073)
 */
export declare const zoraMints1155Config: {
    readonly address: {
        readonly 7777777: "0x7777777d57c1C6e472fa379b7b3B6c6ba3835073";
        readonly 999999999: "0x7777777d57c1C6e472fa379b7b3B6c6ba3835073";
    };
    readonly abi: readonly [{
        readonly type: "constructor";
        readonly inputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "ETH_ADDRESS";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "MINIMUM_ERC20_PRICE";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "MINIMUM_ETH_PRICE";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "NAME";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "VERSION";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "authority";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "account";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "id";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "balanceOf";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "account";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "balanceOfAccount";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "accounts";
            readonly internalType: "address[]";
            readonly type: "address[]";
        }, {
            readonly name: "ids";
            readonly internalType: "uint256[]";
            readonly type: "uint256[]";
        }];
        readonly name: "balanceOfBatch";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256[]";
            readonly type: "uint256[]";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "contractURI";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "tokenConfig";
            readonly internalType: "struct TokenConfig";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "price";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "tokenAddress";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "redeemHandler";
                readonly internalType: "address";
                readonly type: "address";
            }];
        }];
        readonly name: "createToken";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "eip712Domain";
        readonly outputs: readonly [{
            readonly name: "fields";
            readonly internalType: "bytes1";
            readonly type: "bytes1";
        }, {
            readonly name: "name";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "version";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "chainId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "verifyingContract";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "salt";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }, {
            readonly name: "extensions";
            readonly internalType: "uint256[]";
            readonly type: "uint256[]";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "getManager";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "getTokenConfig";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "struct TokenConfig";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "price";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "tokenAddress";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "redeemHandler";
                readonly internalType: "address";
                readonly type: "address";
            }];
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "permit";
            readonly internalType: "struct IZoraSparks1155Managed.PermitBatch";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "owner";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "to";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "tokenIds";
                readonly internalType: "uint256[]";
                readonly type: "uint256[]";
            }, {
                readonly name: "quantities";
                readonly internalType: "uint256[]";
                readonly type: "uint256[]";
            }, {
                readonly name: "safeTransferData";
                readonly internalType: "bytes";
                readonly type: "bytes";
            }, {
                readonly name: "deadline";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "nonce";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }];
        }];
        readonly name: "hashPermitBatch";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "permit";
            readonly internalType: "struct IZoraSparks1155Managed.PermitSingle";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "owner";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "to";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "tokenId";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "quantity";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "safeTransferData";
                readonly internalType: "bytes";
                readonly type: "bytes";
            }, {
                readonly name: "deadline";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "nonce";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }];
        }];
        readonly name: "hashPermitSingle";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "account";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "operator";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "isApprovedForAll";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "isConsumingScheduledOp";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes4";
            readonly type: "bytes4";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "permit";
            readonly internalType: "struct IZoraSparks1155Managed.PermitBatch";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "owner";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "to";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "tokenIds";
                readonly internalType: "uint256[]";
                readonly type: "uint256[]";
            }, {
                readonly name: "quantities";
                readonly internalType: "uint256[]";
                readonly type: "uint256[]";
            }, {
                readonly name: "safeTransferData";
                readonly internalType: "bytes";
                readonly type: "bytes";
            }, {
                readonly name: "deadline";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "nonce";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }];
        }, {
            readonly name: "signature";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "isValidSignatureTransferBatch";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "permit";
            readonly internalType: "struct IZoraSparks1155Managed.PermitSingle";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "owner";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "to";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "tokenId";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "quantity";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "safeTransferData";
                readonly internalType: "bytes";
                readonly type: "bytes";
            }, {
                readonly name: "deadline";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "nonce";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }];
        }, {
            readonly name: "signature";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "isValidSignatureTransferSingle";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "tokenAddress";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "quantity";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "recipient";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "data";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "mintTokenWithERC20";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "quantity";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "recipient";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "data";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "mintTokenWithEth";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "name";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly stateMutability: "pure";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "owner";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "nonce";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "nonceUsed";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "newContractURI";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "newBaseURI";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly name: "notifyURIsUpdated";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "newUri";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "notifyUpdatedTokenURI";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "permit";
            readonly internalType: "struct IZoraSparks1155Managed.PermitSingle";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "owner";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "to";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "tokenId";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "quantity";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "safeTransferData";
                readonly internalType: "bytes";
                readonly type: "bytes";
            }, {
                readonly name: "deadline";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "nonce";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }];
        }, {
            readonly name: "signature";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "permitSafeTransfer";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "permit";
            readonly internalType: "struct IZoraSparks1155Managed.PermitBatch";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "owner";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "to";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "tokenIds";
                readonly internalType: "uint256[]";
                readonly type: "uint256[]";
            }, {
                readonly name: "quantities";
                readonly internalType: "uint256[]";
                readonly type: "uint256[]";
            }, {
                readonly name: "safeTransferData";
                readonly internalType: "bytes";
                readonly type: "bytes";
            }, {
                readonly name: "deadline";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "nonce";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }];
        }, {
            readonly name: "signature";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "permitSafeTransferBatch";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "quantity";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "recipient";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "redeem";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "struct Redemption";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "tokenAddress";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "valueRedeemed";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }];
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "tokenIds";
            readonly internalType: "uint256[]";
            readonly type: "uint256[]";
        }, {
            readonly name: "quantities";
            readonly internalType: "uint256[]";
            readonly type: "uint256[]";
        }, {
            readonly name: "recipient";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "redeemBatch";
        readonly outputs: readonly [{
            readonly name: "redemptions";
            readonly internalType: "struct Redemption[]";
            readonly type: "tuple[]";
            readonly components: readonly [{
                readonly name: "tokenAddress";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "valueRedeemed";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }];
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "from";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "to";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "ids";
            readonly internalType: "uint256[]";
            readonly type: "uint256[]";
        }, {
            readonly name: "values";
            readonly internalType: "uint256[]";
            readonly type: "uint256[]";
        }, {
            readonly name: "data";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "safeBatchTransferFrom";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "from";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "to";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "id";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "value";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "data";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "safeTransferFrom";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "operator";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "approved";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly name: "setApprovalForAll";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "newAuthority";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "setAuthority";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "interfaceId";
            readonly internalType: "bytes4";
            readonly type: "bytes4";
        }];
        readonly name: "supportsInterface";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "symbol";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly stateMutability: "pure";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "tokenExists";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "tokenPrice";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "tokenIds";
            readonly internalType: "uint256[]";
            readonly type: "uint256[]";
        }, {
            readonly name: "quantities";
            readonly internalType: "uint256[]";
            readonly type: "uint256[]";
        }, {
            readonly name: "call";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "transferBatchToManagerAndCall";
        readonly outputs: readonly [{
            readonly name: "callReturn";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly stateMutability: "payable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "uri";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "account";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "operator";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "approved";
            readonly internalType: "bool";
            readonly type: "bool";
            readonly indexed: false;
        }];
        readonly name: "ApprovalForAll";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "authority";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }];
        readonly name: "AuthorityUpdated";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [];
        readonly name: "ContractURIUpdated";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [];
        readonly name: "EIP712DomainChanged";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: true;
        }, {
            readonly name: "price";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: true;
        }, {
            readonly name: "tokenAddress";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }];
        readonly name: "TokenCreated";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "operator";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "from";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "to";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "ids";
            readonly internalType: "uint256[]";
            readonly type: "uint256[]";
            readonly indexed: false;
        }, {
            readonly name: "values";
            readonly internalType: "uint256[]";
            readonly type: "uint256[]";
            readonly indexed: false;
        }];
        readonly name: "TransferBatch";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "operator";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "from";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "to";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "id";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: false;
        }, {
            readonly name: "value";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: false;
        }];
        readonly name: "TransferSingle";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "value";
            readonly internalType: "string";
            readonly type: "string";
            readonly indexed: false;
        }, {
            readonly name: "id";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: true;
        }];
        readonly name: "URI";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "contractURI";
            readonly internalType: "string";
            readonly type: "string";
            readonly indexed: false;
        }, {
            readonly name: "baseURI";
            readonly internalType: "string";
            readonly type: "string";
            readonly indexed: false;
        }];
        readonly name: "URIsUpdated";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "authority";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "AccessManagedInvalidAuthority";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "caller";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "delay";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }];
        readonly name: "AccessManagedRequiredDelay";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "caller";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "AccessManagedUnauthorized";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "target";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "AddressEmptyCode";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "account";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "AddressInsufficientBalance";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "lengthA";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "lengthB";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "ArrayLengthMismatch";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "returnData";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "CallFailed";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "sender";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "balance";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "needed";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "ERC1155InsufficientBalance";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "approver";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "ERC1155InvalidApprover";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "idsLength";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "valuesLength";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "ERC1155InvalidArrayLength";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "operator";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "ERC1155InvalidOperator";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "receiver";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "ERC1155InvalidReceiver";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "sender";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "ERC1155InvalidSender";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "operator";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "owner";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "ERC1155MissingApprovalForAll";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ERC20TransferSlippage";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "deadline";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "ERC2612ExpiredSignature";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ETHTransferFailed";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "FailedInnerCall";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "IncorrectAmountSent";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "account";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "currentNonce";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "InvalidAccountNonce";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "InvalidRecipient";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "InvalidShortString";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "InvalidSignature";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "InvalidTokenPrice";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "NoUriForNonexistentToken";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "handler";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "NotARedeemHandler";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "token";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "SafeERC20FailedOperation";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "str";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly name: "StringTooLong";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "TokenAlreadyCreated";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "TokenDoesNotExist";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "storedTokenAddress";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "expectedTokenAddress";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "TokenMismatch";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "TokenNotMintable";
    }];
};
/**
 * - [__View Contract on Zora Explorer__](https://explorer.zora.energy/address/0x77777770cA269366c7208aFcF36FE2C6F7f7608B)
 * - [__View Contract on Zora Sepolia Zora Sepolia Explorer__](https://sepolia.explorer.zora.energy//address/0x77777770cA269366c7208aFcF36FE2C6F7f7608B)
 */
export declare const zoraMintsManagerImplABI: readonly [{
    readonly type: "constructor";
    readonly inputs: readonly [{
        readonly name: "_premintExecutor";
        readonly internalType: "contract IZoraCreator1155PremintExecutorAllVersions";
        readonly type: "address";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "UPGRADE_INTERFACE_VERSION";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "acceptOwnership";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "callFrom";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "tokenIds";
        readonly internalType: "uint256[]";
        readonly type: "uint256[]";
    }, {
        readonly name: "quantities";
        readonly internalType: "uint256[]";
        readonly type: "uint256[]";
    }, {
        readonly name: "call";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "callWithTransferTokens";
    readonly outputs: readonly [{
        readonly name: "success";
        readonly internalType: "bool";
        readonly type: "bool";
    }, {
        readonly name: "result";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly stateMutability: "payable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "caller";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "";
        readonly internalType: "bytes4";
        readonly type: "bytes4";
    }];
    readonly name: "canCall";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "zoraCreator1155Contract";
        readonly internalType: "contract IMintWithSparks";
        readonly type: "address";
    }, {
        readonly name: "minter";
        readonly internalType: "contract IMinter1155";
        readonly type: "address";
    }, {
        readonly name: "zoraCreator1155TokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "collectMintArguments";
        readonly internalType: "struct ICollectWithZoraSparks.CollectMintArguments";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "mintRewardsRecipients";
            readonly internalType: "address[]";
            readonly type: "address[]";
        }, {
            readonly name: "minterArguments";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }, {
            readonly name: "mintComment";
            readonly internalType: "string";
            readonly type: "string";
        }];
    }];
    readonly name: "collect";
    readonly outputs: readonly [];
    readonly stateMutability: "payable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "contractConfig";
        readonly internalType: "struct ContractWithAdditionalAdminsCreationConfig";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "contractAdmin";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "contractURI";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "contractName";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "additionalAdmins";
            readonly internalType: "address[]";
            readonly type: "address[]";
        }];
    }, {
        readonly name: "tokenContract";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "premintConfig";
        readonly internalType: "struct PremintConfigEncoded";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "uid";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }, {
            readonly name: "version";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }, {
            readonly name: "deleted";
            readonly internalType: "bool";
            readonly type: "bool";
        }, {
            readonly name: "tokenConfig";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }, {
            readonly name: "premintConfigVersion";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
    }, {
        readonly name: "signature";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }, {
        readonly name: "mintArguments";
        readonly internalType: "struct MintArguments";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "mintRecipient";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "mintComment";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "mintRewardsRecipients";
            readonly internalType: "address[]";
            readonly type: "address[]";
        }];
    }, {
        readonly name: "firstMinter";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "signerContract";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "collectPremint";
    readonly outputs: readonly [{
        readonly name: "result";
        readonly internalType: "struct PremintResult";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "contractAddress";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "createdNewContract";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
    }];
    readonly stateMutability: "payable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "contractConfig";
        readonly internalType: "struct ContractCreationConfig";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "contractAdmin";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "contractURI";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "contractName";
            readonly internalType: "string";
            readonly type: "string";
        }];
    }, {
        readonly name: "premintConfig";
        readonly internalType: "struct PremintConfigV2";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "tokenConfig";
            readonly internalType: "struct TokenCreationConfigV2";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "tokenURI";
                readonly internalType: "string";
                readonly type: "string";
            }, {
                readonly name: "maxSupply";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "maxTokensPerAddress";
                readonly internalType: "uint64";
                readonly type: "uint64";
            }, {
                readonly name: "pricePerToken";
                readonly internalType: "uint96";
                readonly type: "uint96";
            }, {
                readonly name: "mintStart";
                readonly internalType: "uint64";
                readonly type: "uint64";
            }, {
                readonly name: "mintDuration";
                readonly internalType: "uint64";
                readonly type: "uint64";
            }, {
                readonly name: "royaltyBPS";
                readonly internalType: "uint32";
                readonly type: "uint32";
            }, {
                readonly name: "payoutRecipient";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "fixedPriceMinter";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "createReferral";
                readonly internalType: "address";
                readonly type: "address";
            }];
        }, {
            readonly name: "uid";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }, {
            readonly name: "version";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }, {
            readonly name: "deleted";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
    }, {
        readonly name: "signature";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }, {
        readonly name: "mintArguments";
        readonly internalType: "struct MintArguments";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "mintRecipient";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "mintComment";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "mintRewardsRecipients";
            readonly internalType: "address[]";
            readonly type: "address[]";
        }];
    }, {
        readonly name: "signerContract";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "collectPremintV2";
    readonly outputs: readonly [{
        readonly name: "result";
        readonly internalType: "struct PremintResult";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "contractAddress";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "createdNewContract";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
    }];
    readonly stateMutability: "payable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "contractName";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly stateMutability: "pure";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "contractURI";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "contractVersion";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly stateMutability: "pure";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "tokenConfig";
        readonly internalType: "struct TokenConfig";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "price";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "tokenAddress";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "redeemHandler";
            readonly internalType: "address";
            readonly type: "address";
        }];
    }, {
        readonly name: "defaultMintable";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly name: "createToken";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "minterArguments";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "decodeMintRecipientAndComment";
    readonly outputs: readonly [{
        readonly name: "mintTo";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "mintComment";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly stateMutability: "pure";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "getEthPrice";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "implementation";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "defaultOwner";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "zoraSparksSalt";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }, {
        readonly name: "zoraSparksCreationCode";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }, {
        readonly name: "initialEthTokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "initialEthTokenPrice";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "newBaseURI";
        readonly internalType: "string";
        readonly type: "string";
    }, {
        readonly name: "newContractURI";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly name: "initialize";
    readonly outputs: readonly [{
        readonly name: "mints";
        readonly internalType: "contract IZoraSparks1155";
        readonly type: "address";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "tokenAddress";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "quantity";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "recipient";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "mintWithERC20";
    readonly outputs: readonly [{
        readonly name: "mintableTokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "quantity";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "recipient";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "mintWithEth";
    readonly outputs: readonly [{
        readonly name: "mintableTokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "payable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "mintableEthToken";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "from";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "ids";
        readonly internalType: "uint256[]";
        readonly type: "uint256[]";
    }, {
        readonly name: "values";
        readonly internalType: "uint256[]";
        readonly type: "uint256[]";
    }, {
        readonly name: "data";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "onERC1155BatchReceived";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes4";
        readonly type: "bytes4";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "from";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "id";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "value";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "data";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "onERC1155Received";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes4";
        readonly type: "bytes4";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "owner";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "pendingOwner";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "proxiableUUID";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "renounceOwnership";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "tokenAddress";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "setDefaultMintable";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "newContractURI";
        readonly internalType: "string";
        readonly type: "string";
    }, {
        readonly name: "newBaseURI";
        readonly internalType: "string";
        readonly type: "string";
    }, {
        readonly name: "tokenIdsToNotifyUpdate";
        readonly internalType: "uint256[]";
        readonly type: "uint256[]";
    }];
    readonly name: "setMetadataURIs";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "newOwner";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "transferOwnership";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "newImplementation";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "data";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "upgradeToAndCall";
    readonly outputs: readonly [];
    readonly stateMutability: "payable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "uri";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "zoraSparks1155";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "contract IZoraSparks1155";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "tokenIds";
        readonly internalType: "uint256[]";
        readonly type: "uint256[]";
        readonly indexed: true;
    }, {
        readonly name: "quantities";
        readonly internalType: "uint256[]";
        readonly type: "uint256[]";
        readonly indexed: false;
    }, {
        readonly name: "zoraCreator1155Contract";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "zoraCreator1155TokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: true;
    }];
    readonly name: "Collected";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "tokenAddress";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }, {
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }];
    readonly name: "DefaultMintableTokenSet";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "version";
        readonly internalType: "uint64";
        readonly type: "uint64";
        readonly indexed: false;
    }];
    readonly name: "Initialized";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "sender";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "tokenContract";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: true;
    }, {
        readonly name: "quantity";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }, {
        readonly name: "comment";
        readonly internalType: "string";
        readonly type: "string";
        readonly indexed: false;
    }];
    readonly name: "MintComment";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "previousOwner";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "newOwner";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }];
    readonly name: "OwnershipTransferStarted";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "previousOwner";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "newOwner";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }];
    readonly name: "OwnershipTransferred";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "contractURI";
        readonly internalType: "string";
        readonly type: "string";
        readonly indexed: false;
    }, {
        readonly name: "baseURI";
        readonly internalType: "string";
        readonly type: "string";
        readonly indexed: false;
    }];
    readonly name: "URIsUpdated";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "implementation";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }];
    readonly name: "Upgraded";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "target";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "AddressEmptyCode";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "account";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "AddressInsufficientBalance";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "lengthA";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "lengthB";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "ArrayLengthMismatch";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "operator";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "user";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "Burn_NotOwnerOrApproved";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "reason";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "CallFailed";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "Call_TokenIdMismatch";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "CallerNotZoraCreator1155";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "quantity";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "totalMinted";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "maxSupply";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "CannotMintMoreTokens";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "proposedAddress";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "Config_TransferHookNotSupported";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "Create2EmptyBytecode";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "Create2FailedDeployment";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "balance";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "needed";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "Create2InsufficientBalance";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "DefaultOwnerCannotBeZero";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ERC1155BatchReceivedCallFailed";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ERC1155_MINT_TO_ZERO_ADDRESS";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "implementation";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "ERC1967InvalidImplementation";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ERC1967NonPayable";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ERC20TransferSlippage";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ETHTransferFailed";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "recipient";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "amount";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "ETHWithdrawFailed";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "FailedInnerCall";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "FirstMinterAddressZero";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "amount";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "contractValue";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "FundsWithdrawInsolvent";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "IncorrectAmountSent";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "InvalidAdminAction";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "InvalidInitialization";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "mintTo";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "merkleProof";
        readonly internalType: "bytes32[]";
        readonly type: "bytes32[]";
    }, {
        readonly name: "merkleRoot";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly name: "InvalidMerkleProof";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "InvalidMintSchedule";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "InvalidOwnerForAssociatedZoraSparks";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "InvalidPremintVersion";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "InvalidRecipient";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "InvalidSignature";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "InvalidSignatureVersion";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "magicValue";
        readonly internalType: "bytes4";
        readonly type: "bytes4";
    }];
    readonly name: "InvalidSigner";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "InvalidTokenPrice";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "MintNotYetStarted";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "MintWithSparksNotSupportedOnContract";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "Mint_InsolventSaleTransfer";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "Mint_InvalidMintArrayLength";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "Mint_TokenIDMintNotAllowed";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "Mint_UnknownCommand";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "Mint_ValueTransferFail";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "MinterContractAlreadyExists";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "MinterContractDoesNotExist";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "NewOwnerNeedsToBeAdmin";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "NoTokensTransferred";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "NoUriForNonexistentToken";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "NonEthRedemption";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "handler";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "NotARedeemHandler";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "NotInitializing";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "NotSelfCall";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "NotZoraSparks1155";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "OnlyTransfersFromZoraSparks";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "owner";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "OwnableInvalidOwner";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "account";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "OwnableUnauthorizedAccount";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "PremintDeleted";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "PremintExecutorCannotBeZero";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "caller";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "recipient";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "amount";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "ProtocolRewardsWithdrawFailed";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ReentrancyGuardReentrantCall";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "Renderer_NotValidRendererContract";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "token";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "SafeERC20FailedOperation";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "SaleEnded";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "SaleHasNotStarted";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "targetContract";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "Sale_CannotCallNonSalesContract";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "TokenAlreadyCreated";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "TokenDoesNotExist";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "expected";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "actual";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "TokenIdMismatch";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "storedTokenAddress";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "expectedTokenAddress";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "TokenMismatch";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "TokenNotMintable";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "UUPSUnauthorizedCallContext";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "slot";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly name: "UUPSUnsupportedProxiableUUID";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "selector";
        readonly internalType: "bytes4";
        readonly type: "bytes4";
    }];
    readonly name: "UnknownUserAction";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "expected";
        readonly internalType: "string";
        readonly type: "string";
    }, {
        readonly name: "actual";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly name: "UpgradeToMismatchedContractName";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "user";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "limit";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "requestedAmount";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "UserExceedsMintLimit";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "user";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "role";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "UserMissingRoleForToken";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "WrongValueSent";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "premintSignerContractFailedToRecoverSigner";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "premintSignerContractNotAContract";
}];
/**
 * - [__View Contract on Zora Explorer__](https://explorer.zora.energy/address/0x77777770cA269366c7208aFcF36FE2C6F7f7608B)
 * - [__View Contract on Zora Sepolia Zora Sepolia Explorer__](https://sepolia.explorer.zora.energy//address/0x77777770cA269366c7208aFcF36FE2C6F7f7608B)
 */
export declare const zoraMintsManagerImplAddress: {
    readonly 7777777: "0x77777770cA269366c7208aFcF36FE2C6F7f7608B";
    readonly 999999999: "0x77777770cA269366c7208aFcF36FE2C6F7f7608B";
};
/**
 * - [__View Contract on Zora Explorer__](https://explorer.zora.energy/address/0x77777770cA269366c7208aFcF36FE2C6F7f7608B)
 * - [__View Contract on Zora Sepolia Zora Sepolia Explorer__](https://sepolia.explorer.zora.energy//address/0x77777770cA269366c7208aFcF36FE2C6F7f7608B)
 */
export declare const zoraMintsManagerImplConfig: {
    readonly address: {
        readonly 7777777: "0x77777770cA269366c7208aFcF36FE2C6F7f7608B";
        readonly 999999999: "0x77777770cA269366c7208aFcF36FE2C6F7f7608B";
    };
    readonly abi: readonly [{
        readonly type: "constructor";
        readonly inputs: readonly [{
            readonly name: "_premintExecutor";
            readonly internalType: "contract IZoraCreator1155PremintExecutorAllVersions";
            readonly type: "address";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "UPGRADE_INTERFACE_VERSION";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "acceptOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "callFrom";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "tokenIds";
            readonly internalType: "uint256[]";
            readonly type: "uint256[]";
        }, {
            readonly name: "quantities";
            readonly internalType: "uint256[]";
            readonly type: "uint256[]";
        }, {
            readonly name: "call";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "callWithTransferTokens";
        readonly outputs: readonly [{
            readonly name: "success";
            readonly internalType: "bool";
            readonly type: "bool";
        }, {
            readonly name: "result";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly stateMutability: "payable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "caller";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "";
            readonly internalType: "bytes4";
            readonly type: "bytes4";
        }];
        readonly name: "canCall";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "zoraCreator1155Contract";
            readonly internalType: "contract IMintWithSparks";
            readonly type: "address";
        }, {
            readonly name: "minter";
            readonly internalType: "contract IMinter1155";
            readonly type: "address";
        }, {
            readonly name: "zoraCreator1155TokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "collectMintArguments";
            readonly internalType: "struct ICollectWithZoraSparks.CollectMintArguments";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "mintRewardsRecipients";
                readonly internalType: "address[]";
                readonly type: "address[]";
            }, {
                readonly name: "minterArguments";
                readonly internalType: "bytes";
                readonly type: "bytes";
            }, {
                readonly name: "mintComment";
                readonly internalType: "string";
                readonly type: "string";
            }];
        }];
        readonly name: "collect";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "contractConfig";
            readonly internalType: "struct ContractWithAdditionalAdminsCreationConfig";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "contractAdmin";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "contractURI";
                readonly internalType: "string";
                readonly type: "string";
            }, {
                readonly name: "contractName";
                readonly internalType: "string";
                readonly type: "string";
            }, {
                readonly name: "additionalAdmins";
                readonly internalType: "address[]";
                readonly type: "address[]";
            }];
        }, {
            readonly name: "tokenContract";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "premintConfig";
            readonly internalType: "struct PremintConfigEncoded";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "uid";
                readonly internalType: "uint32";
                readonly type: "uint32";
            }, {
                readonly name: "version";
                readonly internalType: "uint32";
                readonly type: "uint32";
            }, {
                readonly name: "deleted";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "tokenConfig";
                readonly internalType: "bytes";
                readonly type: "bytes";
            }, {
                readonly name: "premintConfigVersion";
                readonly internalType: "bytes32";
                readonly type: "bytes32";
            }];
        }, {
            readonly name: "signature";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }, {
            readonly name: "mintArguments";
            readonly internalType: "struct MintArguments";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "mintRecipient";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "mintComment";
                readonly internalType: "string";
                readonly type: "string";
            }, {
                readonly name: "mintRewardsRecipients";
                readonly internalType: "address[]";
                readonly type: "address[]";
            }];
        }, {
            readonly name: "firstMinter";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "signerContract";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "collectPremint";
        readonly outputs: readonly [{
            readonly name: "result";
            readonly internalType: "struct PremintResult";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "contractAddress";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "tokenId";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "createdNewContract";
                readonly internalType: "bool";
                readonly type: "bool";
            }];
        }];
        readonly stateMutability: "payable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "contractConfig";
            readonly internalType: "struct ContractCreationConfig";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "contractAdmin";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "contractURI";
                readonly internalType: "string";
                readonly type: "string";
            }, {
                readonly name: "contractName";
                readonly internalType: "string";
                readonly type: "string";
            }];
        }, {
            readonly name: "premintConfig";
            readonly internalType: "struct PremintConfigV2";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "tokenConfig";
                readonly internalType: "struct TokenCreationConfigV2";
                readonly type: "tuple";
                readonly components: readonly [{
                    readonly name: "tokenURI";
                    readonly internalType: "string";
                    readonly type: "string";
                }, {
                    readonly name: "maxSupply";
                    readonly internalType: "uint256";
                    readonly type: "uint256";
                }, {
                    readonly name: "maxTokensPerAddress";
                    readonly internalType: "uint64";
                    readonly type: "uint64";
                }, {
                    readonly name: "pricePerToken";
                    readonly internalType: "uint96";
                    readonly type: "uint96";
                }, {
                    readonly name: "mintStart";
                    readonly internalType: "uint64";
                    readonly type: "uint64";
                }, {
                    readonly name: "mintDuration";
                    readonly internalType: "uint64";
                    readonly type: "uint64";
                }, {
                    readonly name: "royaltyBPS";
                    readonly internalType: "uint32";
                    readonly type: "uint32";
                }, {
                    readonly name: "payoutRecipient";
                    readonly internalType: "address";
                    readonly type: "address";
                }, {
                    readonly name: "fixedPriceMinter";
                    readonly internalType: "address";
                    readonly type: "address";
                }, {
                    readonly name: "createReferral";
                    readonly internalType: "address";
                    readonly type: "address";
                }];
            }, {
                readonly name: "uid";
                readonly internalType: "uint32";
                readonly type: "uint32";
            }, {
                readonly name: "version";
                readonly internalType: "uint32";
                readonly type: "uint32";
            }, {
                readonly name: "deleted";
                readonly internalType: "bool";
                readonly type: "bool";
            }];
        }, {
            readonly name: "signature";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }, {
            readonly name: "mintArguments";
            readonly internalType: "struct MintArguments";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "mintRecipient";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "mintComment";
                readonly internalType: "string";
                readonly type: "string";
            }, {
                readonly name: "mintRewardsRecipients";
                readonly internalType: "address[]";
                readonly type: "address[]";
            }];
        }, {
            readonly name: "signerContract";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "collectPremintV2";
        readonly outputs: readonly [{
            readonly name: "result";
            readonly internalType: "struct PremintResult";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "contractAddress";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "tokenId";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "createdNewContract";
                readonly internalType: "bool";
                readonly type: "bool";
            }];
        }];
        readonly stateMutability: "payable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "contractName";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly stateMutability: "pure";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "contractURI";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "contractVersion";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly stateMutability: "pure";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "tokenConfig";
            readonly internalType: "struct TokenConfig";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "price";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "tokenAddress";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "redeemHandler";
                readonly internalType: "address";
                readonly type: "address";
            }];
        }, {
            readonly name: "defaultMintable";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly name: "createToken";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "minterArguments";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "decodeMintRecipientAndComment";
        readonly outputs: readonly [{
            readonly name: "mintTo";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "mintComment";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly stateMutability: "pure";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "getEthPrice";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "implementation";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "defaultOwner";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "zoraSparksSalt";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }, {
            readonly name: "zoraSparksCreationCode";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }, {
            readonly name: "initialEthTokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "initialEthTokenPrice";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "newBaseURI";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "newContractURI";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly name: "initialize";
        readonly outputs: readonly [{
            readonly name: "mints";
            readonly internalType: "contract IZoraSparks1155";
            readonly type: "address";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "tokenAddress";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "quantity";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "recipient";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "mintWithERC20";
        readonly outputs: readonly [{
            readonly name: "mintableTokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "quantity";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "recipient";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "mintWithEth";
        readonly outputs: readonly [{
            readonly name: "mintableTokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "payable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "mintableEthToken";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "from";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "ids";
            readonly internalType: "uint256[]";
            readonly type: "uint256[]";
        }, {
            readonly name: "values";
            readonly internalType: "uint256[]";
            readonly type: "uint256[]";
        }, {
            readonly name: "data";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "onERC1155BatchReceived";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes4";
            readonly type: "bytes4";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "from";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "id";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "value";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "data";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "onERC1155Received";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes4";
            readonly type: "bytes4";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "owner";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "pendingOwner";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "proxiableUUID";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "renounceOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "tokenAddress";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "setDefaultMintable";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "newContractURI";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "newBaseURI";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "tokenIdsToNotifyUpdate";
            readonly internalType: "uint256[]";
            readonly type: "uint256[]";
        }];
        readonly name: "setMetadataURIs";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "newOwner";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "transferOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "newImplementation";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "data";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "upgradeToAndCall";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "uri";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "zoraSparks1155";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "contract IZoraSparks1155";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "tokenIds";
            readonly internalType: "uint256[]";
            readonly type: "uint256[]";
            readonly indexed: true;
        }, {
            readonly name: "quantities";
            readonly internalType: "uint256[]";
            readonly type: "uint256[]";
            readonly indexed: false;
        }, {
            readonly name: "zoraCreator1155Contract";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "zoraCreator1155TokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: true;
        }];
        readonly name: "Collected";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "tokenAddress";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }, {
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: false;
        }];
        readonly name: "DefaultMintableTokenSet";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "version";
            readonly internalType: "uint64";
            readonly type: "uint64";
            readonly indexed: false;
        }];
        readonly name: "Initialized";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "sender";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "tokenContract";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: true;
        }, {
            readonly name: "quantity";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: false;
        }, {
            readonly name: "comment";
            readonly internalType: "string";
            readonly type: "string";
            readonly indexed: false;
        }];
        readonly name: "MintComment";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "previousOwner";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "newOwner";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }];
        readonly name: "OwnershipTransferStarted";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "previousOwner";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "newOwner";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }];
        readonly name: "OwnershipTransferred";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "contractURI";
            readonly internalType: "string";
            readonly type: "string";
            readonly indexed: false;
        }, {
            readonly name: "baseURI";
            readonly internalType: "string";
            readonly type: "string";
            readonly indexed: false;
        }];
        readonly name: "URIsUpdated";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "implementation";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }];
        readonly name: "Upgraded";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "target";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "AddressEmptyCode";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "account";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "AddressInsufficientBalance";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "lengthA";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "lengthB";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "ArrayLengthMismatch";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "operator";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "user";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "Burn_NotOwnerOrApproved";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "reason";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "CallFailed";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "Call_TokenIdMismatch";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "CallerNotZoraCreator1155";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "quantity";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "totalMinted";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "maxSupply";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "CannotMintMoreTokens";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "proposedAddress";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "Config_TransferHookNotSupported";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "Create2EmptyBytecode";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "Create2FailedDeployment";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "balance";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "needed";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "Create2InsufficientBalance";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "DefaultOwnerCannotBeZero";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ERC1155BatchReceivedCallFailed";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ERC1155_MINT_TO_ZERO_ADDRESS";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "implementation";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "ERC1967InvalidImplementation";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ERC1967NonPayable";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ERC20TransferSlippage";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ETHTransferFailed";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "recipient";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "amount";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "ETHWithdrawFailed";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "FailedInnerCall";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "FirstMinterAddressZero";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "amount";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "contractValue";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "FundsWithdrawInsolvent";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "IncorrectAmountSent";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "InvalidAdminAction";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "InvalidInitialization";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "mintTo";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "merkleProof";
            readonly internalType: "bytes32[]";
            readonly type: "bytes32[]";
        }, {
            readonly name: "merkleRoot";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly name: "InvalidMerkleProof";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "InvalidMintSchedule";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "InvalidOwnerForAssociatedZoraSparks";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "InvalidPremintVersion";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "InvalidRecipient";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "InvalidSignature";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "InvalidSignatureVersion";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "magicValue";
            readonly internalType: "bytes4";
            readonly type: "bytes4";
        }];
        readonly name: "InvalidSigner";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "InvalidTokenPrice";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "MintNotYetStarted";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "MintWithSparksNotSupportedOnContract";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "Mint_InsolventSaleTransfer";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "Mint_InvalidMintArrayLength";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "Mint_TokenIDMintNotAllowed";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "Mint_UnknownCommand";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "Mint_ValueTransferFail";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "MinterContractAlreadyExists";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "MinterContractDoesNotExist";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "NewOwnerNeedsToBeAdmin";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "NoTokensTransferred";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "NoUriForNonexistentToken";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "NonEthRedemption";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "handler";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "NotARedeemHandler";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "NotInitializing";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "NotSelfCall";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "NotZoraSparks1155";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "OnlyTransfersFromZoraSparks";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "owner";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "OwnableInvalidOwner";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "account";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "OwnableUnauthorizedAccount";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "PremintDeleted";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "PremintExecutorCannotBeZero";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "caller";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "recipient";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "amount";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "ProtocolRewardsWithdrawFailed";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ReentrancyGuardReentrantCall";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "Renderer_NotValidRendererContract";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "token";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "SafeERC20FailedOperation";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "SaleEnded";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "SaleHasNotStarted";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "targetContract";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "Sale_CannotCallNonSalesContract";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "TokenAlreadyCreated";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "TokenDoesNotExist";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "expected";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "actual";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "TokenIdMismatch";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "storedTokenAddress";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "expectedTokenAddress";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "TokenMismatch";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "TokenNotMintable";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "UUPSUnauthorizedCallContext";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "slot";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly name: "UUPSUnsupportedProxiableUUID";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "selector";
            readonly internalType: "bytes4";
            readonly type: "bytes4";
        }];
        readonly name: "UnknownUserAction";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "expected";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "actual";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly name: "UpgradeToMismatchedContractName";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "user";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "limit";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "requestedAmount";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "UserExceedsMintLimit";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "user";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "role";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "UserMissingRoleForToken";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "WrongValueSent";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "premintSignerContractFailedToRecoverSigner";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "premintSignerContractNotAContract";
    }];
};
/**
 * - [__View Contract on Base Basescan__](https://basescan.org/address/0x7777777b3eA6C126942BB14dD5C3C11D365C385D)
 * - [__View Contract on Base Sepolia Basescan__](https://sepolia.basescan.org/address/0x7777777b3eA6C126942BB14dD5C3C11D365C385D)
 * - [__View Contract on Zora Explorer__](https://explorer.zora.energy/address/0x7777777b3eA6C126942BB14dD5C3C11D365C385D)
 * - [__View Contract on Zora Sepolia Zora Sepolia Explorer__](https://sepolia.explorer.zora.energy//address/0x7777777b3eA6C126942BB14dD5C3C11D365C385D)
 */
export declare const zoraSparks1155ABI: readonly [{
    readonly type: "constructor";
    readonly inputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "ETH_ADDRESS";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "MINIMUM_ERC20_PRICE";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "MINIMUM_ETH_PRICE";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "NAME";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "VERSION";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "authority";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "account";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "id";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "balanceOf";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "account";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "balanceOfAccount";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "accounts";
        readonly internalType: "address[]";
        readonly type: "address[]";
    }, {
        readonly name: "ids";
        readonly internalType: "uint256[]";
        readonly type: "uint256[]";
    }];
    readonly name: "balanceOfBatch";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256[]";
        readonly type: "uint256[]";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "contractURI";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "tokenConfig";
        readonly internalType: "struct TokenConfig";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "price";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "tokenAddress";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "redeemHandler";
            readonly internalType: "address";
            readonly type: "address";
        }];
    }];
    readonly name: "createToken";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "eip712Domain";
    readonly outputs: readonly [{
        readonly name: "fields";
        readonly internalType: "bytes1";
        readonly type: "bytes1";
    }, {
        readonly name: "name";
        readonly internalType: "string";
        readonly type: "string";
    }, {
        readonly name: "version";
        readonly internalType: "string";
        readonly type: "string";
    }, {
        readonly name: "chainId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "verifyingContract";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "salt";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }, {
        readonly name: "extensions";
        readonly internalType: "uint256[]";
        readonly type: "uint256[]";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "getTokenConfig";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "struct TokenConfig";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "price";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "tokenAddress";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "redeemHandler";
            readonly internalType: "address";
            readonly type: "address";
        }];
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "permit";
        readonly internalType: "struct IZoraSparks1155Managed.PermitBatch";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "owner";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "to";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "tokenIds";
            readonly internalType: "uint256[]";
            readonly type: "uint256[]";
        }, {
            readonly name: "quantities";
            readonly internalType: "uint256[]";
            readonly type: "uint256[]";
        }, {
            readonly name: "safeTransferData";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }, {
            readonly name: "deadline";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "nonce";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
    }];
    readonly name: "hashPermitBatch";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "permit";
        readonly internalType: "struct IZoraSparks1155Managed.PermitSingle";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "owner";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "to";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "quantity";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "safeTransferData";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }, {
            readonly name: "deadline";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "nonce";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
    }];
    readonly name: "hashPermitSingle";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "account";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "operator";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "isApprovedForAll";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "isConsumingScheduledOp";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes4";
        readonly type: "bytes4";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "permit";
        readonly internalType: "struct IZoraSparks1155Managed.PermitBatch";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "owner";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "to";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "tokenIds";
            readonly internalType: "uint256[]";
            readonly type: "uint256[]";
        }, {
            readonly name: "quantities";
            readonly internalType: "uint256[]";
            readonly type: "uint256[]";
        }, {
            readonly name: "safeTransferData";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }, {
            readonly name: "deadline";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "nonce";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
    }, {
        readonly name: "signature";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "isValidSignatureTransferBatch";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "permit";
        readonly internalType: "struct IZoraSparks1155Managed.PermitSingle";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "owner";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "to";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "quantity";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "safeTransferData";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }, {
            readonly name: "deadline";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "nonce";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
    }, {
        readonly name: "signature";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "isValidSignatureTransferSingle";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "tokenAddress";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "quantity";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "recipient";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "data";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "mintTokenWithERC20";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "quantity";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "recipient";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "data";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "mintTokenWithEth";
    readonly outputs: readonly [];
    readonly stateMutability: "payable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "name";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly stateMutability: "pure";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "owner";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "nonce";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "nonceUsed";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "newContractURI";
        readonly internalType: "string";
        readonly type: "string";
    }, {
        readonly name: "newBaseURI";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly name: "notifyURIsUpdated";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "newUri";
        readonly internalType: "string";
        readonly type: "string";
    }, {
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "notifyUpdatedTokenURI";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "permit";
        readonly internalType: "struct IZoraSparks1155Managed.PermitSingle";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "owner";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "to";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "quantity";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "safeTransferData";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }, {
            readonly name: "deadline";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "nonce";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
    }, {
        readonly name: "signature";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "permitSafeTransfer";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "permit";
        readonly internalType: "struct IZoraSparks1155Managed.PermitBatch";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "owner";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "to";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "tokenIds";
            readonly internalType: "uint256[]";
            readonly type: "uint256[]";
        }, {
            readonly name: "quantities";
            readonly internalType: "uint256[]";
            readonly type: "uint256[]";
        }, {
            readonly name: "safeTransferData";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }, {
            readonly name: "deadline";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "nonce";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
    }, {
        readonly name: "signature";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "permitSafeTransferBatch";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "quantity";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "recipient";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "redeem";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "struct Redemption";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "tokenAddress";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "valueRedeemed";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "tokenIds";
        readonly internalType: "uint256[]";
        readonly type: "uint256[]";
    }, {
        readonly name: "quantities";
        readonly internalType: "uint256[]";
        readonly type: "uint256[]";
    }, {
        readonly name: "recipient";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "redeemBatch";
    readonly outputs: readonly [{
        readonly name: "redemptions";
        readonly internalType: "struct Redemption[]";
        readonly type: "tuple[]";
        readonly components: readonly [{
            readonly name: "tokenAddress";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "valueRedeemed";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "from";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "to";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "ids";
        readonly internalType: "uint256[]";
        readonly type: "uint256[]";
    }, {
        readonly name: "values";
        readonly internalType: "uint256[]";
        readonly type: "uint256[]";
    }, {
        readonly name: "data";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "safeBatchTransferFrom";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "from";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "to";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "id";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "value";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "data";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "safeTransferFrom";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "operator";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "approved";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly name: "setApprovalForAll";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "newAuthority";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "setAuthority";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "interfaceId";
        readonly internalType: "bytes4";
        readonly type: "bytes4";
    }];
    readonly name: "supportsInterface";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "symbol";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly stateMutability: "pure";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "tokenExists";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "tokenPrice";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "uri";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "account";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "operator";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "approved";
        readonly internalType: "bool";
        readonly type: "bool";
        readonly indexed: false;
    }];
    readonly name: "ApprovalForAll";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "authority";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }];
    readonly name: "AuthorityUpdated";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [];
    readonly name: "ContractURIUpdated";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [];
    readonly name: "EIP712DomainChanged";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: true;
    }, {
        readonly name: "price";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: true;
    }, {
        readonly name: "tokenAddress";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }];
    readonly name: "TokenCreated";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "operator";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "from";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "to";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "ids";
        readonly internalType: "uint256[]";
        readonly type: "uint256[]";
        readonly indexed: false;
    }, {
        readonly name: "values";
        readonly internalType: "uint256[]";
        readonly type: "uint256[]";
        readonly indexed: false;
    }];
    readonly name: "TransferBatch";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "from";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }, {
        readonly name: "to";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }, {
        readonly name: "tokenIds";
        readonly internalType: "uint256[]";
        readonly type: "uint256[]";
        readonly indexed: false;
    }, {
        readonly name: "quantities";
        readonly internalType: "uint256[]";
        readonly type: "uint256[]";
        readonly indexed: false;
    }, {
        readonly name: "data";
        readonly internalType: "bytes";
        readonly type: "bytes";
        readonly indexed: false;
    }];
    readonly name: "TransferBatchWithData";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "operator";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "from";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "to";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "id";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }, {
        readonly name: "value";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }];
    readonly name: "TransferSingle";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "from";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }, {
        readonly name: "to";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }, {
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }, {
        readonly name: "quantity";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }, {
        readonly name: "data";
        readonly internalType: "bytes";
        readonly type: "bytes";
        readonly indexed: false;
    }];
    readonly name: "TransferSingleWithData";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "value";
        readonly internalType: "string";
        readonly type: "string";
        readonly indexed: false;
    }, {
        readonly name: "id";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: true;
    }];
    readonly name: "URI";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "contractURI";
        readonly internalType: "string";
        readonly type: "string";
        readonly indexed: false;
    }, {
        readonly name: "baseURI";
        readonly internalType: "string";
        readonly type: "string";
        readonly indexed: false;
    }];
    readonly name: "URIsUpdated";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "authority";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "AccessManagedInvalidAuthority";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "caller";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "delay";
        readonly internalType: "uint32";
        readonly type: "uint32";
    }];
    readonly name: "AccessManagedRequiredDelay";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "caller";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "AccessManagedUnauthorized";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "target";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "AddressEmptyCode";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "account";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "AddressInsufficientBalance";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "lengthA";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "lengthB";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "ArrayLengthMismatch";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "returnData";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "CallFailed";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "sender";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "balance";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "needed";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "ERC1155InsufficientBalance";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "approver";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "ERC1155InvalidApprover";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "idsLength";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "valuesLength";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "ERC1155InvalidArrayLength";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "operator";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "ERC1155InvalidOperator";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "receiver";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "ERC1155InvalidReceiver";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "sender";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "ERC1155InvalidSender";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "operator";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "owner";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "ERC1155MissingApprovalForAll";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ERC20TransferSlippage";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "deadline";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "ERC2612ExpiredSignature";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ETHTransferFailed";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "FailedInnerCall";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "IncorrectAmountSent";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "account";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "currentNonce";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "InvalidAccountNonce";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "InvalidRecipient";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "InvalidShortString";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "InvalidSignature";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "InvalidTokenPrice";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "NoUriForNonexistentToken";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "handler";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "NotARedeemHandler";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "token";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "SafeERC20FailedOperation";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "str";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly name: "StringTooLong";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "TokenAlreadyCreated";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "TokenDoesNotExist";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "storedTokenAddress";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "expectedTokenAddress";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "TokenMismatch";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "TokenNotMintable";
}];
/**
 * - [__View Contract on Base Basescan__](https://basescan.org/address/0x7777777b3eA6C126942BB14dD5C3C11D365C385D)
 * - [__View Contract on Base Sepolia Basescan__](https://sepolia.basescan.org/address/0x7777777b3eA6C126942BB14dD5C3C11D365C385D)
 * - [__View Contract on Zora Explorer__](https://explorer.zora.energy/address/0x7777777b3eA6C126942BB14dD5C3C11D365C385D)
 * - [__View Contract on Zora Sepolia Zora Sepolia Explorer__](https://sepolia.explorer.zora.energy//address/0x7777777b3eA6C126942BB14dD5C3C11D365C385D)
 */
export declare const zoraSparks1155Address: {
    readonly 8453: "0x7777777b3eA6C126942BB14dD5C3C11D365C385D";
    readonly 84532: "0x7777777b3eA6C126942BB14dD5C3C11D365C385D";
    readonly 7777777: "0x7777777b3eA6C126942BB14dD5C3C11D365C385D";
    readonly 999999999: "0x7777777b3eA6C126942BB14dD5C3C11D365C385D";
};
/**
 * - [__View Contract on Base Basescan__](https://basescan.org/address/0x7777777b3eA6C126942BB14dD5C3C11D365C385D)
 * - [__View Contract on Base Sepolia Basescan__](https://sepolia.basescan.org/address/0x7777777b3eA6C126942BB14dD5C3C11D365C385D)
 * - [__View Contract on Zora Explorer__](https://explorer.zora.energy/address/0x7777777b3eA6C126942BB14dD5C3C11D365C385D)
 * - [__View Contract on Zora Sepolia Zora Sepolia Explorer__](https://sepolia.explorer.zora.energy//address/0x7777777b3eA6C126942BB14dD5C3C11D365C385D)
 */
export declare const zoraSparks1155Config: {
    readonly address: {
        readonly 8453: "0x7777777b3eA6C126942BB14dD5C3C11D365C385D";
        readonly 84532: "0x7777777b3eA6C126942BB14dD5C3C11D365C385D";
        readonly 7777777: "0x7777777b3eA6C126942BB14dD5C3C11D365C385D";
        readonly 999999999: "0x7777777b3eA6C126942BB14dD5C3C11D365C385D";
    };
    readonly abi: readonly [{
        readonly type: "constructor";
        readonly inputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "ETH_ADDRESS";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "MINIMUM_ERC20_PRICE";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "MINIMUM_ETH_PRICE";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "NAME";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "VERSION";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "authority";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "account";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "id";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "balanceOf";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "account";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "balanceOfAccount";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "accounts";
            readonly internalType: "address[]";
            readonly type: "address[]";
        }, {
            readonly name: "ids";
            readonly internalType: "uint256[]";
            readonly type: "uint256[]";
        }];
        readonly name: "balanceOfBatch";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256[]";
            readonly type: "uint256[]";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "contractURI";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "tokenConfig";
            readonly internalType: "struct TokenConfig";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "price";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "tokenAddress";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "redeemHandler";
                readonly internalType: "address";
                readonly type: "address";
            }];
        }];
        readonly name: "createToken";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "eip712Domain";
        readonly outputs: readonly [{
            readonly name: "fields";
            readonly internalType: "bytes1";
            readonly type: "bytes1";
        }, {
            readonly name: "name";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "version";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "chainId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "verifyingContract";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "salt";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }, {
            readonly name: "extensions";
            readonly internalType: "uint256[]";
            readonly type: "uint256[]";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "getTokenConfig";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "struct TokenConfig";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "price";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "tokenAddress";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "redeemHandler";
                readonly internalType: "address";
                readonly type: "address";
            }];
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "permit";
            readonly internalType: "struct IZoraSparks1155Managed.PermitBatch";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "owner";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "to";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "tokenIds";
                readonly internalType: "uint256[]";
                readonly type: "uint256[]";
            }, {
                readonly name: "quantities";
                readonly internalType: "uint256[]";
                readonly type: "uint256[]";
            }, {
                readonly name: "safeTransferData";
                readonly internalType: "bytes";
                readonly type: "bytes";
            }, {
                readonly name: "deadline";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "nonce";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }];
        }];
        readonly name: "hashPermitBatch";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "permit";
            readonly internalType: "struct IZoraSparks1155Managed.PermitSingle";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "owner";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "to";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "tokenId";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "quantity";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "safeTransferData";
                readonly internalType: "bytes";
                readonly type: "bytes";
            }, {
                readonly name: "deadline";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "nonce";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }];
        }];
        readonly name: "hashPermitSingle";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "account";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "operator";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "isApprovedForAll";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "isConsumingScheduledOp";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes4";
            readonly type: "bytes4";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "permit";
            readonly internalType: "struct IZoraSparks1155Managed.PermitBatch";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "owner";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "to";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "tokenIds";
                readonly internalType: "uint256[]";
                readonly type: "uint256[]";
            }, {
                readonly name: "quantities";
                readonly internalType: "uint256[]";
                readonly type: "uint256[]";
            }, {
                readonly name: "safeTransferData";
                readonly internalType: "bytes";
                readonly type: "bytes";
            }, {
                readonly name: "deadline";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "nonce";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }];
        }, {
            readonly name: "signature";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "isValidSignatureTransferBatch";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "permit";
            readonly internalType: "struct IZoraSparks1155Managed.PermitSingle";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "owner";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "to";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "tokenId";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "quantity";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "safeTransferData";
                readonly internalType: "bytes";
                readonly type: "bytes";
            }, {
                readonly name: "deadline";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "nonce";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }];
        }, {
            readonly name: "signature";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "isValidSignatureTransferSingle";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "tokenAddress";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "quantity";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "recipient";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "data";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "mintTokenWithERC20";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "quantity";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "recipient";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "data";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "mintTokenWithEth";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "name";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly stateMutability: "pure";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "owner";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "nonce";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "nonceUsed";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "newContractURI";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "newBaseURI";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly name: "notifyURIsUpdated";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "newUri";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "notifyUpdatedTokenURI";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "permit";
            readonly internalType: "struct IZoraSparks1155Managed.PermitSingle";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "owner";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "to";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "tokenId";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "quantity";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "safeTransferData";
                readonly internalType: "bytes";
                readonly type: "bytes";
            }, {
                readonly name: "deadline";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "nonce";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }];
        }, {
            readonly name: "signature";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "permitSafeTransfer";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "permit";
            readonly internalType: "struct IZoraSparks1155Managed.PermitBatch";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "owner";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "to";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "tokenIds";
                readonly internalType: "uint256[]";
                readonly type: "uint256[]";
            }, {
                readonly name: "quantities";
                readonly internalType: "uint256[]";
                readonly type: "uint256[]";
            }, {
                readonly name: "safeTransferData";
                readonly internalType: "bytes";
                readonly type: "bytes";
            }, {
                readonly name: "deadline";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "nonce";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }];
        }, {
            readonly name: "signature";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "permitSafeTransferBatch";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "quantity";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "recipient";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "redeem";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "struct Redemption";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "tokenAddress";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "valueRedeemed";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }];
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "tokenIds";
            readonly internalType: "uint256[]";
            readonly type: "uint256[]";
        }, {
            readonly name: "quantities";
            readonly internalType: "uint256[]";
            readonly type: "uint256[]";
        }, {
            readonly name: "recipient";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "redeemBatch";
        readonly outputs: readonly [{
            readonly name: "redemptions";
            readonly internalType: "struct Redemption[]";
            readonly type: "tuple[]";
            readonly components: readonly [{
                readonly name: "tokenAddress";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "valueRedeemed";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }];
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "from";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "to";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "ids";
            readonly internalType: "uint256[]";
            readonly type: "uint256[]";
        }, {
            readonly name: "values";
            readonly internalType: "uint256[]";
            readonly type: "uint256[]";
        }, {
            readonly name: "data";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "safeBatchTransferFrom";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "from";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "to";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "id";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "value";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "data";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "safeTransferFrom";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "operator";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "approved";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly name: "setApprovalForAll";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "newAuthority";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "setAuthority";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "interfaceId";
            readonly internalType: "bytes4";
            readonly type: "bytes4";
        }];
        readonly name: "supportsInterface";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "symbol";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly stateMutability: "pure";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "tokenExists";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "tokenPrice";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "uri";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "account";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "operator";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "approved";
            readonly internalType: "bool";
            readonly type: "bool";
            readonly indexed: false;
        }];
        readonly name: "ApprovalForAll";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "authority";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }];
        readonly name: "AuthorityUpdated";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [];
        readonly name: "ContractURIUpdated";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [];
        readonly name: "EIP712DomainChanged";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: true;
        }, {
            readonly name: "price";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: true;
        }, {
            readonly name: "tokenAddress";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }];
        readonly name: "TokenCreated";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "operator";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "from";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "to";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "ids";
            readonly internalType: "uint256[]";
            readonly type: "uint256[]";
            readonly indexed: false;
        }, {
            readonly name: "values";
            readonly internalType: "uint256[]";
            readonly type: "uint256[]";
            readonly indexed: false;
        }];
        readonly name: "TransferBatch";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "from";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }, {
            readonly name: "to";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }, {
            readonly name: "tokenIds";
            readonly internalType: "uint256[]";
            readonly type: "uint256[]";
            readonly indexed: false;
        }, {
            readonly name: "quantities";
            readonly internalType: "uint256[]";
            readonly type: "uint256[]";
            readonly indexed: false;
        }, {
            readonly name: "data";
            readonly internalType: "bytes";
            readonly type: "bytes";
            readonly indexed: false;
        }];
        readonly name: "TransferBatchWithData";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "operator";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "from";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "to";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "id";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: false;
        }, {
            readonly name: "value";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: false;
        }];
        readonly name: "TransferSingle";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "from";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }, {
            readonly name: "to";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }, {
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: false;
        }, {
            readonly name: "quantity";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: false;
        }, {
            readonly name: "data";
            readonly internalType: "bytes";
            readonly type: "bytes";
            readonly indexed: false;
        }];
        readonly name: "TransferSingleWithData";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "value";
            readonly internalType: "string";
            readonly type: "string";
            readonly indexed: false;
        }, {
            readonly name: "id";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: true;
        }];
        readonly name: "URI";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "contractURI";
            readonly internalType: "string";
            readonly type: "string";
            readonly indexed: false;
        }, {
            readonly name: "baseURI";
            readonly internalType: "string";
            readonly type: "string";
            readonly indexed: false;
        }];
        readonly name: "URIsUpdated";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "authority";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "AccessManagedInvalidAuthority";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "caller";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "delay";
            readonly internalType: "uint32";
            readonly type: "uint32";
        }];
        readonly name: "AccessManagedRequiredDelay";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "caller";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "AccessManagedUnauthorized";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "target";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "AddressEmptyCode";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "account";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "AddressInsufficientBalance";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "lengthA";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "lengthB";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "ArrayLengthMismatch";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "returnData";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "CallFailed";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "sender";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "balance";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "needed";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "ERC1155InsufficientBalance";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "approver";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "ERC1155InvalidApprover";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "idsLength";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "valuesLength";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "ERC1155InvalidArrayLength";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "operator";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "ERC1155InvalidOperator";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "receiver";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "ERC1155InvalidReceiver";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "sender";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "ERC1155InvalidSender";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "operator";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "owner";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "ERC1155MissingApprovalForAll";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ERC20TransferSlippage";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "deadline";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "ERC2612ExpiredSignature";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ETHTransferFailed";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "FailedInnerCall";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "IncorrectAmountSent";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "account";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "currentNonce";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "InvalidAccountNonce";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "InvalidRecipient";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "InvalidShortString";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "InvalidSignature";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "InvalidTokenPrice";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "NoUriForNonexistentToken";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "handler";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "NotARedeemHandler";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "token";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "SafeERC20FailedOperation";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "str";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly name: "StringTooLong";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "TokenAlreadyCreated";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "TokenDoesNotExist";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "storedTokenAddress";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "expectedTokenAddress";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "TokenMismatch";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "TokenNotMintable";
    }];
};
/**
 * - [__View Contract on Base Basescan__](https://basescan.org/address/0x77777779acd6a96C0c57272112921A0b833c38fD)
 * - [__View Contract on Base Sepolia Basescan__](https://sepolia.basescan.org/address/0x77777779acd6a96C0c57272112921A0b833c38fD)
 * - [__View Contract on Zora Explorer__](https://explorer.zora.energy/address/0x77777779acd6a96C0c57272112921A0b833c38fD)
 * - [__View Contract on Zora Sepolia Zora Sepolia Explorer__](https://sepolia.explorer.zora.energy//address/0x77777779acd6a96C0c57272112921A0b833c38fD)
 */
export declare const zoraSparksManagerImplABI: readonly [{
    readonly type: "constructor";
    readonly inputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "UPGRADE_INTERFACE_VERSION";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "acceptOwnership";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "caller";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "";
        readonly internalType: "bytes4";
        readonly type: "bytes4";
    }];
    readonly name: "canCall";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "contractName";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly stateMutability: "pure";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "contractURI";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "contractVersion";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly stateMutability: "pure";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "tokenConfig";
        readonly internalType: "struct TokenConfig";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "price";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "tokenAddress";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "redeemHandler";
            readonly internalType: "address";
            readonly type: "address";
        }];
    }];
    readonly name: "createToken";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "implementation";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "defaultOwner";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "zoraSparksSalt";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }, {
        readonly name: "zoraSparksCreationCode";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }, {
        readonly name: "initialEthTokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "initialEthTokenPrice";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "newBaseURI";
        readonly internalType: "string";
        readonly type: "string";
    }, {
        readonly name: "newContractURI";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly name: "initialize";
    readonly outputs: readonly [{
        readonly name: "sparks";
        readonly internalType: "contract IZoraSparks1155";
        readonly type: "address";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "tokenAddress";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "quantity";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "recipient";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "mintWithERC20";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "quantity";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "recipient";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "mintWithEth";
    readonly outputs: readonly [];
    readonly stateMutability: "payable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "owner";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "pendingOwner";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "proxiableUUID";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "renounceOwnership";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "newContractURI";
        readonly internalType: "string";
        readonly type: "string";
    }, {
        readonly name: "newBaseURI";
        readonly internalType: "string";
        readonly type: "string";
    }, {
        readonly name: "tokenIdsToNotifyUpdate";
        readonly internalType: "uint256[]";
        readonly type: "uint256[]";
    }];
    readonly name: "setMetadataURIs";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "newOwner";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "transferOwnership";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "newImplementation";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "data";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "upgradeToAndCall";
    readonly outputs: readonly [];
    readonly stateMutability: "payable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "uri";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "zoraSparks1155";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "contract IZoraSparks1155";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "version";
        readonly internalType: "uint64";
        readonly type: "uint64";
        readonly indexed: false;
    }];
    readonly name: "Initialized";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "previousOwner";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "newOwner";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }];
    readonly name: "OwnershipTransferStarted";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "previousOwner";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "newOwner";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }];
    readonly name: "OwnershipTransferred";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "contractURI";
        readonly internalType: "string";
        readonly type: "string";
        readonly indexed: false;
    }, {
        readonly name: "baseURI";
        readonly internalType: "string";
        readonly type: "string";
        readonly indexed: false;
    }];
    readonly name: "URIsUpdated";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "implementation";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }];
    readonly name: "Upgraded";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "target";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "AddressEmptyCode";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "account";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "AddressInsufficientBalance";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "lengthA";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "lengthB";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "ArrayLengthMismatch";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "Create2EmptyBytecode";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "Create2FailedDeployment";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "balance";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "needed";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "Create2InsufficientBalance";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "DefaultOwnerCannotBeZero";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "implementation";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "ERC1967InvalidImplementation";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ERC1967NonPayable";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ERC20TransferSlippage";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ETHTransferFailed";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "FailedInnerCall";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "IncorrectAmountSent";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "InvalidAdminAction";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "InvalidInitialization";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "InvalidOwnerForAssociatedZoraSparks";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "InvalidRecipient";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "InvalidTokenPrice";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "NoUriForNonexistentToken";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "handler";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "NotARedeemHandler";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "NotInitializing";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "owner";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "OwnableInvalidOwner";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "account";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "OwnableUnauthorizedAccount";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "PremintExecutorCannotBeZero";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ReentrancyGuardReentrantCall";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "token";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "SafeERC20FailedOperation";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "TokenAlreadyCreated";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "TokenDoesNotExist";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "storedTokenAddress";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "expectedTokenAddress";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "TokenMismatch";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "TokenNotMintable";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "UUPSUnauthorizedCallContext";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "slot";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly name: "UUPSUnsupportedProxiableUUID";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "expected";
        readonly internalType: "string";
        readonly type: "string";
    }, {
        readonly name: "actual";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly name: "UpgradeToMismatchedContractName";
}];
/**
 * - [__View Contract on Base Basescan__](https://basescan.org/address/0x77777779acd6a96C0c57272112921A0b833c38fD)
 * - [__View Contract on Base Sepolia Basescan__](https://sepolia.basescan.org/address/0x77777779acd6a96C0c57272112921A0b833c38fD)
 * - [__View Contract on Zora Explorer__](https://explorer.zora.energy/address/0x77777779acd6a96C0c57272112921A0b833c38fD)
 * - [__View Contract on Zora Sepolia Zora Sepolia Explorer__](https://sepolia.explorer.zora.energy//address/0x77777779acd6a96C0c57272112921A0b833c38fD)
 */
export declare const zoraSparksManagerImplAddress: {
    readonly 8453: "0x77777779acd6a96C0c57272112921A0b833c38fD";
    readonly 84532: "0x77777779acd6a96C0c57272112921A0b833c38fD";
    readonly 7777777: "0x77777779acd6a96C0c57272112921A0b833c38fD";
    readonly 999999999: "0x77777779acd6a96C0c57272112921A0b833c38fD";
};
/**
 * - [__View Contract on Base Basescan__](https://basescan.org/address/0x77777779acd6a96C0c57272112921A0b833c38fD)
 * - [__View Contract on Base Sepolia Basescan__](https://sepolia.basescan.org/address/0x77777779acd6a96C0c57272112921A0b833c38fD)
 * - [__View Contract on Zora Explorer__](https://explorer.zora.energy/address/0x77777779acd6a96C0c57272112921A0b833c38fD)
 * - [__View Contract on Zora Sepolia Zora Sepolia Explorer__](https://sepolia.explorer.zora.energy//address/0x77777779acd6a96C0c57272112921A0b833c38fD)
 */
export declare const zoraSparksManagerImplConfig: {
    readonly address: {
        readonly 8453: "0x77777779acd6a96C0c57272112921A0b833c38fD";
        readonly 84532: "0x77777779acd6a96C0c57272112921A0b833c38fD";
        readonly 7777777: "0x77777779acd6a96C0c57272112921A0b833c38fD";
        readonly 999999999: "0x77777779acd6a96C0c57272112921A0b833c38fD";
    };
    readonly abi: readonly [{
        readonly type: "constructor";
        readonly inputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "UPGRADE_INTERFACE_VERSION";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "acceptOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "caller";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "";
            readonly internalType: "bytes4";
            readonly type: "bytes4";
        }];
        readonly name: "canCall";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "contractName";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly stateMutability: "pure";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "contractURI";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "contractVersion";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly stateMutability: "pure";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "tokenConfig";
            readonly internalType: "struct TokenConfig";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "price";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "tokenAddress";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "redeemHandler";
                readonly internalType: "address";
                readonly type: "address";
            }];
        }];
        readonly name: "createToken";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "implementation";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "defaultOwner";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "zoraSparksSalt";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }, {
            readonly name: "zoraSparksCreationCode";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }, {
            readonly name: "initialEthTokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "initialEthTokenPrice";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "newBaseURI";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "newContractURI";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly name: "initialize";
        readonly outputs: readonly [{
            readonly name: "sparks";
            readonly internalType: "contract IZoraSparks1155";
            readonly type: "address";
        }];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "tokenAddress";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "quantity";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "recipient";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "mintWithERC20";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "quantity";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "recipient";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "mintWithEth";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "owner";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "pendingOwner";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "proxiableUUID";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "renounceOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "newContractURI";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "newBaseURI";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "tokenIdsToNotifyUpdate";
            readonly internalType: "uint256[]";
            readonly type: "uint256[]";
        }];
        readonly name: "setMetadataURIs";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "newOwner";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "transferOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "newImplementation";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "data";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "upgradeToAndCall";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "uri";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "zoraSparks1155";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "contract IZoraSparks1155";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "version";
            readonly internalType: "uint64";
            readonly type: "uint64";
            readonly indexed: false;
        }];
        readonly name: "Initialized";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "previousOwner";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "newOwner";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }];
        readonly name: "OwnershipTransferStarted";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "previousOwner";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "newOwner";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }];
        readonly name: "OwnershipTransferred";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "contractURI";
            readonly internalType: "string";
            readonly type: "string";
            readonly indexed: false;
        }, {
            readonly name: "baseURI";
            readonly internalType: "string";
            readonly type: "string";
            readonly indexed: false;
        }];
        readonly name: "URIsUpdated";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "implementation";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }];
        readonly name: "Upgraded";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "target";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "AddressEmptyCode";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "account";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "AddressInsufficientBalance";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "lengthA";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "lengthB";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "ArrayLengthMismatch";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "Create2EmptyBytecode";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "Create2FailedDeployment";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "balance";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "needed";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "Create2InsufficientBalance";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "DefaultOwnerCannotBeZero";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "implementation";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "ERC1967InvalidImplementation";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ERC1967NonPayable";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ERC20TransferSlippage";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ETHTransferFailed";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "FailedInnerCall";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "IncorrectAmountSent";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "InvalidAdminAction";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "InvalidInitialization";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "InvalidOwnerForAssociatedZoraSparks";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "InvalidRecipient";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "InvalidTokenPrice";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "NoUriForNonexistentToken";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "handler";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "NotARedeemHandler";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "NotInitializing";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "owner";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "OwnableInvalidOwner";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "account";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "OwnableUnauthorizedAccount";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "PremintExecutorCannotBeZero";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ReentrancyGuardReentrantCall";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "token";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "SafeERC20FailedOperation";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "TokenAlreadyCreated";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "TokenDoesNotExist";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "storedTokenAddress";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "expectedTokenAddress";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "TokenMismatch";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "TokenNotMintable";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "UUPSUnauthorizedCallContext";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "slot";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly name: "UUPSUnsupportedProxiableUUID";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "expected";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "actual";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly name: "UpgradeToMismatchedContractName";
    }];
};
/**
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x777777722D078c97c6ad07d9f36801e653E356Ae)
 * - [__View Contract on Op Mainnet Optimism Explorer__](https://optimistic.etherscan.io/address/0x777777722D078c97c6ad07d9f36801e653E356Ae)
 * - [__View Contract on Base Basescan__](https://basescan.org/address/0x777777722D078c97c6ad07d9f36801e653E356Ae)
 * - [__View Contract on Arbitrum One Arbiscan__](https://arbiscan.io/address/0x777777722D078c97c6ad07d9f36801e653E356Ae)
 * - [__View Contract on Blast Blastscan__](https://blastscan.io/address/0x777777722D078c97c6ad07d9f36801e653E356Ae)
 * - [__View Contract on Base Sepolia Basescan__](https://sepolia.basescan.org/address/0x777777722D078c97c6ad07d9f36801e653E356Ae)
 * - [__View Contract on Arbitrum Sepolia Arbiscan__](https://sepolia.arbiscan.io/address/0x777777722D078c97c6ad07d9f36801e653E356Ae)
 * - [__View Contract on Zora Explorer__](https://explorer.zora.energy/address/0x777777722D078c97c6ad07d9f36801e653E356Ae)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x777777722D078c97c6ad07d9f36801e653E356Ae)
 * - [__View Contract on Zora Sepolia Zora Sepolia Explorer__](https://sepolia.explorer.zora.energy//address/0x777777722D078c97c6ad07d9f36801e653E356Ae)
 */
export declare const zoraTimedSaleStrategyABI: readonly [{
    readonly type: "constructor";
    readonly inputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "UPGRADE_INTERFACE_VERSION";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "acceptOwnership";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "collection";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "erc20zAddress";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "calculateERC20zActivate";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "struct IZoraTimedSaleStrategy.ERC20zActivate";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "finalTotalERC20ZSupply";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "erc20Reserve";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "erc20Liquidity";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "excessERC20";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "excessERC1155";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "additionalERC1155ToMint";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "final1155Supply";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "quantity";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "computeRewards";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "struct IZoraTimedSaleStrategy.RewardsSettings";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "totalReward";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "creatorReward";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "createReferralReward";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "mintReferralReward";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "marketReward";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "zoraReward";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
    }];
    readonly stateMutability: "pure";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "quantity";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "computeRewardsV2";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "struct IZoraTimedSaleStrategy.RewardsSettings";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "totalReward";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "creatorReward";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "createReferralReward";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "mintReferralReward";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "marketReward";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "zoraReward";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
    }];
    readonly stateMutability: "pure";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "contractName";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly stateMutability: "pure";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "contractURI";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly stateMutability: "pure";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "contractVersion";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly stateMutability: "pure";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "erc20zImpl";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "collection";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "getCreateReferral";
    readonly outputs: readonly [{
        readonly name: "createReferral";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "implementation";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "_defaultOwner";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "_zoraRewardRecipient";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "_erc20zImpl";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "_protocolRewards";
        readonly internalType: "contract IProtocolRewards";
        readonly type: "address";
    }];
    readonly name: "initialize";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "collection";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "launchMarket";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "mintTo";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "quantity";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "collection";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "mintReferral";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "comment";
        readonly internalType: "string";
        readonly type: "string";
    }];
    readonly name: "mint";
    readonly outputs: readonly [];
    readonly stateMutability: "payable";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "owner";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "pendingOwner";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "protocolRewards";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "contract IProtocolRewards";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "proxiableUUID";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "renounceOwnership";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "requestMint";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "struct ICreatorCommands.CommandSet";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "commands";
            readonly internalType: "struct ICreatorCommands.Command[]";
            readonly type: "tuple[]";
            readonly components: readonly [{
                readonly name: "method";
                readonly internalType: "enum ICreatorCommands.CreatorActions";
                readonly type: "uint8";
            }, {
                readonly name: "args";
                readonly internalType: "bytes";
                readonly type: "bytes";
            }];
        }, {
            readonly name: "at";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
    }];
    readonly stateMutability: "pure";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "collection";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "sale";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "struct IZoraTimedSaleStrategy.SaleStorage";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "erc20zAddress";
            readonly internalType: "address payable";
            readonly type: "address";
        }, {
            readonly name: "saleStart";
            readonly internalType: "uint64";
            readonly type: "uint64";
        }, {
            readonly name: "poolAddress";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "saleEnd";
            readonly internalType: "uint64";
            readonly type: "uint64";
        }, {
            readonly name: "secondaryActivated";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "collection";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }];
    readonly name: "saleV2";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "struct IZoraTimedSaleStrategy.SaleData";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "saleStart";
            readonly internalType: "uint64";
            readonly type: "uint64";
        }, {
            readonly name: "marketCountdown";
            readonly internalType: "uint64";
            readonly type: "uint64";
        }, {
            readonly name: "saleEnd";
            readonly internalType: "uint64";
            readonly type: "uint64";
        }, {
            readonly name: "secondaryActivated";
            readonly internalType: "bool";
            readonly type: "bool";
        }, {
            readonly name: "minimumMarketEth";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "poolAddress";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "erc20zAddress";
            readonly internalType: "address payable";
            readonly type: "address";
        }, {
            readonly name: "name";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "symbol";
            readonly internalType: "string";
            readonly type: "string";
        }];
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "salesConfig";
        readonly internalType: "struct IZoraTimedSaleStrategy.SalesConfig";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "saleStart";
            readonly internalType: "uint64";
            readonly type: "uint64";
        }, {
            readonly name: "saleEnd";
            readonly internalType: "uint64";
            readonly type: "uint64";
        }, {
            readonly name: "name";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "symbol";
            readonly internalType: "string";
            readonly type: "string";
        }];
    }];
    readonly name: "setSale";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "salesConfig";
        readonly internalType: "struct IZoraTimedSaleStrategy.SalesConfigV2";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "saleStart";
            readonly internalType: "uint64";
            readonly type: "uint64";
        }, {
            readonly name: "marketCountdown";
            readonly internalType: "uint64";
            readonly type: "uint64";
        }, {
            readonly name: "minimumMarketEth";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "name";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "symbol";
            readonly internalType: "string";
            readonly type: "string";
        }];
    }];
    readonly name: "setSaleV2";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "recipient";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "setZoraRewardRecipient";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "interfaceId";
        readonly internalType: "bytes4";
        readonly type: "bytes4";
    }];
    readonly name: "supportsInterface";
    readonly outputs: readonly [{
        readonly name: "";
        readonly internalType: "bool";
        readonly type: "bool";
    }];
    readonly stateMutability: "pure";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "newOwner";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "transferOwnership";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "amount0Delta";
        readonly internalType: "int256";
        readonly type: "int256";
    }, {
        readonly name: "amount1Delta";
        readonly internalType: "int256";
        readonly type: "int256";
    }, {
        readonly name: "";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "uniswapV3SwapCallback";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
    }, {
        readonly name: "newStartTime";
        readonly internalType: "uint64";
        readonly type: "uint64";
    }, {
        readonly name: "newMarketCountdown";
        readonly internalType: "uint64";
        readonly type: "uint64";
    }];
    readonly name: "updateSale";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly inputs: readonly [{
        readonly name: "newImplementation";
        readonly internalType: "address";
        readonly type: "address";
    }, {
        readonly name: "data";
        readonly internalType: "bytes";
        readonly type: "bytes";
    }];
    readonly name: "upgradeToAndCall";
    readonly outputs: readonly [];
    readonly stateMutability: "payable";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "version";
        readonly internalType: "uint64";
        readonly type: "uint64";
        readonly indexed: false;
    }];
    readonly name: "Initialized";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "collection";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: true;
    }, {
        readonly name: "erc20zAddress";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }, {
        readonly name: "poolAddress";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }];
    readonly name: "MarketLaunched";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "sender";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "collection";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: true;
    }, {
        readonly name: "quantity";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }, {
        readonly name: "comment";
        readonly internalType: "string";
        readonly type: "string";
        readonly indexed: false;
    }];
    readonly name: "MintComment";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "previousOwner";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "newOwner";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }];
    readonly name: "OwnershipTransferStarted";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "previousOwner";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "newOwner";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }];
    readonly name: "OwnershipTransferred";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "collection";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: true;
    }, {
        readonly name: "salesConfig";
        readonly internalType: "struct IZoraTimedSaleStrategy.SalesConfig";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "saleStart";
            readonly internalType: "uint64";
            readonly type: "uint64";
        }, {
            readonly name: "saleEnd";
            readonly internalType: "uint64";
            readonly type: "uint64";
        }, {
            readonly name: "name";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "symbol";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly indexed: false;
    }, {
        readonly name: "erc20zAddress";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }, {
        readonly name: "poolAddress";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }, {
        readonly name: "mintFee";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }];
    readonly name: "SaleSet";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "collection";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: true;
    }, {
        readonly name: "saleData";
        readonly internalType: "struct IZoraTimedSaleStrategy.SaleData";
        readonly type: "tuple";
        readonly components: readonly [{
            readonly name: "saleStart";
            readonly internalType: "uint64";
            readonly type: "uint64";
        }, {
            readonly name: "marketCountdown";
            readonly internalType: "uint64";
            readonly type: "uint64";
        }, {
            readonly name: "saleEnd";
            readonly internalType: "uint64";
            readonly type: "uint64";
        }, {
            readonly name: "secondaryActivated";
            readonly internalType: "bool";
            readonly type: "bool";
        }, {
            readonly name: "minimumMarketEth";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "poolAddress";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "erc20zAddress";
            readonly internalType: "address payable";
            readonly type: "address";
        }, {
            readonly name: "name";
            readonly internalType: "string";
            readonly type: "string";
        }, {
            readonly name: "symbol";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly indexed: false;
    }, {
        readonly name: "mintFee";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }];
    readonly name: "SaleSetV2";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "implementation";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }];
    readonly name: "Upgraded";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "prevRecipient";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "newRecipient";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }];
    readonly name: "ZoraRewardRecipientUpdated";
}, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly name: "collection";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: true;
    }, {
        readonly name: "tokenId";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: true;
    }, {
        readonly name: "creator";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }, {
        readonly name: "creatorReward";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }, {
        readonly name: "createReferral";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }, {
        readonly name: "createReferralReward";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }, {
        readonly name: "mintReferral";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }, {
        readonly name: "mintReferralReward";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }, {
        readonly name: "market";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }, {
        readonly name: "marketReward";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }, {
        readonly name: "zoraRecipient";
        readonly internalType: "address";
        readonly type: "address";
        readonly indexed: false;
    }, {
        readonly name: "zoraReward";
        readonly internalType: "uint256";
        readonly type: "uint256";
        readonly indexed: false;
    }];
    readonly name: "ZoraTimedSaleStrategyRewards";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "target";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "AddressEmptyCode";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "account";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "AddressInsufficientBalance";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "AddressZero";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ERC1167FailedCreateClone";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "implementation";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "ERC1967InvalidImplementation";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ERC1967NonPayable";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "EndTimeCannotBeInThePast";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "FailedInnerCall";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "InsufficientFunds";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "InvalidInitialization";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "MarketAlreadyLaunched";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "MarketMinimumNotReached";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "MinimumMarketEthNotMet";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "NeedsToBeAtLeastOneSaleToStartMarket";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "NotInitializing";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "OnlyZoraRewardRecipient";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "owner";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "OwnableInvalidOwner";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "account";
        readonly internalType: "address";
        readonly type: "address";
    }];
    readonly name: "OwnableUnauthorizedAccount";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ReentrancyGuardReentrantCall";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "RequestMintInvalidUseMint";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ResetSaleNotAvailable";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "SaleAlreadySet";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "SaleEnded";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "SaleHasNotStarted";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "SaleInProgress";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "SaleNotSet";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "SaleV2AlreadyStarted";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "SaleV2Ended";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "SaleV2NotSet";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "StartTimeCannotBeAfterEndTime";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "UUPSUnauthorizedCallContext";
}, {
    readonly type: "error";
    readonly inputs: readonly [{
        readonly name: "slot";
        readonly internalType: "bytes32";
        readonly type: "bytes32";
    }];
    readonly name: "UUPSUnsupportedProxiableUUID";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "WrongValueSent";
}, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ZoraCreator1155ContractNeedsToSupportReduceSupply";
}];
/**
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x777777722D078c97c6ad07d9f36801e653E356Ae)
 * - [__View Contract on Op Mainnet Optimism Explorer__](https://optimistic.etherscan.io/address/0x777777722D078c97c6ad07d9f36801e653E356Ae)
 * - [__View Contract on Base Basescan__](https://basescan.org/address/0x777777722D078c97c6ad07d9f36801e653E356Ae)
 * - [__View Contract on Arbitrum One Arbiscan__](https://arbiscan.io/address/0x777777722D078c97c6ad07d9f36801e653E356Ae)
 * - [__View Contract on Blast Blastscan__](https://blastscan.io/address/0x777777722D078c97c6ad07d9f36801e653E356Ae)
 * - [__View Contract on Base Sepolia Basescan__](https://sepolia.basescan.org/address/0x777777722D078c97c6ad07d9f36801e653E356Ae)
 * - [__View Contract on Arbitrum Sepolia Arbiscan__](https://sepolia.arbiscan.io/address/0x777777722D078c97c6ad07d9f36801e653E356Ae)
 * - [__View Contract on Zora Explorer__](https://explorer.zora.energy/address/0x777777722D078c97c6ad07d9f36801e653E356Ae)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x777777722D078c97c6ad07d9f36801e653E356Ae)
 * - [__View Contract on Zora Sepolia Zora Sepolia Explorer__](https://sepolia.explorer.zora.energy//address/0x777777722D078c97c6ad07d9f36801e653E356Ae)
 */
export declare const zoraTimedSaleStrategyAddress: {
    readonly 1: "0x777777722D078c97c6ad07d9f36801e653E356Ae";
    readonly 10: "0x777777722D078c97c6ad07d9f36801e653E356Ae";
    readonly 8453: "0x777777722D078c97c6ad07d9f36801e653E356Ae";
    readonly 42161: "0x777777722D078c97c6ad07d9f36801e653E356Ae";
    readonly 81457: "0x777777722D078c97c6ad07d9f36801e653E356Ae";
    readonly 84532: "0x777777722D078c97c6ad07d9f36801e653E356Ae";
    readonly 421614: "0x777777722D078c97c6ad07d9f36801e653E356Ae";
    readonly 7777777: "0x777777722D078c97c6ad07d9f36801e653E356Ae";
    readonly 11155111: "0x777777722D078c97c6ad07d9f36801e653E356Ae";
    readonly 999999999: "0x777777722D078c97c6ad07d9f36801e653E356Ae";
};
/**
 * - [__View Contract on Ethereum Etherscan__](https://etherscan.io/address/0x777777722D078c97c6ad07d9f36801e653E356Ae)
 * - [__View Contract on Op Mainnet Optimism Explorer__](https://optimistic.etherscan.io/address/0x777777722D078c97c6ad07d9f36801e653E356Ae)
 * - [__View Contract on Base Basescan__](https://basescan.org/address/0x777777722D078c97c6ad07d9f36801e653E356Ae)
 * - [__View Contract on Arbitrum One Arbiscan__](https://arbiscan.io/address/0x777777722D078c97c6ad07d9f36801e653E356Ae)
 * - [__View Contract on Blast Blastscan__](https://blastscan.io/address/0x777777722D078c97c6ad07d9f36801e653E356Ae)
 * - [__View Contract on Base Sepolia Basescan__](https://sepolia.basescan.org/address/0x777777722D078c97c6ad07d9f36801e653E356Ae)
 * - [__View Contract on Arbitrum Sepolia Arbiscan__](https://sepolia.arbiscan.io/address/0x777777722D078c97c6ad07d9f36801e653E356Ae)
 * - [__View Contract on Zora Explorer__](https://explorer.zora.energy/address/0x777777722D078c97c6ad07d9f36801e653E356Ae)
 * - [__View Contract on Sepolia Etherscan__](https://sepolia.etherscan.io/address/0x777777722D078c97c6ad07d9f36801e653E356Ae)
 * - [__View Contract on Zora Sepolia Zora Sepolia Explorer__](https://sepolia.explorer.zora.energy//address/0x777777722D078c97c6ad07d9f36801e653E356Ae)
 */
export declare const zoraTimedSaleStrategyConfig: {
    readonly address: {
        readonly 1: "0x777777722D078c97c6ad07d9f36801e653E356Ae";
        readonly 10: "0x777777722D078c97c6ad07d9f36801e653E356Ae";
        readonly 8453: "0x777777722D078c97c6ad07d9f36801e653E356Ae";
        readonly 42161: "0x777777722D078c97c6ad07d9f36801e653E356Ae";
        readonly 81457: "0x777777722D078c97c6ad07d9f36801e653E356Ae";
        readonly 84532: "0x777777722D078c97c6ad07d9f36801e653E356Ae";
        readonly 421614: "0x777777722D078c97c6ad07d9f36801e653E356Ae";
        readonly 7777777: "0x777777722D078c97c6ad07d9f36801e653E356Ae";
        readonly 11155111: "0x777777722D078c97c6ad07d9f36801e653E356Ae";
        readonly 999999999: "0x777777722D078c97c6ad07d9f36801e653E356Ae";
    };
    readonly abi: readonly [{
        readonly type: "constructor";
        readonly inputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "UPGRADE_INTERFACE_VERSION";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "acceptOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "collection";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "erc20zAddress";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "calculateERC20zActivate";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "struct IZoraTimedSaleStrategy.ERC20zActivate";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "finalTotalERC20ZSupply";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "erc20Reserve";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "erc20Liquidity";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "excessERC20";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "excessERC1155";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "additionalERC1155ToMint";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "final1155Supply";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }];
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "quantity";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "computeRewards";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "struct IZoraTimedSaleStrategy.RewardsSettings";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "totalReward";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "creatorReward";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "createReferralReward";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "mintReferralReward";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "marketReward";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "zoraReward";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }];
        }];
        readonly stateMutability: "pure";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "quantity";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "computeRewardsV2";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "struct IZoraTimedSaleStrategy.RewardsSettings";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "totalReward";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "creatorReward";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "createReferralReward";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "mintReferralReward";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "marketReward";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "zoraReward";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }];
        }];
        readonly stateMutability: "pure";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "contractName";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly stateMutability: "pure";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "contractURI";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly stateMutability: "pure";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "contractVersion";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly stateMutability: "pure";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "erc20zImpl";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "collection";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "getCreateReferral";
        readonly outputs: readonly [{
            readonly name: "createReferral";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "implementation";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "_defaultOwner";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "_zoraRewardRecipient";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "_erc20zImpl";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "_protocolRewards";
            readonly internalType: "contract IProtocolRewards";
            readonly type: "address";
        }];
        readonly name: "initialize";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "collection";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "launchMarket";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "mintTo";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "quantity";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "collection";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "mintReferral";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "comment";
            readonly internalType: "string";
            readonly type: "string";
        }];
        readonly name: "mint";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "owner";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "pendingOwner";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "protocolRewards";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "contract IProtocolRewards";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "proxiableUUID";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [];
        readonly name: "renounceOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "requestMint";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "struct ICreatorCommands.CommandSet";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "commands";
                readonly internalType: "struct ICreatorCommands.Command[]";
                readonly type: "tuple[]";
                readonly components: readonly [{
                    readonly name: "method";
                    readonly internalType: "enum ICreatorCommands.CreatorActions";
                    readonly type: "uint8";
                }, {
                    readonly name: "args";
                    readonly internalType: "bytes";
                    readonly type: "bytes";
                }];
            }, {
                readonly name: "at";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }];
        }];
        readonly stateMutability: "pure";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "collection";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "sale";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "struct IZoraTimedSaleStrategy.SaleStorage";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "erc20zAddress";
                readonly internalType: "address payable";
                readonly type: "address";
            }, {
                readonly name: "saleStart";
                readonly internalType: "uint64";
                readonly type: "uint64";
            }, {
                readonly name: "poolAddress";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "saleEnd";
                readonly internalType: "uint64";
                readonly type: "uint64";
            }, {
                readonly name: "secondaryActivated";
                readonly internalType: "bool";
                readonly type: "bool";
            }];
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "collection";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }];
        readonly name: "saleV2";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "struct IZoraTimedSaleStrategy.SaleData";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "saleStart";
                readonly internalType: "uint64";
                readonly type: "uint64";
            }, {
                readonly name: "marketCountdown";
                readonly internalType: "uint64";
                readonly type: "uint64";
            }, {
                readonly name: "saleEnd";
                readonly internalType: "uint64";
                readonly type: "uint64";
            }, {
                readonly name: "secondaryActivated";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "minimumMarketEth";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "poolAddress";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "erc20zAddress";
                readonly internalType: "address payable";
                readonly type: "address";
            }, {
                readonly name: "name";
                readonly internalType: "string";
                readonly type: "string";
            }, {
                readonly name: "symbol";
                readonly internalType: "string";
                readonly type: "string";
            }];
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "salesConfig";
            readonly internalType: "struct IZoraTimedSaleStrategy.SalesConfig";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "saleStart";
                readonly internalType: "uint64";
                readonly type: "uint64";
            }, {
                readonly name: "saleEnd";
                readonly internalType: "uint64";
                readonly type: "uint64";
            }, {
                readonly name: "name";
                readonly internalType: "string";
                readonly type: "string";
            }, {
                readonly name: "symbol";
                readonly internalType: "string";
                readonly type: "string";
            }];
        }];
        readonly name: "setSale";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "salesConfig";
            readonly internalType: "struct IZoraTimedSaleStrategy.SalesConfigV2";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "saleStart";
                readonly internalType: "uint64";
                readonly type: "uint64";
            }, {
                readonly name: "marketCountdown";
                readonly internalType: "uint64";
                readonly type: "uint64";
            }, {
                readonly name: "minimumMarketEth";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "name";
                readonly internalType: "string";
                readonly type: "string";
            }, {
                readonly name: "symbol";
                readonly internalType: "string";
                readonly type: "string";
            }];
        }];
        readonly name: "setSaleV2";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "recipient";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "setZoraRewardRecipient";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "interfaceId";
            readonly internalType: "bytes4";
            readonly type: "bytes4";
        }];
        readonly name: "supportsInterface";
        readonly outputs: readonly [{
            readonly name: "";
            readonly internalType: "bool";
            readonly type: "bool";
        }];
        readonly stateMutability: "pure";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "newOwner";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "transferOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "amount0Delta";
            readonly internalType: "int256";
            readonly type: "int256";
        }, {
            readonly name: "amount1Delta";
            readonly internalType: "int256";
            readonly type: "int256";
        }, {
            readonly name: "";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "uniswapV3SwapCallback";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
        }, {
            readonly name: "newStartTime";
            readonly internalType: "uint64";
            readonly type: "uint64";
        }, {
            readonly name: "newMarketCountdown";
            readonly internalType: "uint64";
            readonly type: "uint64";
        }];
        readonly name: "updateSale";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
    }, {
        readonly type: "function";
        readonly inputs: readonly [{
            readonly name: "newImplementation";
            readonly internalType: "address";
            readonly type: "address";
        }, {
            readonly name: "data";
            readonly internalType: "bytes";
            readonly type: "bytes";
        }];
        readonly name: "upgradeToAndCall";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "version";
            readonly internalType: "uint64";
            readonly type: "uint64";
            readonly indexed: false;
        }];
        readonly name: "Initialized";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "collection";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: true;
        }, {
            readonly name: "erc20zAddress";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }, {
            readonly name: "poolAddress";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }];
        readonly name: "MarketLaunched";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "sender";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "collection";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: true;
        }, {
            readonly name: "quantity";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: false;
        }, {
            readonly name: "comment";
            readonly internalType: "string";
            readonly type: "string";
            readonly indexed: false;
        }];
        readonly name: "MintComment";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "previousOwner";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "newOwner";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }];
        readonly name: "OwnershipTransferStarted";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "previousOwner";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "newOwner";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }];
        readonly name: "OwnershipTransferred";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "collection";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: true;
        }, {
            readonly name: "salesConfig";
            readonly internalType: "struct IZoraTimedSaleStrategy.SalesConfig";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "saleStart";
                readonly internalType: "uint64";
                readonly type: "uint64";
            }, {
                readonly name: "saleEnd";
                readonly internalType: "uint64";
                readonly type: "uint64";
            }, {
                readonly name: "name";
                readonly internalType: "string";
                readonly type: "string";
            }, {
                readonly name: "symbol";
                readonly internalType: "string";
                readonly type: "string";
            }];
            readonly indexed: false;
        }, {
            readonly name: "erc20zAddress";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }, {
            readonly name: "poolAddress";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }, {
            readonly name: "mintFee";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: false;
        }];
        readonly name: "SaleSet";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "collection";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: true;
        }, {
            readonly name: "saleData";
            readonly internalType: "struct IZoraTimedSaleStrategy.SaleData";
            readonly type: "tuple";
            readonly components: readonly [{
                readonly name: "saleStart";
                readonly internalType: "uint64";
                readonly type: "uint64";
            }, {
                readonly name: "marketCountdown";
                readonly internalType: "uint64";
                readonly type: "uint64";
            }, {
                readonly name: "saleEnd";
                readonly internalType: "uint64";
                readonly type: "uint64";
            }, {
                readonly name: "secondaryActivated";
                readonly internalType: "bool";
                readonly type: "bool";
            }, {
                readonly name: "minimumMarketEth";
                readonly internalType: "uint256";
                readonly type: "uint256";
            }, {
                readonly name: "poolAddress";
                readonly internalType: "address";
                readonly type: "address";
            }, {
                readonly name: "erc20zAddress";
                readonly internalType: "address payable";
                readonly type: "address";
            }, {
                readonly name: "name";
                readonly internalType: "string";
                readonly type: "string";
            }, {
                readonly name: "symbol";
                readonly internalType: "string";
                readonly type: "string";
            }];
            readonly indexed: false;
        }, {
            readonly name: "mintFee";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: false;
        }];
        readonly name: "SaleSetV2";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "implementation";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }];
        readonly name: "Upgraded";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "prevRecipient";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "newRecipient";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }];
        readonly name: "ZoraRewardRecipientUpdated";
    }, {
        readonly type: "event";
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly name: "collection";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: true;
        }, {
            readonly name: "tokenId";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: true;
        }, {
            readonly name: "creator";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }, {
            readonly name: "creatorReward";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: false;
        }, {
            readonly name: "createReferral";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }, {
            readonly name: "createReferralReward";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: false;
        }, {
            readonly name: "mintReferral";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }, {
            readonly name: "mintReferralReward";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: false;
        }, {
            readonly name: "market";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }, {
            readonly name: "marketReward";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: false;
        }, {
            readonly name: "zoraRecipient";
            readonly internalType: "address";
            readonly type: "address";
            readonly indexed: false;
        }, {
            readonly name: "zoraReward";
            readonly internalType: "uint256";
            readonly type: "uint256";
            readonly indexed: false;
        }];
        readonly name: "ZoraTimedSaleStrategyRewards";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "target";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "AddressEmptyCode";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "account";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "AddressInsufficientBalance";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "AddressZero";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ERC1167FailedCreateClone";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "implementation";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "ERC1967InvalidImplementation";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ERC1967NonPayable";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "EndTimeCannotBeInThePast";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "FailedInnerCall";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "InsufficientFunds";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "InvalidInitialization";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "MarketAlreadyLaunched";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "MarketMinimumNotReached";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "MinimumMarketEthNotMet";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "NeedsToBeAtLeastOneSaleToStartMarket";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "NotInitializing";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "OnlyZoraRewardRecipient";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "owner";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "OwnableInvalidOwner";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "account";
            readonly internalType: "address";
            readonly type: "address";
        }];
        readonly name: "OwnableUnauthorizedAccount";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ReentrancyGuardReentrantCall";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "RequestMintInvalidUseMint";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ResetSaleNotAvailable";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "SaleAlreadySet";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "SaleEnded";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "SaleHasNotStarted";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "SaleInProgress";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "SaleNotSet";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "SaleV2AlreadyStarted";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "SaleV2Ended";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "SaleV2NotSet";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "StartTimeCannotBeAfterEndTime";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "UUPSUnauthorizedCallContext";
    }, {
        readonly type: "error";
        readonly inputs: readonly [{
            readonly name: "slot";
            readonly internalType: "bytes32";
            readonly type: "bytes32";
        }];
        readonly name: "UUPSUnsupportedProxiableUUID";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "WrongValueSent";
    }, {
        readonly type: "error";
        readonly inputs: readonly [];
        readonly name: "ZoraCreator1155ContractNeedsToSupportReduceSupply";
    }];
};
//# sourceMappingURL=wagmi.d.ts.map