import {
  BaseError,
  decodeAbiParameters,
  encodeAbiParameters,
  encodeFunctionData,
  etherUnits,
  getAbiItem,
  keccak256,
  toHex
} from "./chunk-NPNNGXR4.js";
import {
  __export
} from "./chunk-PR4QN5HX.js";

// src/generated/wagmi.ts
var buySupplyWithSwapRouterHookABI = [
  {
    type: "constructor",
    inputs: [
      {
        name: "_factory",
        internalType: "contract IZoraFactory",
        type: "address"
      },
      { name: "_swapRouter", internalType: "address", type: "address" },
      { name: "_poolManager", internalType: "address", type: "address" }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [
      { name: "sender", internalType: "address", type: "address" },
      { name: "coin", internalType: "contract ICoin", type: "address" },
      { name: "hookData", internalType: "bytes", type: "bytes" }
    ],
    name: "afterCoinDeploy",
    outputs: [{ name: "", internalType: "bytes", type: "bytes" }],
    stateMutability: "payable"
  },
  {
    type: "function",
    inputs: [],
    name: "factory",
    outputs: [
      { name: "", internalType: "contract IZoraFactory", type: "address" }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [{ name: "interfaceId", internalType: "bytes4", type: "bytes4" }],
    name: "supportsInterface",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
    stateMutability: "pure"
  },
  {
    type: "function",
    inputs: [{ name: "data", internalType: "bytes", type: "bytes" }],
    name: "unlockCallback",
    outputs: [{ name: "", internalType: "bytes", type: "bytes" }],
    stateMutability: "nonpayable"
  },
  { type: "error", inputs: [], name: "AddressZero" },
  {
    type: "error",
    inputs: [{ name: "balance", internalType: "uint256", type: "uint256" }],
    name: "CoinBalanceNot0"
  },
  {
    type: "error",
    inputs: [{ name: "balance", internalType: "uint256", type: "uint256" }],
    name: "CurrencyBalanceNot0"
  },
  { type: "error", inputs: [], name: "Erc20NotReceived" },
  { type: "error", inputs: [], name: "HookNotImplemented" },
  { type: "error", inputs: [], name: "InvalidSwapRouterCall" },
  { type: "error", inputs: [], name: "NotFactory" },
  { type: "error", inputs: [], name: "OnlyPoolManager" },
  {
    type: "error",
    inputs: [{ name: "error", internalType: "bytes", type: "bytes" }],
    name: "SwapReverted"
  }
];
var buySupplyWithSwapRouterHookAddress = {
  8453: "0xd77038a7f400E8242d2916f7EB5741e689d4aE25",
  84532: "0xE4Ec8cE893Cd41965b1aE27F1ad9798F207427aE"
};
var buySupplyWithSwapRouterHookConfig = {
  address: buySupplyWithSwapRouterHookAddress,
  abi: buySupplyWithSwapRouterHookABI
};
var callerAndCommenterABI = [
  {
    type: "constructor",
    inputs: [
      { name: "_comments", internalType: "address", type: "address" },
      { name: "_zoraTimedSale", internalType: "address", type: "address" },
      { name: "_swapHelper", internalType: "address", type: "address" },
      { name: "_sparksValue", internalType: "uint256", type: "uint256" }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [],
    name: "UPGRADE_INTERFACE_VERSION",
    outputs: [{ name: "", internalType: "string", type: "string" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "acceptOwnership",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [
      { name: "commenter", internalType: "address", type: "address" },
      { name: "quantity", internalType: "uint256", type: "uint256" },
      { name: "collection", internalType: "address", type: "address" },
      { name: "tokenId", internalType: "uint256", type: "uint256" },
      {
        name: "excessRefundRecipient",
        internalType: "address payable",
        type: "address"
      },
      { name: "maxEthToSpend", internalType: "uint256", type: "uint256" },
      { name: "sqrtPriceLimitX96", internalType: "uint160", type: "uint160" },
      { name: "comment", internalType: "string", type: "string" }
    ],
    name: "buyOnSecondaryAndComment",
    outputs: [
      {
        name: "",
        internalType: "struct IComments.CommentIdentifier",
        type: "tuple",
        components: [
          { name: "commenter", internalType: "address", type: "address" },
          { name: "contractAddress", internalType: "address", type: "address" },
          { name: "tokenId", internalType: "uint256", type: "uint256" },
          { name: "nonce", internalType: "bytes32", type: "bytes32" }
        ]
      }
    ],
    stateMutability: "payable"
  },
  {
    type: "function",
    inputs: [],
    name: "comments",
    outputs: [
      { name: "", internalType: "contract IComments", type: "address" }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "contractName",
    outputs: [{ name: "", internalType: "string", type: "string" }],
    stateMutability: "pure"
  },
  {
    type: "function",
    inputs: [],
    name: "contractVersion",
    outputs: [{ name: "", internalType: "string", type: "string" }],
    stateMutability: "pure"
  },
  {
    type: "function",
    inputs: [],
    name: "eip712Domain",
    outputs: [
      { name: "fields", internalType: "bytes1", type: "bytes1" },
      { name: "name", internalType: "string", type: "string" },
      { name: "version", internalType: "string", type: "string" },
      { name: "chainId", internalType: "uint256", type: "uint256" },
      { name: "verifyingContract", internalType: "address", type: "address" },
      { name: "salt", internalType: "bytes32", type: "bytes32" },
      { name: "extensions", internalType: "uint256[]", type: "uint256[]" }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [
      {
        name: "permit",
        internalType: "struct ICallerAndCommenter.PermitBuyOnSecondaryAndComment",
        type: "tuple",
        components: [
          { name: "commenter", internalType: "address", type: "address" },
          { name: "quantity", internalType: "uint256", type: "uint256" },
          { name: "collection", internalType: "address", type: "address" },
          { name: "tokenId", internalType: "uint256", type: "uint256" },
          { name: "maxEthToSpend", internalType: "uint256", type: "uint256" },
          {
            name: "sqrtPriceLimitX96",
            internalType: "uint160",
            type: "uint160"
          },
          { name: "comment", internalType: "string", type: "string" },
          { name: "deadline", internalType: "uint256", type: "uint256" },
          { name: "nonce", internalType: "bytes32", type: "bytes32" },
          { name: "sourceChainId", internalType: "uint32", type: "uint32" },
          {
            name: "destinationChainId",
            internalType: "uint32",
            type: "uint32"
          }
        ]
      }
    ],
    name: "hashPermitBuyOnSecondaryAndComment",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [
      {
        name: "permit",
        internalType: "struct ICallerAndCommenter.PermitTimedSaleMintAndComment",
        type: "tuple",
        components: [
          { name: "commenter", internalType: "address", type: "address" },
          { name: "quantity", internalType: "uint256", type: "uint256" },
          { name: "collection", internalType: "address", type: "address" },
          { name: "tokenId", internalType: "uint256", type: "uint256" },
          { name: "mintReferral", internalType: "address", type: "address" },
          { name: "comment", internalType: "string", type: "string" },
          { name: "deadline", internalType: "uint256", type: "uint256" },
          { name: "nonce", internalType: "bytes32", type: "bytes32" },
          { name: "sourceChainId", internalType: "uint32", type: "uint32" },
          {
            name: "destinationChainId",
            internalType: "uint32",
            type: "uint32"
          }
        ]
      }
    ],
    name: "hashPermitTimedSaleMintAndComment",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [{ name: "owner", internalType: "address", type: "address" }],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [
      { name: "owner", internalType: "address", type: "address" },
      { name: "nonce", internalType: "bytes32", type: "bytes32" }
    ],
    name: "nonceUsed",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "owner",
    outputs: [{ name: "", internalType: "address", type: "address" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "pendingOwner",
    outputs: [{ name: "", internalType: "address", type: "address" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [
      {
        name: "permit",
        internalType: "struct ICallerAndCommenter.PermitBuyOnSecondaryAndComment",
        type: "tuple",
        components: [
          { name: "commenter", internalType: "address", type: "address" },
          { name: "quantity", internalType: "uint256", type: "uint256" },
          { name: "collection", internalType: "address", type: "address" },
          { name: "tokenId", internalType: "uint256", type: "uint256" },
          { name: "maxEthToSpend", internalType: "uint256", type: "uint256" },
          {
            name: "sqrtPriceLimitX96",
            internalType: "uint160",
            type: "uint160"
          },
          { name: "comment", internalType: "string", type: "string" },
          { name: "deadline", internalType: "uint256", type: "uint256" },
          { name: "nonce", internalType: "bytes32", type: "bytes32" },
          { name: "sourceChainId", internalType: "uint32", type: "uint32" },
          {
            name: "destinationChainId",
            internalType: "uint32",
            type: "uint32"
          }
        ]
      },
      { name: "signature", internalType: "bytes", type: "bytes" }
    ],
    name: "permitBuyOnSecondaryAndComment",
    outputs: [
      {
        name: "",
        internalType: "struct IComments.CommentIdentifier",
        type: "tuple",
        components: [
          { name: "commenter", internalType: "address", type: "address" },
          { name: "contractAddress", internalType: "address", type: "address" },
          { name: "tokenId", internalType: "uint256", type: "uint256" },
          { name: "nonce", internalType: "bytes32", type: "bytes32" }
        ]
      }
    ],
    stateMutability: "payable"
  },
  {
    type: "function",
    inputs: [
      {
        name: "permit",
        internalType: "struct ICallerAndCommenter.PermitTimedSaleMintAndComment",
        type: "tuple",
        components: [
          { name: "commenter", internalType: "address", type: "address" },
          { name: "quantity", internalType: "uint256", type: "uint256" },
          { name: "collection", internalType: "address", type: "address" },
          { name: "tokenId", internalType: "uint256", type: "uint256" },
          { name: "mintReferral", internalType: "address", type: "address" },
          { name: "comment", internalType: "string", type: "string" },
          { name: "deadline", internalType: "uint256", type: "uint256" },
          { name: "nonce", internalType: "bytes32", type: "bytes32" },
          { name: "sourceChainId", internalType: "uint32", type: "uint32" },
          {
            name: "destinationChainId",
            internalType: "uint32",
            type: "uint32"
          }
        ]
      },
      { name: "signature", internalType: "bytes", type: "bytes" }
    ],
    name: "permitTimedSaleMintAndComment",
    outputs: [
      {
        name: "",
        internalType: "struct IComments.CommentIdentifier",
        type: "tuple",
        components: [
          { name: "commenter", internalType: "address", type: "address" },
          { name: "contractAddress", internalType: "address", type: "address" },
          { name: "tokenId", internalType: "uint256", type: "uint256" },
          { name: "nonce", internalType: "bytes32", type: "bytes32" }
        ]
      }
    ],
    stateMutability: "payable"
  },
  {
    type: "function",
    inputs: [],
    name: "proxiableUUID",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [],
    name: "secondarySwap",
    outputs: [
      { name: "", internalType: "contract ISecondarySwap", type: "address" }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [
      { name: "commenter", internalType: "address", type: "address" },
      { name: "quantity", internalType: "uint256", type: "uint256" },
      { name: "collection", internalType: "address", type: "address" },
      { name: "tokenId", internalType: "uint256", type: "uint256" },
      { name: "recipient", internalType: "address payable", type: "address" },
      { name: "minEthToAcquire", internalType: "uint256", type: "uint256" },
      { name: "sqrtPriceLimitX96", internalType: "uint160", type: "uint160" },
      { name: "comment", internalType: "string", type: "string" }
    ],
    name: "sellOnSecondaryAndComment",
    outputs: [
      {
        name: "commentIdentifier",
        internalType: "struct IComments.CommentIdentifier",
        type: "tuple",
        components: [
          { name: "commenter", internalType: "address", type: "address" },
          { name: "contractAddress", internalType: "address", type: "address" },
          { name: "tokenId", internalType: "uint256", type: "uint256" },
          { name: "nonce", internalType: "bytes32", type: "bytes32" }
        ]
      }
    ],
    stateMutability: "payable"
  },
  {
    type: "function",
    inputs: [],
    name: "sparkValue",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [
      { name: "commenter", internalType: "address", type: "address" },
      { name: "quantity", internalType: "uint256", type: "uint256" },
      { name: "collection", internalType: "address", type: "address" },
      { name: "tokenId", internalType: "uint256", type: "uint256" },
      { name: "mintReferral", internalType: "address", type: "address" },
      { name: "comment", internalType: "string", type: "string" }
    ],
    name: "timedSaleMintAndComment",
    outputs: [
      {
        name: "",
        internalType: "struct IComments.CommentIdentifier",
        type: "tuple",
        components: [
          { name: "commenter", internalType: "address", type: "address" },
          { name: "contractAddress", internalType: "address", type: "address" },
          { name: "tokenId", internalType: "uint256", type: "uint256" },
          { name: "nonce", internalType: "bytes32", type: "bytes32" }
        ]
      }
    ],
    stateMutability: "payable"
  },
  {
    type: "function",
    inputs: [{ name: "newOwner", internalType: "address", type: "address" }],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [
      { name: "newImplementation", internalType: "address", type: "address" },
      { name: "data", internalType: "bytes", type: "bytes" }
    ],
    name: "upgradeToAndCall",
    outputs: [],
    stateMutability: "payable"
  },
  {
    type: "function",
    inputs: [],
    name: "zoraTimedSale",
    outputs: [
      {
        name: "",
        internalType: "contract IZoraTimedSaleStrategy",
        type: "address"
      }
    ],
    stateMutability: "view"
  },
  { type: "event", anonymous: false, inputs: [], name: "EIP712DomainChanged" },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "version",
        internalType: "uint64",
        type: "uint64",
        indexed: false
      }
    ],
    name: "Initialized"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "commentId",
        internalType: "bytes32",
        type: "bytes32",
        indexed: true
      },
      {
        name: "commentIdentifier",
        internalType: "struct IComments.CommentIdentifier",
        type: "tuple",
        components: [
          { name: "commenter", internalType: "address", type: "address" },
          { name: "contractAddress", internalType: "address", type: "address" },
          { name: "tokenId", internalType: "uint256", type: "uint256" },
          { name: "nonce", internalType: "bytes32", type: "bytes32" }
        ],
        indexed: false
      },
      {
        name: "quantity",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      },
      { name: "text", internalType: "string", type: "string", indexed: false }
    ],
    name: "MintedAndCommented"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "previousOwner",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "newOwner",
        internalType: "address",
        type: "address",
        indexed: true
      }
    ],
    name: "OwnershipTransferStarted"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "previousOwner",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "newOwner",
        internalType: "address",
        type: "address",
        indexed: true
      }
    ],
    name: "OwnershipTransferred"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "commentId",
        internalType: "bytes32",
        type: "bytes32",
        indexed: true
      },
      {
        name: "commentIdentifier",
        internalType: "struct IComments.CommentIdentifier",
        type: "tuple",
        components: [
          { name: "commenter", internalType: "address", type: "address" },
          { name: "contractAddress", internalType: "address", type: "address" },
          { name: "tokenId", internalType: "uint256", type: "uint256" },
          { name: "nonce", internalType: "bytes32", type: "bytes32" }
        ],
        indexed: false
      },
      {
        name: "quantity",
        internalType: "uint256",
        type: "uint256",
        indexed: true
      },
      {
        name: "comment",
        internalType: "string",
        type: "string",
        indexed: false
      },
      {
        name: "swapDirection",
        internalType: "enum ICallerAndCommenter.SwapDirection",
        type: "uint8",
        indexed: true
      }
    ],
    name: "SwappedOnSecondaryAndCommented"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "implementation",
        internalType: "address",
        type: "address",
        indexed: true
      }
    ],
    name: "Upgraded"
  },
  {
    type: "error",
    inputs: [{ name: "target", internalType: "address", type: "address" }],
    name: "AddressEmptyCode"
  },
  {
    type: "error",
    inputs: [
      { name: "expected", internalType: "address", type: "address" },
      { name: "actual", internalType: "address", type: "address" }
    ],
    name: "CommenterMismatch"
  },
  {
    type: "error",
    inputs: [
      { name: "implementation", internalType: "address", type: "address" }
    ],
    name: "ERC1967InvalidImplementation"
  },
  { type: "error", inputs: [], name: "ERC1967NonPayable" },
  {
    type: "error",
    inputs: [{ name: "deadline", internalType: "uint256", type: "uint256" }],
    name: "ERC2612ExpiredSignature"
  },
  { type: "error", inputs: [], name: "FailedInnerCall" },
  {
    type: "error",
    inputs: [
      {
        name: "wrongDestinationChainId",
        internalType: "uint256",
        type: "uint256"
      }
    ],
    name: "IncorrectDestinationChain"
  },
  {
    type: "error",
    inputs: [
      { name: "account", internalType: "address", type: "address" },
      { name: "currentNonce", internalType: "bytes32", type: "bytes32" }
    ],
    name: "InvalidAccountNonce"
  },
  { type: "error", inputs: [], name: "InvalidInitialization" },
  { type: "error", inputs: [], name: "InvalidSignature" },
  { type: "error", inputs: [], name: "NotInitializing" },
  {
    type: "error",
    inputs: [{ name: "owner", internalType: "address", type: "address" }],
    name: "OwnableInvalidOwner"
  },
  {
    type: "error",
    inputs: [{ name: "account", internalType: "address", type: "address" }],
    name: "OwnableUnauthorizedAccount"
  },
  {
    type: "error",
    inputs: [
      { name: "collection", internalType: "address", type: "address" },
      { name: "tokenId", internalType: "uint256", type: "uint256" }
    ],
    name: "SaleNotSet"
  },
  { type: "error", inputs: [], name: "UUPSUnauthorizedCallContext" },
  {
    type: "error",
    inputs: [{ name: "slot", internalType: "bytes32", type: "bytes32" }],
    name: "UUPSUnsupportedProxiableUUID"
  },
  {
    type: "error",
    inputs: [
      { name: "currentName", internalType: "string", type: "string" },
      { name: "newName", internalType: "string", type: "string" }
    ],
    name: "UpgradeToMismatchedContractName"
  },
  {
    type: "error",
    inputs: [
      { name: "expected", internalType: "uint256", type: "uint256" },
      { name: "actual", internalType: "uint256", type: "uint256" }
    ],
    name: "WrongValueSent"
  },
  {
    type: "error",
    inputs: [{ name: "target", internalType: "address", type: "address" }],
    name: "AddressEmptyCode"
  },
  {
    type: "error",
    inputs: [{ name: "account", internalType: "address", type: "address" }],
    name: "AddressInsufficientBalance"
  },
  { type: "error", inputs: [], name: "AddressZero" },
  { type: "error", inputs: [], name: "ERC1167FailedCreateClone" },
  {
    type: "error",
    inputs: [
      { name: "implementation", internalType: "address", type: "address" }
    ],
    name: "ERC1967InvalidImplementation"
  },
  { type: "error", inputs: [], name: "ERC1967NonPayable" },
  { type: "error", inputs: [], name: "EndTimeCannotBeInThePast" },
  { type: "error", inputs: [], name: "FailedInnerCall" },
  { type: "error", inputs: [], name: "InsufficientFunds" },
  { type: "error", inputs: [], name: "InvalidInitialization" },
  { type: "error", inputs: [], name: "MarketAlreadyLaunched" },
  { type: "error", inputs: [], name: "MarketMinimumNotReached" },
  { type: "error", inputs: [], name: "MinimumMarketEthNotMet" },
  { type: "error", inputs: [], name: "NeedsToBeAtLeastOneSaleToStartMarket" },
  { type: "error", inputs: [], name: "NotInitializing" },
  { type: "error", inputs: [], name: "OnlyZoraRewardRecipient" },
  {
    type: "error",
    inputs: [{ name: "owner", internalType: "address", type: "address" }],
    name: "OwnableInvalidOwner"
  },
  {
    type: "error",
    inputs: [{ name: "account", internalType: "address", type: "address" }],
    name: "OwnableUnauthorizedAccount"
  },
  { type: "error", inputs: [], name: "ReentrancyGuardReentrantCall" },
  { type: "error", inputs: [], name: "RequestMintInvalidUseMint" },
  { type: "error", inputs: [], name: "ResetSaleNotAvailable" },
  { type: "error", inputs: [], name: "SaleAlreadySet" },
  { type: "error", inputs: [], name: "SaleEnded" },
  { type: "error", inputs: [], name: "SaleHasNotStarted" },
  { type: "error", inputs: [], name: "SaleInProgress" },
  { type: "error", inputs: [], name: "SaleNotSet" },
  { type: "error", inputs: [], name: "SaleV2AlreadyStarted" },
  { type: "error", inputs: [], name: "SaleV2Ended" },
  { type: "error", inputs: [], name: "SaleV2NotSet" },
  { type: "error", inputs: [], name: "StartTimeCannotBeAfterEndTime" },
  { type: "error", inputs: [], name: "UUPSUnauthorizedCallContext" },
  {
    type: "error",
    inputs: [{ name: "slot", internalType: "bytes32", type: "bytes32" }],
    name: "UUPSUnsupportedProxiableUUID"
  },
  { type: "error", inputs: [], name: "WrongValueSent" },
  {
    type: "error",
    inputs: [],
    name: "ZoraCreator1155ContractNeedsToSupportReduceSupply"
  },
  { type: "error", inputs: [], name: "ADDRESS_DELEGATECALL_TO_NON_CONTRACT" },
  { type: "error", inputs: [], name: "ADDRESS_LOW_LEVEL_CALL_FAILED" },
  {
    type: "error",
    inputs: [
      { name: "operator", internalType: "address", type: "address" },
      { name: "user", internalType: "address", type: "address" }
    ],
    name: "Burn_NotOwnerOrApproved"
  },
  { type: "error", inputs: [], name: "CREATOR_FUNDS_RECIPIENT_NOT_SET" },
  {
    type: "error",
    inputs: [{ name: "reason", internalType: "bytes", type: "bytes" }],
    name: "CallFailed"
  },
  { type: "error", inputs: [], name: "Call_TokenIdMismatch" },
  { type: "error", inputs: [], name: "CallerNotZoraCreator1155" },
  { type: "error", inputs: [], name: "CanOnlyReduceMaxSupply" },
  {
    type: "error",
    inputs: [
      { name: "tokenId", internalType: "uint256", type: "uint256" },
      { name: "quantity", internalType: "uint256", type: "uint256" },
      { name: "totalMinted", internalType: "uint256", type: "uint256" },
      { name: "maxSupply", internalType: "uint256", type: "uint256" }
    ],
    name: "CannotMintMoreTokens"
  },
  { type: "error", inputs: [], name: "CannotReduceMaxSupplyBelowMinted" },
  {
    type: "error",
    inputs: [
      { name: "proposedAddress", internalType: "address", type: "address" }
    ],
    name: "Config_TransferHookNotSupported"
  },
  {
    type: "error",
    inputs: [],
    name: "ERC1155_ACCOUNTS_AND_IDS_LENGTH_MISMATCH"
  },
  {
    type: "error",
    inputs: [],
    name: "ERC1155_ADDRESS_ZERO_IS_NOT_A_VALID_OWNER"
  },
  { type: "error", inputs: [], name: "ERC1155_BURN_AMOUNT_EXCEEDS_BALANCE" },
  { type: "error", inputs: [], name: "ERC1155_BURN_FROM_ZERO_ADDRESS" },
  {
    type: "error",
    inputs: [],
    name: "ERC1155_CALLER_IS_NOT_TOKEN_OWNER_OR_APPROVED"
  },
  {
    type: "error",
    inputs: [],
    name: "ERC1155_ERC1155RECEIVER_REJECTED_TOKENS"
  },
  {
    type: "error",
    inputs: [],
    name: "ERC1155_IDS_AND_AMOUNTS_LENGTH_MISMATCH"
  },
  {
    type: "error",
    inputs: [],
    name: "ERC1155_INSUFFICIENT_BALANCE_FOR_TRANSFER"
  },
  { type: "error", inputs: [], name: "ERC1155_MINT_TO_ZERO_ADDRESS" },
  { type: "error", inputs: [], name: "ERC1155_MINT_TO_ZERO_ADDRESS" },
  { type: "error", inputs: [], name: "ERC1155_SETTING_APPROVAL_FOR_SELF" },
  {
    type: "error",
    inputs: [],
    name: "ERC1155_TRANSFER_TO_NON_ERC1155RECEIVER_IMPLEMENTER"
  },
  { type: "error", inputs: [], name: "ERC1155_TRANSFER_TO_ZERO_ADDRESS" },
  { type: "error", inputs: [], name: "ERC1967_NEW_IMPL_NOT_CONTRACT" },
  { type: "error", inputs: [], name: "ERC1967_NEW_IMPL_NOT_UUPS" },
  { type: "error", inputs: [], name: "ERC1967_UNSUPPORTED_PROXIABLEUUID" },
  {
    type: "error",
    inputs: [
      { name: "recipient", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" }
    ],
    name: "ETHWithdrawFailed"
  },
  {
    type: "error",
    inputs: [],
    name: "FUNCTION_MUST_BE_CALLED_THROUGH_ACTIVE_PROXY"
  },
  {
    type: "error",
    inputs: [],
    name: "FUNCTION_MUST_BE_CALLED_THROUGH_DELEGATECALL"
  },
  { type: "error", inputs: [], name: "FirstMinterAddressZero" },
  {
    type: "error",
    inputs: [
      { name: "amount", internalType: "uint256", type: "uint256" },
      { name: "contractValue", internalType: "uint256", type: "uint256" }
    ],
    name: "FundsWithdrawInsolvent"
  },
  {
    type: "error",
    inputs: [],
    name: "INITIALIZABLE_CONTRACT_ALREADY_INITIALIZED"
  },
  {
    type: "error",
    inputs: [],
    name: "INITIALIZABLE_CONTRACT_IS_NOT_INITIALIZING"
  },
  { type: "error", inputs: [], name: "INVALID_ADDRESS_ZERO" },
  { type: "error", inputs: [], name: "INVALID_ETH_AMOUNT" },
  {
    type: "error",
    inputs: [
      { name: "mintTo", internalType: "address", type: "address" },
      { name: "merkleProof", internalType: "bytes32[]", type: "bytes32[]" },
      { name: "merkleRoot", internalType: "bytes32", type: "bytes32" }
    ],
    name: "InvalidMerkleProof"
  },
  { type: "error", inputs: [], name: "InvalidMintSchedule" },
  { type: "error", inputs: [], name: "InvalidMintSchedule" },
  { type: "error", inputs: [], name: "InvalidPremintVersion" },
  { type: "error", inputs: [], name: "InvalidSignature" },
  { type: "error", inputs: [], name: "InvalidSignatureVersion" },
  {
    type: "error",
    inputs: [{ name: "magicValue", internalType: "bytes4", type: "bytes4" }],
    name: "InvalidSigner"
  },
  { type: "error", inputs: [], name: "MintNotYetStarted" },
  { type: "error", inputs: [], name: "Mint_InsolventSaleTransfer" },
  { type: "error", inputs: [], name: "Mint_InvalidMintArrayLength" },
  { type: "error", inputs: [], name: "Mint_TokenIDMintNotAllowed" },
  { type: "error", inputs: [], name: "Mint_UnknownCommand" },
  { type: "error", inputs: [], name: "Mint_ValueTransferFail" },
  { type: "error", inputs: [], name: "MinterContractAlreadyExists" },
  { type: "error", inputs: [], name: "MinterContractDoesNotExist" },
  { type: "error", inputs: [], name: "NewOwnerNeedsToBeAdmin" },
  {
    type: "error",
    inputs: [{ name: "tokenId", internalType: "uint256", type: "uint256" }],
    name: "NoRendererForToken"
  },
  { type: "error", inputs: [], name: "NonEthRedemption" },
  { type: "error", inputs: [], name: "ONLY_CREATE_REFERRAL" },
  { type: "error", inputs: [], name: "OnlyAllowedForRegisteredMinter" },
  { type: "error", inputs: [], name: "OnlyAllowedForTimedSaleStrategy" },
  { type: "error", inputs: [], name: "OnlyTransfersFromZoraMints" },
  { type: "error", inputs: [], name: "PremintDeleted" },
  {
    type: "error",
    inputs: [
      { name: "caller", internalType: "address", type: "address" },
      { name: "recipient", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" }
    ],
    name: "ProtocolRewardsWithdrawFailed"
  },
  {
    type: "error",
    inputs: [{ name: "renderer", internalType: "address", type: "address" }],
    name: "RendererNotValid"
  },
  { type: "error", inputs: [], name: "Renderer_NotValidRendererContract" },
  { type: "error", inputs: [], name: "SaleEnded" },
  { type: "error", inputs: [], name: "SaleHasNotStarted" },
  {
    type: "error",
    inputs: [
      { name: "targetContract", internalType: "address", type: "address" }
    ],
    name: "Sale_CannotCallNonSalesContract"
  },
  {
    type: "error",
    inputs: [
      { name: "expected", internalType: "uint256", type: "uint256" },
      { name: "actual", internalType: "uint256", type: "uint256" }
    ],
    name: "TokenIdMismatch"
  },
  {
    type: "error",
    inputs: [],
    name: "UUPS_UPGRADEABLE_MUST_NOT_BE_CALLED_THROUGH_DELEGATECALL"
  },
  {
    type: "error",
    inputs: [
      { name: "user", internalType: "address", type: "address" },
      { name: "limit", internalType: "uint256", type: "uint256" },
      { name: "requestedAmount", internalType: "uint256", type: "uint256" }
    ],
    name: "UserExceedsMintLimit"
  },
  {
    type: "error",
    inputs: [
      { name: "user", internalType: "address", type: "address" },
      { name: "tokenId", internalType: "uint256", type: "uint256" },
      { name: "role", internalType: "uint256", type: "uint256" }
    ],
    name: "UserMissingRoleForToken"
  },
  { type: "error", inputs: [], name: "WrongValueSent" },
  {
    type: "error",
    inputs: [],
    name: "premintSignerContractFailedToRecoverSigner"
  },
  { type: "error", inputs: [], name: "premintSignerContractNotAContract" },
  { type: "error", inputs: [], name: "AccessControlBadConfirmation" },
  {
    type: "error",
    inputs: [
      { name: "account", internalType: "address", type: "address" },
      { name: "neededRole", internalType: "bytes32", type: "bytes32" }
    ],
    name: "AccessControlUnauthorizedAccount"
  },
  {
    type: "error",
    inputs: [{ name: "target", internalType: "address", type: "address" }],
    name: "AddressEmptyCode"
  },
  { type: "error", inputs: [], name: "AddressZero" },
  { type: "error", inputs: [], name: "ArrayLengthMismatch" },
  { type: "error", inputs: [], name: "CannotSparkOwnComment" },
  {
    type: "error",
    inputs: [
      { name: "commentAddress", internalType: "address", type: "address" },
      { name: "commentTokenId", internalType: "uint256", type: "uint256" },
      { name: "replyAddress", internalType: "address", type: "address" },
      { name: "replyTokenId", internalType: "uint256", type: "uint256" }
    ],
    name: "CommentAddressOrTokenIdsDoNotMatch"
  },
  { type: "error", inputs: [], name: "CommentDoesntExist" },
  {
    type: "error",
    inputs: [
      { name: "expected", internalType: "address", type: "address" },
      { name: "actual", internalType: "address", type: "address" }
    ],
    name: "CommenterMismatch"
  },
  {
    type: "error",
    inputs: [{ name: "commentId", internalType: "bytes32", type: "bytes32" }],
    name: "DuplicateComment"
  },
  {
    type: "error",
    inputs: [
      { name: "implementation", internalType: "address", type: "address" }
    ],
    name: "ERC1967InvalidImplementation"
  },
  { type: "error", inputs: [], name: "ERC1967NonPayable" },
  {
    type: "error",
    inputs: [{ name: "deadline", internalType: "uint256", type: "uint256" }],
    name: "ERC2612ExpiredSignature"
  },
  { type: "error", inputs: [], name: "EmptyComment" },
  { type: "error", inputs: [], name: "FailedInnerCall" },
  {
    type: "error",
    inputs: [
      {
        name: "wrongDestinationChainId",
        internalType: "uint256",
        type: "uint256"
      }
    ],
    name: "IncorrectDestinationChain"
  },
  {
    type: "error",
    inputs: [
      { name: "actual", internalType: "uint256", type: "uint256" },
      { name: "expected", internalType: "uint256", type: "uint256" }
    ],
    name: "IncorrectETHAmountForSparks"
  },
  {
    type: "error",
    inputs: [
      { name: "account", internalType: "address", type: "address" },
      { name: "currentNonce", internalType: "bytes32", type: "bytes32" }
    ],
    name: "InvalidAccountNonce"
  },
  { type: "error", inputs: [], name: "InvalidInitialization" },
  { type: "error", inputs: [], name: "InvalidSignature" },
  { type: "error", inputs: [], name: "MustSendAtLeastOneSpark" },
  { type: "error", inputs: [], name: "NoFundsRecipient" },
  { type: "error", inputs: [], name: "NotInitializing" },
  { type: "error", inputs: [], name: "NotSmartWallet" },
  { type: "error", inputs: [], name: "NotSmartWalletOwner" },
  { type: "error", inputs: [], name: "NotTokenHolderOrAdmin" },
  { type: "error", inputs: [], name: "OnlySparksContract" },
  { type: "error", inputs: [], name: "TransferFailed" },
  { type: "error", inputs: [], name: "UUPSUnauthorizedCallContext" },
  {
    type: "error",
    inputs: [{ name: "slot", internalType: "bytes32", type: "bytes32" }],
    name: "UUPSUnsupportedProxiableUUID"
  },
  {
    type: "error",
    inputs: [
      { name: "currentName", internalType: "string", type: "string" },
      { name: "newName", internalType: "string", type: "string" }
    ],
    name: "UpgradeToMismatchedContractName"
  }
];
var callerAndCommenterAddress = {
  1: "0x77777775C5074b74540d9cC63Dd840A8c692B4B5",
  10: "0x77777775C5074b74540d9cC63Dd840A8c692B4B5",
  8453: "0x77777775C5074b74540d9cC63Dd840A8c692B4B5",
  42161: "0x77777775C5074b74540d9cC63Dd840A8c692B4B5",
  81457: "0x77777775C5074b74540d9cC63Dd840A8c692B4B5",
  84532: "0x77777775C5074b74540d9cC63Dd840A8c692B4B5",
  7777777: "0x77777775C5074b74540d9cC63Dd840A8c692B4B5",
  11155111: "0x77777775C5074b74540d9cC63Dd840A8c692B4B5",
  11155420: "0x77777775C5074b74540d9cC63Dd840A8c692B4B5",
  999999999: "0x77777775C5074b74540d9cC63Dd840A8c692B4B5"
};
var callerAndCommenterConfig = {
  address: callerAndCommenterAddress,
  abi: callerAndCommenterABI
};
var coinABI = [
  {
    type: "constructor",
    inputs: [
      {
        name: "protocolRewardRecipient_",
        internalType: "address",
        type: "address"
      },
      { name: "protocolRewards_", internalType: "address", type: "address" },
      { name: "weth_", internalType: "address", type: "address" },
      { name: "v3Factory_", internalType: "address", type: "address" },
      { name: "swapRouter_", internalType: "address", type: "address" },
      { name: "airlock_", internalType: "address", type: "address" }
    ],
    stateMutability: "nonpayable"
  },
  { type: "receive", stateMutability: "payable" },
  {
    type: "function",
    inputs: [],
    name: "DOMAIN_SEPARATOR",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "WETH",
    outputs: [{ name: "", internalType: "address", type: "address" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [{ name: "account", internalType: "address", type: "address" }],
    name: "addOwner",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [
      { name: "accounts", internalType: "address[]", type: "address[]" }
    ],
    name: "addOwners",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [],
    name: "airlock",
    outputs: [{ name: "", internalType: "address", type: "address" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [
      { name: "owner", internalType: "address", type: "address" },
      { name: "spender", internalType: "address", type: "address" }
    ],
    name: "allowance",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [
      { name: "spender", internalType: "address", type: "address" },
      { name: "value", internalType: "uint256", type: "uint256" }
    ],
    name: "approve",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [{ name: "account", internalType: "address", type: "address" }],
    name: "balanceOf",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [{ name: "amount", internalType: "uint256", type: "uint256" }],
    name: "burn",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [
      { name: "recipient", internalType: "address", type: "address" },
      { name: "orderSize", internalType: "uint256", type: "uint256" },
      { name: "minAmountOut", internalType: "uint256", type: "uint256" },
      { name: "sqrtPriceLimitX96", internalType: "uint160", type: "uint160" },
      { name: "tradeReferrer", internalType: "address", type: "address" }
    ],
    name: "buy",
    outputs: [
      { name: "", internalType: "uint256", type: "uint256" },
      { name: "", internalType: "uint256", type: "uint256" }
    ],
    stateMutability: "payable"
  },
  {
    type: "function",
    inputs: [{ name: "pushEthRewards", internalType: "bool", type: "bool" }],
    name: "claimSecondaryRewards",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [],
    name: "contractURI",
    outputs: [{ name: "", internalType: "string", type: "string" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "contractVersion",
    outputs: [{ name: "", internalType: "string", type: "string" }],
    stateMutability: "pure"
  },
  {
    type: "function",
    inputs: [],
    name: "currency",
    outputs: [{ name: "", internalType: "address", type: "address" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "decimals",
    outputs: [{ name: "", internalType: "uint8", type: "uint8" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "dopplerFeeRecipient",
    outputs: [{ name: "", internalType: "address", type: "address" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "eip712Domain",
    outputs: [
      { name: "fields", internalType: "bytes1", type: "bytes1" },
      { name: "name", internalType: "string", type: "string" },
      { name: "version", internalType: "string", type: "string" },
      { name: "chainId", internalType: "uint256", type: "uint256" },
      { name: "verifyingContract", internalType: "address", type: "address" },
      { name: "salt", internalType: "bytes32", type: "bytes32" },
      { name: "extensions", internalType: "uint256[]", type: "uint256[]" }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "getPoolConfiguration",
    outputs: [
      {
        name: "",
        internalType: "struct PoolConfiguration",
        type: "tuple",
        components: [
          { name: "version", internalType: "uint8", type: "uint8" },
          { name: "numPositions", internalType: "uint16", type: "uint16" },
          { name: "fee", internalType: "uint24", type: "uint24" },
          { name: "tickSpacing", internalType: "int24", type: "int24" },
          {
            name: "numDiscoveryPositions",
            internalType: "uint16[]",
            type: "uint16[]"
          },
          { name: "tickLower", internalType: "int24[]", type: "int24[]" },
          { name: "tickUpper", internalType: "int24[]", type: "int24[]" },
          {
            name: "maxDiscoverySupplyShare",
            internalType: "uint256[]",
            type: "uint256[]"
          }
        ]
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [
      { name: "payoutRecipient_", internalType: "address", type: "address" },
      { name: "owners_", internalType: "address[]", type: "address[]" },
      { name: "tokenURI_", internalType: "string", type: "string" },
      { name: "name_", internalType: "string", type: "string" },
      { name: "symbol_", internalType: "string", type: "string" },
      { name: "platformReferrer_", internalType: "address", type: "address" },
      { name: "currency_", internalType: "address", type: "address" },
      { name: "poolAddress_", internalType: "address", type: "address" },
      {
        name: "poolConfiguration_",
        internalType: "struct PoolConfiguration",
        type: "tuple",
        components: [
          { name: "version", internalType: "uint8", type: "uint8" },
          { name: "numPositions", internalType: "uint16", type: "uint16" },
          { name: "fee", internalType: "uint24", type: "uint24" },
          { name: "tickSpacing", internalType: "int24", type: "int24" },
          {
            name: "numDiscoveryPositions",
            internalType: "uint16[]",
            type: "uint16[]"
          },
          { name: "tickLower", internalType: "int24[]", type: "int24[]" },
          { name: "tickUpper", internalType: "int24[]", type: "int24[]" },
          {
            name: "maxDiscoverySupplyShare",
            internalType: "uint256[]",
            type: "uint256[]"
          }
        ]
      },
      {
        name: "positions_",
        internalType: "struct LpPosition[]",
        type: "tuple[]",
        components: [
          { name: "tickLower", internalType: "int24", type: "int24" },
          { name: "tickUpper", internalType: "int24", type: "int24" },
          { name: "liquidity", internalType: "uint128", type: "uint128" }
        ]
      }
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [{ name: "account", internalType: "address", type: "address" }],
    name: "isOwner",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "market",
    outputs: [{ name: "", internalType: "bytes", type: "bytes" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "marketVersion",
    outputs: [{ name: "", internalType: "uint8", type: "uint8" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "name",
    outputs: [{ name: "", internalType: "string", type: "string" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [{ name: "owner", internalType: "address", type: "address" }],
    name: "nonces",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "owners",
    outputs: [{ name: "", internalType: "address[]", type: "address[]" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "payoutRecipient",
    outputs: [{ name: "", internalType: "address", type: "address" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [
      { name: "owner", internalType: "address", type: "address" },
      { name: "spender", internalType: "address", type: "address" },
      { name: "value", internalType: "uint256", type: "uint256" },
      { name: "deadline", internalType: "uint256", type: "uint256" },
      { name: "v", internalType: "uint8", type: "uint8" },
      { name: "r", internalType: "bytes32", type: "bytes32" },
      { name: "s", internalType: "bytes32", type: "bytes32" }
    ],
    name: "permit",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [],
    name: "platformReferrer",
    outputs: [{ name: "", internalType: "address", type: "address" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "poolAddress",
    outputs: [{ name: "", internalType: "address", type: "address" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "poolConfiguration",
    outputs: [
      { name: "version", internalType: "uint8", type: "uint8" },
      { name: "numPositions", internalType: "uint16", type: "uint16" },
      { name: "fee", internalType: "uint24", type: "uint24" },
      { name: "tickSpacing", internalType: "int24", type: "int24" }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    name: "positions",
    outputs: [
      { name: "tickLower", internalType: "int24", type: "int24" },
      { name: "tickUpper", internalType: "int24", type: "int24" },
      { name: "liquidity", internalType: "uint128", type: "uint128" }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "protocolRewardRecipient",
    outputs: [{ name: "", internalType: "address", type: "address" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "protocolRewards",
    outputs: [{ name: "", internalType: "address", type: "address" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [{ name: "account", internalType: "address", type: "address" }],
    name: "removeOwner",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [
      { name: "accounts", internalType: "address[]", type: "address[]" }
    ],
    name: "removeOwners",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [],
    name: "revokeOwnership",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [
      { name: "recipient", internalType: "address", type: "address" },
      { name: "orderSize", internalType: "uint256", type: "uint256" },
      { name: "minAmountOut", internalType: "uint256", type: "uint256" },
      { name: "sqrtPriceLimitX96", internalType: "uint160", type: "uint160" },
      { name: "tradeReferrer", internalType: "address", type: "address" }
    ],
    name: "sell",
    outputs: [
      { name: "", internalType: "uint256", type: "uint256" },
      { name: "", internalType: "uint256", type: "uint256" }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [{ name: "newURI", internalType: "string", type: "string" }],
    name: "setContractURI",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [
      { name: "newPayoutRecipient", internalType: "address", type: "address" }
    ],
    name: "setPayoutRecipient",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [{ name: "interfaceId", internalType: "bytes4", type: "bytes4" }],
    name: "supportsInterface",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
    stateMutability: "pure"
  },
  {
    type: "function",
    inputs: [],
    name: "swapRouter",
    outputs: [{ name: "", internalType: "address", type: "address" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "symbol",
    outputs: [{ name: "", internalType: "string", type: "string" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "tokenURI",
    outputs: [{ name: "", internalType: "string", type: "string" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "totalSupply",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [
      { name: "to", internalType: "address", type: "address" },
      { name: "value", internalType: "uint256", type: "uint256" }
    ],
    name: "transfer",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [
      { name: "from", internalType: "address", type: "address" },
      { name: "to", internalType: "address", type: "address" },
      { name: "value", internalType: "uint256", type: "uint256" }
    ],
    name: "transferFrom",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [
      { name: "amount0Owed", internalType: "uint256", type: "uint256" },
      { name: "amount1Owed", internalType: "uint256", type: "uint256" },
      { name: "", internalType: "bytes", type: "bytes" }
    ],
    name: "uniswapV3MintCallback",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [],
    name: "v3Factory",
    outputs: [{ name: "", internalType: "address", type: "address" }],
    stateMutability: "view"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "owner",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "spender",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "value",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      }
    ],
    name: "Approval"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "buyer",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "recipient",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "tradeReferrer",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "coinsPurchased",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      },
      {
        name: "currency",
        internalType: "address",
        type: "address",
        indexed: false
      },
      {
        name: "amountFee",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      },
      {
        name: "amountSold",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      }
    ],
    name: "CoinBuy"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "payoutRecipient",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "platformReferrer",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "protocolRewardRecipient",
        internalType: "address",
        type: "address",
        indexed: false
      },
      {
        name: "currency",
        internalType: "address",
        type: "address",
        indexed: false
      },
      {
        name: "marketRewards",
        internalType: "struct ICoin.MarketRewards",
        type: "tuple",
        components: [
          {
            name: "totalAmountCurrency",
            internalType: "uint256",
            type: "uint256"
          },
          { name: "totalAmountCoin", internalType: "uint256", type: "uint256" },
          {
            name: "creatorPayoutAmountCurrency",
            internalType: "uint256",
            type: "uint256"
          },
          {
            name: "creatorPayoutAmountCoin",
            internalType: "uint256",
            type: "uint256"
          },
          {
            name: "platformReferrerAmountCurrency",
            internalType: "uint256",
            type: "uint256"
          },
          {
            name: "platformReferrerAmountCoin",
            internalType: "uint256",
            type: "uint256"
          },
          {
            name: "protocolAmountCurrency",
            internalType: "uint256",
            type: "uint256"
          },
          {
            name: "protocolAmountCoin",
            internalType: "uint256",
            type: "uint256"
          }
        ],
        indexed: false
      }
    ],
    name: "CoinMarketRewards"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "caller",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "prevRecipient",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "newRecipient",
        internalType: "address",
        type: "address",
        indexed: true
      }
    ],
    name: "CoinPayoutRecipientUpdated"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "seller",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "recipient",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "tradeReferrer",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "coinsSold",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      },
      {
        name: "currency",
        internalType: "address",
        type: "address",
        indexed: false
      },
      {
        name: "amountFee",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      },
      {
        name: "amountPurchased",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      }
    ],
    name: "CoinSell"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "payoutRecipient",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "platformReferrer",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "tradeReferrer",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "protocolRewardRecipient",
        internalType: "address",
        type: "address",
        indexed: false
      },
      {
        name: "creatorReward",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      },
      {
        name: "platformReferrerReward",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      },
      {
        name: "traderReferrerReward",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      },
      {
        name: "protocolReward",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      },
      {
        name: "currency",
        internalType: "address",
        type: "address",
        indexed: false
      }
    ],
    name: "CoinTradeRewards"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "sender",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "recipient",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "amount",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      },
      {
        name: "senderBalance",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      },
      {
        name: "recipientBalance",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      }
    ],
    name: "CoinTransfer"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "caller",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "newURI",
        internalType: "string",
        type: "string",
        indexed: false
      },
      { name: "name", internalType: "string", type: "string", indexed: false }
    ],
    name: "ContractMetadataUpdated"
  },
  { type: "event", anonymous: false, inputs: [], name: "ContractURIUpdated" },
  { type: "event", anonymous: false, inputs: [], name: "EIP712DomainChanged" },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "version",
        internalType: "uint64",
        type: "uint64",
        indexed: false
      }
    ],
    name: "Initialized"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "caller",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "prevOwner",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "newOwner",
        internalType: "address",
        type: "address",
        indexed: true
      }
    ],
    name: "OwnerUpdated"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "from", internalType: "address", type: "address", indexed: true },
      { name: "to", internalType: "address", type: "address", indexed: true },
      {
        name: "value",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      }
    ],
    name: "Transfer"
  },
  {
    type: "error",
    inputs: [{ name: "target", internalType: "address", type: "address" }],
    name: "AddressEmptyCode"
  },
  {
    type: "error",
    inputs: [{ name: "account", internalType: "address", type: "address" }],
    name: "AddressInsufficientBalance"
  },
  { type: "error", inputs: [], name: "AddressZero" },
  { type: "error", inputs: [], name: "AddressZero" },
  { type: "error", inputs: [], name: "AlreadyOwner" },
  { type: "error", inputs: [], name: "CannotMintZeroLiquidity" },
  {
    type: "error",
    inputs: [],
    name: "DopplerPoolMustHaveMoreThan2DiscoveryPositions"
  },
  { type: "error", inputs: [], name: "ECDSAInvalidSignature" },
  {
    type: "error",
    inputs: [{ name: "length", internalType: "uint256", type: "uint256" }],
    name: "ECDSAInvalidSignatureLength"
  },
  {
    type: "error",
    inputs: [{ name: "s", internalType: "bytes32", type: "bytes32" }],
    name: "ECDSAInvalidSignatureS"
  },
  {
    type: "error",
    inputs: [
      { name: "spender", internalType: "address", type: "address" },
      { name: "allowance", internalType: "uint256", type: "uint256" },
      { name: "needed", internalType: "uint256", type: "uint256" }
    ],
    name: "ERC20InsufficientAllowance"
  },
  {
    type: "error",
    inputs: [
      { name: "sender", internalType: "address", type: "address" },
      { name: "balance", internalType: "uint256", type: "uint256" },
      { name: "needed", internalType: "uint256", type: "uint256" }
    ],
    name: "ERC20InsufficientBalance"
  },
  {
    type: "error",
    inputs: [{ name: "approver", internalType: "address", type: "address" }],
    name: "ERC20InvalidApprover"
  },
  {
    type: "error",
    inputs: [{ name: "receiver", internalType: "address", type: "address" }],
    name: "ERC20InvalidReceiver"
  },
  {
    type: "error",
    inputs: [{ name: "sender", internalType: "address", type: "address" }],
    name: "ERC20InvalidSender"
  },
  {
    type: "error",
    inputs: [{ name: "spender", internalType: "address", type: "address" }],
    name: "ERC20InvalidSpender"
  },
  { type: "error", inputs: [], name: "ERC20TransferAmountMismatch" },
  {
    type: "error",
    inputs: [{ name: "deadline", internalType: "uint256", type: "uint256" }],
    name: "ERC2612ExpiredSignature"
  },
  {
    type: "error",
    inputs: [
      { name: "signer", internalType: "address", type: "address" },
      { name: "owner", internalType: "address", type: "address" }
    ],
    name: "ERC2612InvalidSigner"
  },
  { type: "error", inputs: [], name: "EthAmountMismatch" },
  { type: "error", inputs: [], name: "EthAmountTooSmall" },
  { type: "error", inputs: [], name: "EthTransferFailed" },
  { type: "error", inputs: [], name: "EthTransferInvalid" },
  { type: "error", inputs: [], name: "FailedInnerCall" },
  { type: "error", inputs: [], name: "InitialOrderSizeTooLarge" },
  { type: "error", inputs: [], name: "InsufficientFunds" },
  { type: "error", inputs: [], name: "InsufficientLiquidity" },
  {
    type: "error",
    inputs: [
      { name: "account", internalType: "address", type: "address" },
      { name: "currentNonce", internalType: "uint256", type: "uint256" }
    ],
    name: "InvalidAccountNonce"
  },
  { type: "error", inputs: [], name: "InvalidCurrencyLowerTick" },
  { type: "error", inputs: [], name: "InvalidInitialization" },
  { type: "error", inputs: [], name: "InvalidMarketType" },
  { type: "error", inputs: [], name: "InvalidPoolVersion" },
  {
    type: "error",
    inputs: [
      { name: "tickLower", internalType: "int24", type: "int24" },
      { name: "tickUpper", internalType: "int24", type: "int24" }
    ],
    name: "InvalidTickRangeMisordered"
  },
  { type: "error", inputs: [], name: "InvalidWethLowerTick" },
  { type: "error", inputs: [], name: "LegacyPoolMustHaveOneDiscoveryPosition" },
  { type: "error", inputs: [], name: "MarketAlreadyGraduated" },
  { type: "error", inputs: [], name: "MarketNotGraduated" },
  {
    type: "error",
    inputs: [
      { name: "value", internalType: "uint256", type: "uint256" },
      { name: "limit", internalType: "uint256", type: "uint256" }
    ],
    name: "MaxShareToBeSoldExceeded"
  },
  { type: "error", inputs: [], name: "NotInitializing" },
  { type: "error", inputs: [], name: "NotOwner" },
  { type: "error", inputs: [], name: "NumDiscoveryPositionsOutOfRange" },
  { type: "error", inputs: [], name: "OneOwnerRequired" },
  { type: "error", inputs: [], name: "OnlyOwner" },
  {
    type: "error",
    inputs: [
      { name: "sender", internalType: "address", type: "address" },
      { name: "pool", internalType: "address", type: "address" }
    ],
    name: "OnlyPool"
  },
  { type: "error", inputs: [], name: "OnlyWeth" },
  { type: "error", inputs: [], name: "OwnerCannotBeAddressZero" },
  { type: "error", inputs: [], name: "ReentrancyGuardReentrantCall" },
  {
    type: "error",
    inputs: [{ name: "token", internalType: "address", type: "address" }],
    name: "SafeERC20FailedOperation"
  },
  { type: "error", inputs: [], name: "SlippageBoundsExceeded" },
  { type: "error", inputs: [], name: "UseRevokeOwnershipToRemoveSelf" }
];
var coinFactoryABI = [
  {
    type: "constructor",
    inputs: [
      { name: "_coinImpl", internalType: "address", type: "address" },
      { name: "_coinV4Impl", internalType: "address", type: "address" }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [],
    name: "UPGRADE_INTERFACE_VERSION",
    outputs: [{ name: "", internalType: "string", type: "string" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [
      { name: "msgSender", internalType: "address", type: "address" },
      { name: "name", internalType: "string", type: "string" },
      { name: "symbol", internalType: "string", type: "string" },
      { name: "poolConfig", internalType: "bytes", type: "bytes" },
      { name: "platformReferrer", internalType: "address", type: "address" },
      { name: "coinSalt", internalType: "bytes32", type: "bytes32" }
    ],
    name: "coinAddress",
    outputs: [{ name: "", internalType: "address", type: "address" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "coinImpl",
    outputs: [{ name: "", internalType: "address", type: "address" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "coinV4Impl",
    outputs: [{ name: "", internalType: "address", type: "address" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "contractName",
    outputs: [{ name: "", internalType: "string", type: "string" }],
    stateMutability: "pure"
  },
  {
    type: "function",
    inputs: [],
    name: "contractVersion",
    outputs: [{ name: "", internalType: "string", type: "string" }],
    stateMutability: "pure"
  },
  {
    type: "function",
    inputs: [
      { name: "payoutRecipient", internalType: "address", type: "address" },
      { name: "owners", internalType: "address[]", type: "address[]" },
      { name: "uri", internalType: "string", type: "string" },
      { name: "name", internalType: "string", type: "string" },
      { name: "symbol", internalType: "string", type: "string" },
      { name: "platformReferrer", internalType: "address", type: "address" },
      { name: "currency", internalType: "address", type: "address" },
      { name: "", internalType: "int24", type: "int24" },
      { name: "orderSize", internalType: "uint256", type: "uint256" }
    ],
    name: "deploy",
    outputs: [
      { name: "", internalType: "address", type: "address" },
      { name: "", internalType: "uint256", type: "uint256" }
    ],
    stateMutability: "payable"
  },
  {
    type: "function",
    inputs: [
      { name: "payoutRecipient", internalType: "address", type: "address" },
      { name: "owners", internalType: "address[]", type: "address[]" },
      { name: "uri", internalType: "string", type: "string" },
      { name: "name", internalType: "string", type: "string" },
      { name: "symbol", internalType: "string", type: "string" },
      { name: "poolConfig", internalType: "bytes", type: "bytes" },
      { name: "platformReferrer", internalType: "address", type: "address" },
      { name: "postDeployHook", internalType: "address", type: "address" },
      { name: "postDeployHookData", internalType: "bytes", type: "bytes" },
      { name: "coinSalt", internalType: "bytes32", type: "bytes32" }
    ],
    name: "deploy",
    outputs: [
      { name: "coin", internalType: "address", type: "address" },
      { name: "postDeployHookDataOut", internalType: "bytes", type: "bytes" }
    ],
    stateMutability: "payable"
  },
  {
    type: "function",
    inputs: [
      { name: "payoutRecipient", internalType: "address", type: "address" },
      { name: "owners", internalType: "address[]", type: "address[]" },
      { name: "uri", internalType: "string", type: "string" },
      { name: "name", internalType: "string", type: "string" },
      { name: "symbol", internalType: "string", type: "string" },
      { name: "poolConfig", internalType: "bytes", type: "bytes" },
      { name: "platformReferrer", internalType: "address", type: "address" },
      { name: "orderSize", internalType: "uint256", type: "uint256" }
    ],
    name: "deploy",
    outputs: [
      { name: "", internalType: "address", type: "address" },
      { name: "", internalType: "uint256", type: "uint256" }
    ],
    stateMutability: "payable"
  },
  {
    type: "function",
    inputs: [
      { name: "payoutRecipient", internalType: "address", type: "address" },
      { name: "owners", internalType: "address[]", type: "address[]" },
      { name: "uri", internalType: "string", type: "string" },
      { name: "name", internalType: "string", type: "string" },
      { name: "symbol", internalType: "string", type: "string" },
      { name: "poolConfig", internalType: "bytes", type: "bytes" },
      { name: "platformReferrer", internalType: "address", type: "address" },
      { name: "hook", internalType: "address", type: "address" },
      { name: "hookData", internalType: "bytes", type: "bytes" }
    ],
    name: "deployWithHook",
    outputs: [
      { name: "coin", internalType: "address", type: "address" },
      { name: "hookDataOut", internalType: "bytes", type: "bytes" }
    ],
    stateMutability: "payable"
  },
  {
    type: "function",
    inputs: [{ name: "coin", internalType: "address", type: "address" }],
    name: "getVersionForDeployedCoin",
    outputs: [{ name: "", internalType: "uint8", type: "uint8" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "implementation",
    outputs: [{ name: "", internalType: "address", type: "address" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [
      { name: "initialOwner", internalType: "address", type: "address" }
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [],
    name: "owner",
    outputs: [{ name: "", internalType: "address", type: "address" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "proxiableUUID",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [{ name: "newOwner", internalType: "address", type: "address" }],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [
      { name: "newImplementation", internalType: "address", type: "address" },
      { name: "data", internalType: "bytes", type: "bytes" }
    ],
    name: "upgradeToAndCall",
    outputs: [],
    stateMutability: "payable"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "caller",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "payoutRecipient",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "platformReferrer",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "currency",
        internalType: "address",
        type: "address",
        indexed: false
      },
      { name: "uri", internalType: "string", type: "string", indexed: false },
      { name: "name", internalType: "string", type: "string", indexed: false },
      {
        name: "symbol",
        internalType: "string",
        type: "string",
        indexed: false
      },
      {
        name: "coin",
        internalType: "address",
        type: "address",
        indexed: false
      },
      {
        name: "pool",
        internalType: "address",
        type: "address",
        indexed: false
      },
      {
        name: "version",
        internalType: "string",
        type: "string",
        indexed: false
      }
    ],
    name: "CoinCreated"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "caller",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "payoutRecipient",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "platformReferrer",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "currency",
        internalType: "address",
        type: "address",
        indexed: false
      },
      { name: "uri", internalType: "string", type: "string", indexed: false },
      { name: "name", internalType: "string", type: "string", indexed: false },
      {
        name: "symbol",
        internalType: "string",
        type: "string",
        indexed: false
      },
      {
        name: "coin",
        internalType: "address",
        type: "address",
        indexed: false
      },
      {
        name: "poolKey",
        internalType: "struct PoolKey",
        type: "tuple",
        components: [
          { name: "currency0", internalType: "Currency", type: "address" },
          { name: "currency1", internalType: "Currency", type: "address" },
          { name: "fee", internalType: "uint24", type: "uint24" },
          { name: "tickSpacing", internalType: "int24", type: "int24" },
          { name: "hooks", internalType: "contract IHooks", type: "address" }
        ],
        indexed: false
      },
      {
        name: "poolKeyHash",
        internalType: "bytes32",
        type: "bytes32",
        indexed: false
      },
      {
        name: "version",
        internalType: "string",
        type: "string",
        indexed: false
      }
    ],
    name: "CoinCreatedV4"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "version",
        internalType: "uint64",
        type: "uint64",
        indexed: false
      }
    ],
    name: "Initialized"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "previousOwner",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "newOwner",
        internalType: "address",
        type: "address",
        indexed: true
      }
    ],
    name: "OwnershipTransferred"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "implementation",
        internalType: "address",
        type: "address",
        indexed: true
      }
    ],
    name: "Upgraded"
  },
  {
    type: "error",
    inputs: [{ name: "target", internalType: "address", type: "address" }],
    name: "AddressEmptyCode"
  },
  {
    type: "error",
    inputs: [{ name: "account", internalType: "address", type: "address" }],
    name: "AddressInsufficientBalance"
  },
  { type: "error", inputs: [], name: "ArrayLengthMismatch" },
  { type: "error", inputs: [], name: "CannotMintZeroLiquidity" },
  { type: "error", inputs: [], name: "ConfigTickLowerMustBeLessThanTickUpper" },
  { type: "error", inputs: [], name: "Deprecated" },
  { type: "error", inputs: [], name: "ERC1167FailedCreateClone" },
  {
    type: "error",
    inputs: [
      { name: "implementation", internalType: "address", type: "address" }
    ],
    name: "ERC1967InvalidImplementation"
  },
  { type: "error", inputs: [], name: "ERC1967NonPayable" },
  { type: "error", inputs: [], name: "ERC20TransferAmountMismatch" },
  { type: "error", inputs: [], name: "EthTransferInvalid" },
  { type: "error", inputs: [], name: "FailedInnerCall" },
  { type: "error", inputs: [], name: "InvalidHook" },
  { type: "error", inputs: [], name: "InvalidInitialization" },
  { type: "error", inputs: [], name: "InvalidPoolVersion" },
  {
    type: "error",
    inputs: [
      { name: "tickLower", internalType: "int24", type: "int24" },
      { name: "tickUpper", internalType: "int24", type: "int24" }
    ],
    name: "InvalidTickRangeMisordered"
  },
  {
    type: "error",
    inputs: [
      { name: "tickLower", internalType: "int24", type: "int24" },
      { name: "tickUpper", internalType: "int24", type: "int24" }
    ],
    name: "InvalidTickRangeMisordered"
  },
  {
    type: "error",
    inputs: [
      { name: "value", internalType: "uint256", type: "uint256" },
      { name: "limit", internalType: "uint256", type: "uint256" }
    ],
    name: "MaxShareToBeSoldExceeded"
  },
  { type: "error", inputs: [], name: "NotInitializing" },
  { type: "error", inputs: [], name: "NumDiscoveryPositionsOutOfRange" },
  {
    type: "error",
    inputs: [{ name: "owner", internalType: "address", type: "address" }],
    name: "OwnableInvalidOwner"
  },
  {
    type: "error",
    inputs: [{ name: "account", internalType: "address", type: "address" }],
    name: "OwnableUnauthorizedAccount"
  },
  { type: "error", inputs: [], name: "ReentrancyGuardReentrantCall" },
  {
    type: "error",
    inputs: [{ name: "token", internalType: "address", type: "address" }],
    name: "SafeERC20FailedOperation"
  },
  { type: "error", inputs: [], name: "UUPSUnauthorizedCallContext" },
  {
    type: "error",
    inputs: [{ name: "slot", internalType: "bytes32", type: "bytes32" }],
    name: "UUPSUnsupportedProxiableUUID"
  },
  {
    type: "error",
    inputs: [
      { name: "currentName", internalType: "string", type: "string" },
      { name: "newName", internalType: "string", type: "string" }
    ],
    name: "UpgradeToMismatchedContractName"
  },
  { type: "error", inputs: [], name: "ZeroDiscoveryPositions" },
  { type: "error", inputs: [], name: "ZeroDiscoverySupplyShare" }
];
var coinFactoryAddress = {
  8453: "0x777777751622c0d3258f214F9DF38E35BF45baF3",
  84532: "0xaF88840cb637F2684A9E460316b1678AD6245e4a"
};
var coinFactoryConfig = {
  address: coinFactoryAddress,
  abi: coinFactoryABI
};
var coinV4ABI = [
  {
    type: "constructor",
    inputs: [
      {
        name: "protocolRewardRecipient_",
        internalType: "address",
        type: "address"
      },
      { name: "protocolRewards_", internalType: "address", type: "address" },
      {
        name: "poolManager_",
        internalType: "contract IPoolManager",
        type: "address"
      },
      { name: "airlock_", internalType: "address", type: "address" },
      { name: "hooks_", internalType: "contract IHooks", type: "address" }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [],
    name: "DOMAIN_SEPARATOR",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [{ name: "account", internalType: "address", type: "address" }],
    name: "addOwner",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [
      { name: "accounts", internalType: "address[]", type: "address[]" }
    ],
    name: "addOwners",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [],
    name: "airlock",
    outputs: [{ name: "", internalType: "address", type: "address" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [
      { name: "owner", internalType: "address", type: "address" },
      { name: "spender", internalType: "address", type: "address" }
    ],
    name: "allowance",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [
      { name: "spender", internalType: "address", type: "address" },
      { name: "value", internalType: "uint256", type: "uint256" }
    ],
    name: "approve",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [{ name: "account", internalType: "address", type: "address" }],
    name: "balanceOf",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [{ name: "amount", internalType: "uint256", type: "uint256" }],
    name: "burn",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [],
    name: "contractURI",
    outputs: [{ name: "", internalType: "string", type: "string" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "contractVersion",
    outputs: [{ name: "", internalType: "string", type: "string" }],
    stateMutability: "pure"
  },
  {
    type: "function",
    inputs: [],
    name: "currency",
    outputs: [{ name: "", internalType: "address", type: "address" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "decimals",
    outputs: [{ name: "", internalType: "uint8", type: "uint8" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "dopplerFeeRecipient",
    outputs: [{ name: "", internalType: "address", type: "address" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "eip712Domain",
    outputs: [
      { name: "fields", internalType: "bytes1", type: "bytes1" },
      { name: "name", internalType: "string", type: "string" },
      { name: "version", internalType: "string", type: "string" },
      { name: "chainId", internalType: "uint256", type: "uint256" },
      { name: "verifyingContract", internalType: "address", type: "address" },
      { name: "salt", internalType: "bytes32", type: "bytes32" },
      { name: "extensions", internalType: "uint256[]", type: "uint256[]" }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [
      {
        name: "coinVersionLookup",
        internalType: "contract IDeployedCoinVersionLookup",
        type: "address"
      }
    ],
    name: "getPayoutSwapPath",
    outputs: [
      {
        name: "payoutSwapPath",
        internalType: "struct IHasSwapPath.PayoutSwapPath",
        type: "tuple",
        components: [
          {
            name: "path",
            internalType: "struct PathKey[]",
            type: "tuple[]",
            components: [
              {
                name: "intermediateCurrency",
                internalType: "Currency",
                type: "address"
              },
              { name: "fee", internalType: "uint24", type: "uint24" },
              { name: "tickSpacing", internalType: "int24", type: "int24" },
              {
                name: "hooks",
                internalType: "contract IHooks",
                type: "address"
              },
              { name: "hookData", internalType: "bytes", type: "bytes" }
            ]
          },
          { name: "currencyIn", internalType: "Currency", type: "address" }
        ]
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "getPoolConfiguration",
    outputs: [
      {
        name: "",
        internalType: "struct PoolConfiguration",
        type: "tuple",
        components: [
          { name: "version", internalType: "uint8", type: "uint8" },
          { name: "numPositions", internalType: "uint16", type: "uint16" },
          { name: "fee", internalType: "uint24", type: "uint24" },
          { name: "tickSpacing", internalType: "int24", type: "int24" },
          {
            name: "numDiscoveryPositions",
            internalType: "uint16[]",
            type: "uint16[]"
          },
          { name: "tickLower", internalType: "int24[]", type: "int24[]" },
          { name: "tickUpper", internalType: "int24[]", type: "int24[]" },
          {
            name: "maxDiscoverySupplyShare",
            internalType: "uint256[]",
            type: "uint256[]"
          }
        ]
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "getPoolKey",
    outputs: [
      {
        name: "",
        internalType: "struct PoolKey",
        type: "tuple",
        components: [
          { name: "currency0", internalType: "Currency", type: "address" },
          { name: "currency1", internalType: "Currency", type: "address" },
          { name: "fee", internalType: "uint24", type: "uint24" },
          { name: "tickSpacing", internalType: "int24", type: "int24" },
          { name: "hooks", internalType: "contract IHooks", type: "address" }
        ]
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "hooks",
    outputs: [{ name: "", internalType: "contract IHooks", type: "address" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [
      { name: "payoutRecipient_", internalType: "address", type: "address" },
      { name: "owners_", internalType: "address[]", type: "address[]" },
      { name: "tokenURI_", internalType: "string", type: "string" },
      { name: "name_", internalType: "string", type: "string" },
      { name: "symbol_", internalType: "string", type: "string" },
      { name: "platformReferrer_", internalType: "address", type: "address" },
      { name: "currency_", internalType: "address", type: "address" },
      {
        name: "poolKey_",
        internalType: "struct PoolKey",
        type: "tuple",
        components: [
          { name: "currency0", internalType: "Currency", type: "address" },
          { name: "currency1", internalType: "Currency", type: "address" },
          { name: "fee", internalType: "uint24", type: "uint24" },
          { name: "tickSpacing", internalType: "int24", type: "int24" },
          { name: "hooks", internalType: "contract IHooks", type: "address" }
        ]
      },
      { name: "sqrtPriceX96", internalType: "uint160", type: "uint160" },
      {
        name: "poolConfiguration_",
        internalType: "struct PoolConfiguration",
        type: "tuple",
        components: [
          { name: "version", internalType: "uint8", type: "uint8" },
          { name: "numPositions", internalType: "uint16", type: "uint16" },
          { name: "fee", internalType: "uint24", type: "uint24" },
          { name: "tickSpacing", internalType: "int24", type: "int24" },
          {
            name: "numDiscoveryPositions",
            internalType: "uint16[]",
            type: "uint16[]"
          },
          { name: "tickLower", internalType: "int24[]", type: "int24[]" },
          { name: "tickUpper", internalType: "int24[]", type: "int24[]" },
          {
            name: "maxDiscoverySupplyShare",
            internalType: "uint256[]",
            type: "uint256[]"
          }
        ]
      }
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [{ name: "account", internalType: "address", type: "address" }],
    name: "isOwner",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "name",
    outputs: [{ name: "", internalType: "string", type: "string" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [{ name: "owner", internalType: "address", type: "address" }],
    name: "nonces",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "owners",
    outputs: [{ name: "", internalType: "address[]", type: "address[]" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "payoutRecipient",
    outputs: [{ name: "", internalType: "address", type: "address" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [
      { name: "owner", internalType: "address", type: "address" },
      { name: "spender", internalType: "address", type: "address" },
      { name: "value", internalType: "uint256", type: "uint256" },
      { name: "deadline", internalType: "uint256", type: "uint256" },
      { name: "v", internalType: "uint8", type: "uint8" },
      { name: "r", internalType: "bytes32", type: "bytes32" },
      { name: "s", internalType: "bytes32", type: "bytes32" }
    ],
    name: "permit",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [],
    name: "platformReferrer",
    outputs: [{ name: "", internalType: "address", type: "address" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "poolManager",
    outputs: [
      { name: "", internalType: "contract IPoolManager", type: "address" }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "protocolRewardRecipient",
    outputs: [{ name: "", internalType: "address", type: "address" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "protocolRewards",
    outputs: [{ name: "", internalType: "address", type: "address" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [{ name: "account", internalType: "address", type: "address" }],
    name: "removeOwner",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [
      { name: "accounts", internalType: "address[]", type: "address[]" }
    ],
    name: "removeOwners",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [],
    name: "revokeOwnership",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [{ name: "newURI", internalType: "string", type: "string" }],
    name: "setContractURI",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [
      { name: "newPayoutRecipient", internalType: "address", type: "address" }
    ],
    name: "setPayoutRecipient",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [{ name: "interfaceId", internalType: "bytes4", type: "bytes4" }],
    name: "supportsInterface",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
    stateMutability: "pure"
  },
  {
    type: "function",
    inputs: [],
    name: "symbol",
    outputs: [{ name: "", internalType: "string", type: "string" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "tokenURI",
    outputs: [{ name: "", internalType: "string", type: "string" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "totalSupply",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [
      { name: "to", internalType: "address", type: "address" },
      { name: "value", internalType: "uint256", type: "uint256" }
    ],
    name: "transfer",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [
      { name: "from", internalType: "address", type: "address" },
      { name: "to", internalType: "address", type: "address" },
      { name: "value", internalType: "uint256", type: "uint256" }
    ],
    name: "transferFrom",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
    stateMutability: "nonpayable"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "owner",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "spender",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "value",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      }
    ],
    name: "Approval"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "buyer",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "recipient",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "tradeReferrer",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "coinsPurchased",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      },
      {
        name: "currency",
        internalType: "address",
        type: "address",
        indexed: false
      },
      {
        name: "amountFee",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      },
      {
        name: "amountSold",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      }
    ],
    name: "CoinBuy"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "payoutRecipient",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "platformReferrer",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "protocolRewardRecipient",
        internalType: "address",
        type: "address",
        indexed: false
      },
      {
        name: "currency",
        internalType: "address",
        type: "address",
        indexed: false
      },
      {
        name: "marketRewards",
        internalType: "struct ICoin.MarketRewards",
        type: "tuple",
        components: [
          {
            name: "totalAmountCurrency",
            internalType: "uint256",
            type: "uint256"
          },
          { name: "totalAmountCoin", internalType: "uint256", type: "uint256" },
          {
            name: "creatorPayoutAmountCurrency",
            internalType: "uint256",
            type: "uint256"
          },
          {
            name: "creatorPayoutAmountCoin",
            internalType: "uint256",
            type: "uint256"
          },
          {
            name: "platformReferrerAmountCurrency",
            internalType: "uint256",
            type: "uint256"
          },
          {
            name: "platformReferrerAmountCoin",
            internalType: "uint256",
            type: "uint256"
          },
          {
            name: "protocolAmountCurrency",
            internalType: "uint256",
            type: "uint256"
          },
          {
            name: "protocolAmountCoin",
            internalType: "uint256",
            type: "uint256"
          }
        ],
        indexed: false
      }
    ],
    name: "CoinMarketRewards"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "caller",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "prevRecipient",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "newRecipient",
        internalType: "address",
        type: "address",
        indexed: true
      }
    ],
    name: "CoinPayoutRecipientUpdated"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "seller",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "recipient",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "tradeReferrer",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "coinsSold",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      },
      {
        name: "currency",
        internalType: "address",
        type: "address",
        indexed: false
      },
      {
        name: "amountFee",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      },
      {
        name: "amountPurchased",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      }
    ],
    name: "CoinSell"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "payoutRecipient",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "platformReferrer",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "tradeReferrer",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "protocolRewardRecipient",
        internalType: "address",
        type: "address",
        indexed: false
      },
      {
        name: "creatorReward",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      },
      {
        name: "platformReferrerReward",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      },
      {
        name: "traderReferrerReward",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      },
      {
        name: "protocolReward",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      },
      {
        name: "currency",
        internalType: "address",
        type: "address",
        indexed: false
      }
    ],
    name: "CoinTradeRewards"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "sender",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "recipient",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "amount",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      },
      {
        name: "senderBalance",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      },
      {
        name: "recipientBalance",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      }
    ],
    name: "CoinTransfer"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "caller",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "newURI",
        internalType: "string",
        type: "string",
        indexed: false
      },
      { name: "name", internalType: "string", type: "string", indexed: false }
    ],
    name: "ContractMetadataUpdated"
  },
  { type: "event", anonymous: false, inputs: [], name: "ContractURIUpdated" },
  { type: "event", anonymous: false, inputs: [], name: "EIP712DomainChanged" },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "version",
        internalType: "uint64",
        type: "uint64",
        indexed: false
      }
    ],
    name: "Initialized"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "caller",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "prevOwner",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "newOwner",
        internalType: "address",
        type: "address",
        indexed: true
      }
    ],
    name: "OwnerUpdated"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "from", internalType: "address", type: "address", indexed: true },
      { name: "to", internalType: "address", type: "address", indexed: true },
      {
        name: "value",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      }
    ],
    name: "Transfer"
  },
  { type: "error", inputs: [], name: "AddressZero" },
  { type: "error", inputs: [], name: "AlreadyOwner" },
  { type: "error", inputs: [], name: "CannotMintZeroLiquidity" },
  {
    type: "error",
    inputs: [],
    name: "DopplerPoolMustHaveMoreThan2DiscoveryPositions"
  },
  { type: "error", inputs: [], name: "ECDSAInvalidSignature" },
  {
    type: "error",
    inputs: [{ name: "length", internalType: "uint256", type: "uint256" }],
    name: "ECDSAInvalidSignatureLength"
  },
  {
    type: "error",
    inputs: [{ name: "s", internalType: "bytes32", type: "bytes32" }],
    name: "ECDSAInvalidSignatureS"
  },
  {
    type: "error",
    inputs: [
      { name: "spender", internalType: "address", type: "address" },
      { name: "allowance", internalType: "uint256", type: "uint256" },
      { name: "needed", internalType: "uint256", type: "uint256" }
    ],
    name: "ERC20InsufficientAllowance"
  },
  {
    type: "error",
    inputs: [
      { name: "sender", internalType: "address", type: "address" },
      { name: "balance", internalType: "uint256", type: "uint256" },
      { name: "needed", internalType: "uint256", type: "uint256" }
    ],
    name: "ERC20InsufficientBalance"
  },
  {
    type: "error",
    inputs: [{ name: "approver", internalType: "address", type: "address" }],
    name: "ERC20InvalidApprover"
  },
  {
    type: "error",
    inputs: [{ name: "receiver", internalType: "address", type: "address" }],
    name: "ERC20InvalidReceiver"
  },
  {
    type: "error",
    inputs: [{ name: "sender", internalType: "address", type: "address" }],
    name: "ERC20InvalidSender"
  },
  {
    type: "error",
    inputs: [{ name: "spender", internalType: "address", type: "address" }],
    name: "ERC20InvalidSpender"
  },
  { type: "error", inputs: [], name: "ERC20TransferAmountMismatch" },
  {
    type: "error",
    inputs: [{ name: "deadline", internalType: "uint256", type: "uint256" }],
    name: "ERC2612ExpiredSignature"
  },
  {
    type: "error",
    inputs: [
      { name: "signer", internalType: "address", type: "address" },
      { name: "owner", internalType: "address", type: "address" }
    ],
    name: "ERC2612InvalidSigner"
  },
  { type: "error", inputs: [], name: "EthAmountMismatch" },
  { type: "error", inputs: [], name: "EthAmountTooSmall" },
  { type: "error", inputs: [], name: "EthTransferFailed" },
  { type: "error", inputs: [], name: "EthTransferInvalid" },
  { type: "error", inputs: [], name: "InitialOrderSizeTooLarge" },
  { type: "error", inputs: [], name: "InsufficientFunds" },
  { type: "error", inputs: [], name: "InsufficientLiquidity" },
  {
    type: "error",
    inputs: [
      { name: "account", internalType: "address", type: "address" },
      { name: "currentNonce", internalType: "uint256", type: "uint256" }
    ],
    name: "InvalidAccountNonce"
  },
  { type: "error", inputs: [], name: "InvalidCurrencyLowerTick" },
  { type: "error", inputs: [], name: "InvalidInitialization" },
  { type: "error", inputs: [], name: "InvalidMarketType" },
  { type: "error", inputs: [], name: "InvalidPoolVersion" },
  {
    type: "error",
    inputs: [
      { name: "tickLower", internalType: "int24", type: "int24" },
      { name: "tickUpper", internalType: "int24", type: "int24" }
    ],
    name: "InvalidTickRangeMisordered"
  },
  { type: "error", inputs: [], name: "InvalidWethLowerTick" },
  { type: "error", inputs: [], name: "LegacyPoolMustHaveOneDiscoveryPosition" },
  { type: "error", inputs: [], name: "MarketAlreadyGraduated" },
  { type: "error", inputs: [], name: "MarketNotGraduated" },
  {
    type: "error",
    inputs: [
      { name: "value", internalType: "uint256", type: "uint256" },
      { name: "limit", internalType: "uint256", type: "uint256" }
    ],
    name: "MaxShareToBeSoldExceeded"
  },
  { type: "error", inputs: [], name: "NotInitializing" },
  { type: "error", inputs: [], name: "NotOwner" },
  { type: "error", inputs: [], name: "NumDiscoveryPositionsOutOfRange" },
  { type: "error", inputs: [], name: "OneOwnerRequired" },
  { type: "error", inputs: [], name: "OnlyOwner" },
  {
    type: "error",
    inputs: [
      { name: "sender", internalType: "address", type: "address" },
      { name: "pool", internalType: "address", type: "address" }
    ],
    name: "OnlyPool"
  },
  { type: "error", inputs: [], name: "OnlyWeth" },
  { type: "error", inputs: [], name: "OwnerCannotBeAddressZero" },
  { type: "error", inputs: [], name: "ReentrancyGuardReentrantCall" },
  { type: "error", inputs: [], name: "SlippageBoundsExceeded" },
  { type: "error", inputs: [], name: "UseRevokeOwnershipToRemoveSelf" }
];
var cointagABI = [
  {
    type: "constructor",
    inputs: [
      { name: "protocolRewards_", internalType: "address", type: "address" },
      { name: "weth_", internalType: "address", type: "address" },
      { name: "upgradeGate_", internalType: "address", type: "address" }
    ],
    stateMutability: "nonpayable"
  },
  { type: "receive", stateMutability: "payable" },
  {
    type: "function",
    inputs: [],
    name: "PERCENTAGE_BASIS",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "UPGRADE_INTERFACE_VERSION",
    outputs: [{ name: "", internalType: "string", type: "string" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "acceptOwnership",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [],
    name: "config",
    outputs: [
      {
        name: "cointagStorage",
        internalType: "struct ICointag.CointagStorageV1",
        type: "tuple",
        components: [
          {
            name: "creatorRewardRecipient",
            internalType: "address",
            type: "address"
          },
          { name: "erc20", internalType: "contract IERC20", type: "address" },
          {
            name: "pool",
            internalType: "contract IUniswapV3Pool",
            type: "address"
          },
          {
            name: "percentageToBuyBurn",
            internalType: "uint256",
            type: "uint256"
          }
        ]
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    inputs: [],
    name: "contractName",
    outputs: [{ name: "", internalType: "string", type: "string" }],
    stateMutability: "pure"
  },
  {
    type: "function",
    inputs: [],
    name: "contractVersion",
    outputs: [{ name: "", internalType: "string", type: "string" }],
    stateMutability: "pure"
  },
  {
    type: "function",
    inputs: [],
    name: "distribute",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [],
    name: "erc20",
    outputs: [{ name: "", internalType: "contract IERC20", type: "address" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "implementation",
    outputs: [{ name: "", internalType: "address", type: "address" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [
      {
        name: "creatorRewardRecipient",
        internalType: "address",
        type: "address"
      },
      { name: "pool_", internalType: "address", type: "address" },
      { name: "percentageToBuyBurn", internalType: "uint256", type: "uint256" }
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [],
    name: "owner",
    outputs: [{ name: "", internalType: "address", type: "address" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "pendingOwner",
    outputs: [{ name: "", internalType: "address", type: "address" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "pool",
    outputs: [
      { name: "", internalType: "contract IUniswapV3Pool", type: "address" }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "protocolRewards",
    outputs: [
      { name: "", internalType: "contract IProtocolRewards", type: "address" }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "proxiableUUID",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "pull",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [{ name: "newOwner", internalType: "address", type: "address" }],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [
      { name: "amount0Delta", internalType: "int256", type: "int256" },
      { name: "amount1Delta", internalType: "int256", type: "int256" },
      { name: "", internalType: "bytes", type: "bytes" }
    ],
    name: "uniswapV3SwapCallback",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [],
    name: "upgradeGate",
    outputs: [
      { name: "", internalType: "contract IUpgradeGate", type: "address" }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [
      { name: "newImplementation", internalType: "address", type: "address" },
      { name: "data", internalType: "bytes", type: "bytes" }
    ],
    name: "upgradeToAndCall",
    outputs: [],
    stateMutability: "payable"
  },
  {
    type: "function",
    inputs: [],
    name: "weth",
    outputs: [{ name: "", internalType: "contract IWETH", type: "address" }],
    stateMutability: "view"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "amountERC20Received",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      },
      {
        name: "amountERC20Burned",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      },
      {
        name: "amountETHSpent",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      },
      {
        name: "amountETHToCreator",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      },
      {
        name: "totalETHReceived",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      },
      {
        name: "buyFailureError",
        internalType: "bytes",
        type: "bytes",
        indexed: false
      },
      {
        name: "burnFailureError",
        internalType: "bytes",
        type: "bytes",
        indexed: false
      }
    ],
    name: "BuyBurn"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "amount",
        internalType: "uint256",
        type: "uint256",
        indexed: true
      },
      {
        name: "sender",
        internalType: "address",
        type: "address",
        indexed: true
      }
    ],
    name: "EthReceived"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "version",
        internalType: "uint64",
        type: "uint64",
        indexed: false
      }
    ],
    name: "Initialized"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "creatorRewardRecipient",
        internalType: "address",
        type: "address",
        indexed: false
      },
      {
        name: "erc20",
        internalType: "address",
        type: "address",
        indexed: false
      },
      {
        name: "pool",
        internalType: "address",
        type: "address",
        indexed: false
      },
      {
        name: "percentageToBuyBurn",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      }
    ],
    name: "Initialized"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "previousOwner",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "newOwner",
        internalType: "address",
        type: "address",
        indexed: true
      }
    ],
    name: "OwnershipTransferStarted"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "previousOwner",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "newOwner",
        internalType: "address",
        type: "address",
        indexed: true
      }
    ],
    name: "OwnershipTransferred"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "implementation",
        internalType: "address",
        type: "address",
        indexed: true
      }
    ],
    name: "Upgraded"
  },
  {
    type: "error",
    inputs: [{ name: "target", internalType: "address", type: "address" }],
    name: "AddressEmptyCode"
  },
  {
    type: "error",
    inputs: [{ name: "account", internalType: "address", type: "address" }],
    name: "AddressInsufficientBalance"
  },
  { type: "error", inputs: [], name: "AddressZero" },
  {
    type: "error",
    inputs: [
      { name: "implementation", internalType: "address", type: "address" }
    ],
    name: "ERC1967InvalidImplementation"
  },
  { type: "error", inputs: [], name: "ERC1967NonPayable" },
  { type: "error", inputs: [], name: "FailedInnerCall" },
  { type: "error", inputs: [], name: "InvalidInitialization" },
  {
    type: "error",
    inputs: [
      { name: "oldImpl", internalType: "address", type: "address" },
      { name: "newImpl", internalType: "address", type: "address" }
    ],
    name: "InvalidUpgradePath"
  },
  { type: "error", inputs: [], name: "NotInitializing" },
  { type: "error", inputs: [], name: "NotUniswapV3Pool" },
  { type: "error", inputs: [], name: "OnlyPool" },
  { type: "error", inputs: [], name: "OnlyProtocolRewardsOrWeth" },
  {
    type: "error",
    inputs: [{ name: "owner", internalType: "address", type: "address" }],
    name: "OwnableInvalidOwner"
  },
  {
    type: "error",
    inputs: [{ name: "account", internalType: "address", type: "address" }],
    name: "OwnableUnauthorizedAccount"
  },
  { type: "error", inputs: [], name: "PoolNeedsOneTokenToBeWETH" },
  {
    type: "error",
    inputs: [{ name: "token", internalType: "address", type: "address" }],
    name: "SafeERC20FailedOperation"
  },
  { type: "error", inputs: [], name: "UUPSUnauthorizedCallContext" },
  {
    type: "error",
    inputs: [{ name: "slot", internalType: "bytes32", type: "bytes32" }],
    name: "UUPSUnsupportedProxiableUUID"
  },
  { type: "error", inputs: [], name: "UnknownBurnError" },
  { type: "error", inputs: [], name: "UnknownSwapError" },
  {
    type: "error",
    inputs: [
      { name: "current", internalType: "string", type: "string" },
      { name: "newName", internalType: "string", type: "string" }
    ],
    name: "UpgradeToMismatchedContractName"
  }
];
var cointagFactoryABI = [
  {
    type: "constructor",
    inputs: [
      {
        name: "_cointagImplementation",
        internalType: "address",
        type: "address"
      }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [],
    name: "UPGRADE_INTERFACE_VERSION",
    outputs: [{ name: "", internalType: "string", type: "string" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "acceptOwnership",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [],
    name: "cointagImplementation",
    outputs: [{ name: "", internalType: "address", type: "address" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "contractName",
    outputs: [{ name: "", internalType: "string", type: "string" }],
    stateMutability: "pure"
  },
  {
    type: "function",
    inputs: [],
    name: "contractURI",
    outputs: [{ name: "", internalType: "string", type: "string" }],
    stateMutability: "pure"
  },
  {
    type: "function",
    inputs: [],
    name: "contractVersion",
    outputs: [{ name: "", internalType: "string", type: "string" }],
    stateMutability: "pure"
  },
  {
    type: "function",
    inputs: [
      {
        name: "_creatorRewardRecipient",
        internalType: "address",
        type: "address"
      },
      { name: "_pool", internalType: "address", type: "address" },
      {
        name: "_percentageToBuyBurn",
        internalType: "uint256",
        type: "uint256"
      },
      { name: "saltSource", internalType: "bytes", type: "bytes" }
    ],
    name: "getCointagAddress",
    outputs: [{ name: "", internalType: "address", type: "address" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [
      {
        name: "_creatorRewardRecipient",
        internalType: "address",
        type: "address"
      },
      { name: "_pool", internalType: "address", type: "address" },
      {
        name: "_percentageToBuyBurn",
        internalType: "uint256",
        type: "uint256"
      },
      { name: "saltSource", internalType: "bytes", type: "bytes" }
    ],
    name: "getOrCreateCointag",
    outputs: [{ name: "", internalType: "contract ICointag", type: "address" }],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [
      {
        name: "_creatorRewardRecipient",
        internalType: "address",
        type: "address"
      },
      { name: "_pool", internalType: "address", type: "address" },
      {
        name: "_percentageToBuyBurn",
        internalType: "uint256",
        type: "uint256"
      },
      { name: "saltSource", internalType: "bytes", type: "bytes" },
      { name: "expectedAddress", internalType: "address", type: "address" }
    ],
    name: "getOrCreateCointagAtExpectedAddress",
    outputs: [{ name: "", internalType: "contract ICointag", type: "address" }],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [],
    name: "implementation",
    outputs: [{ name: "", internalType: "address", type: "address" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [
      { name: "_defaultOwner", internalType: "address", type: "address" }
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [],
    name: "owner",
    outputs: [{ name: "", internalType: "address", type: "address" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "pendingOwner",
    outputs: [{ name: "", internalType: "address", type: "address" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "proxiableUUID",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [{ name: "newOwner", internalType: "address", type: "address" }],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [],
    name: "upgradeGate",
    outputs: [
      { name: "", internalType: "contract IUpgradeGate", type: "address" }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [
      { name: "newImplementation", internalType: "address", type: "address" },
      { name: "data", internalType: "bytes", type: "bytes" }
    ],
    name: "upgradeToAndCall",
    outputs: [],
    stateMutability: "payable"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "version",
        internalType: "uint64",
        type: "uint64",
        indexed: false
      }
    ],
    name: "Initialized"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "previousOwner",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "newOwner",
        internalType: "address",
        type: "address",
        indexed: true
      }
    ],
    name: "OwnershipTransferStarted"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "previousOwner",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "newOwner",
        internalType: "address",
        type: "address",
        indexed: true
      }
    ],
    name: "OwnershipTransferred"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "cointag",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "creatorRewardRecipient",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "erc20",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "pool",
        internalType: "address",
        type: "address",
        indexed: false
      },
      {
        name: "percentageToBuyBurn",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      },
      {
        name: "saltSource",
        internalType: "bytes",
        type: "bytes",
        indexed: false
      }
    ],
    name: "SetupNewCointag"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "implementation",
        internalType: "address",
        type: "address",
        indexed: true
      }
    ],
    name: "Upgraded"
  },
  {
    type: "error",
    inputs: [{ name: "target", internalType: "address", type: "address" }],
    name: "AddressEmptyCode"
  },
  { type: "error", inputs: [], name: "AddressZero" },
  {
    type: "error",
    inputs: [
      { name: "implementation", internalType: "address", type: "address" }
    ],
    name: "ERC1967InvalidImplementation"
  },
  { type: "error", inputs: [], name: "ERC1967NonPayable" },
  { type: "error", inputs: [], name: "FailedInnerCall" },
  { type: "error", inputs: [], name: "InvalidInitialization" },
  { type: "error", inputs: [], name: "NotInitializing" },
  {
    type: "error",
    inputs: [{ name: "owner", internalType: "address", type: "address" }],
    name: "OwnableInvalidOwner"
  },
  {
    type: "error",
    inputs: [{ name: "account", internalType: "address", type: "address" }],
    name: "OwnableUnauthorizedAccount"
  },
  { type: "error", inputs: [], name: "UUPSUnauthorizedCallContext" },
  {
    type: "error",
    inputs: [{ name: "slot", internalType: "bytes32", type: "bytes32" }],
    name: "UUPSUnsupportedProxiableUUID"
  },
  {
    type: "error",
    inputs: [
      { name: "expected", internalType: "address", type: "address" },
      { name: "actual", internalType: "address", type: "address" }
    ],
    name: "UnexpectedCointagAddress"
  },
  {
    type: "error",
    inputs: [
      { name: "currentName", internalType: "string", type: "string" },
      { name: "newName", internalType: "string", type: "string" }
    ],
    name: "UpgradeToMismatchedContractName"
  }
];
var cointagFactoryAddress = {
  8453: "0x7777777BbD0b88aD5F3b5f4c89C6B60D74b9774F",
  84532: "0x7777777BbD0b88aD5F3b5f4c89C6B60D74b9774F",
  7777777: "0x7777777BbD0b88aD5F3b5f4c89C6B60D74b9774F",
  999999999: "0x77777773Bd7Cccb7E704315CA51245707E19B0DE"
};
var cointagFactoryConfig = {
  address: cointagFactoryAddress,
  abi: cointagFactoryABI
};
var commentsABI = [
  {
    type: "constructor",
    inputs: [
      { name: "_sparkValue", internalType: "uint256", type: "uint256" },
      { name: "_protocolRewards", internalType: "address", type: "address" },
      { name: "_zoraRecipient", internalType: "address", type: "address" }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [],
    name: "BACKFILLER_ROLE",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "DEFAULT_ADMIN_ROLE",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "DELEGATE_COMMENTER",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "DOMAIN_NAME",
    outputs: [{ name: "", internalType: "string", type: "string" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "DOMAIN_VERSION",
    outputs: [{ name: "", internalType: "string", type: "string" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "PERMISSION_BIT_ADMIN",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "REFERRER_REWARD_PCT",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "UPGRADE_INTERFACE_VERSION",
    outputs: [{ name: "", internalType: "string", type: "string" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "ZORA_REWARD_NO_REFERRER_PCT",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "ZORA_REWARD_PCT",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [
      {
        name: "commentIdentifiers",
        internalType: "struct IComments.CommentIdentifier[]",
        type: "tuple[]",
        components: [
          { name: "commenter", internalType: "address", type: "address" },
          { name: "contractAddress", internalType: "address", type: "address" },
          { name: "tokenId", internalType: "uint256", type: "uint256" },
          { name: "nonce", internalType: "bytes32", type: "bytes32" }
        ]
      },
      { name: "texts", internalType: "string[]", type: "string[]" },
      { name: "timestamps", internalType: "uint256[]", type: "uint256[]" },
      {
        name: "originalTransactionHashes",
        internalType: "bytes32[]",
        type: "bytes32[]"
      }
    ],
    name: "backfillBatchAddComment",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [
      { name: "commenter", internalType: "address", type: "address" },
      { name: "contractAddress", internalType: "address", type: "address" },
      { name: "tokenId", internalType: "uint256", type: "uint256" },
      { name: "text", internalType: "string", type: "string" },
      {
        name: "replyTo",
        internalType: "struct IComments.CommentIdentifier",
        type: "tuple",
        components: [
          { name: "commenter", internalType: "address", type: "address" },
          { name: "contractAddress", internalType: "address", type: "address" },
          { name: "tokenId", internalType: "uint256", type: "uint256" },
          { name: "nonce", internalType: "bytes32", type: "bytes32" }
        ]
      },
      {
        name: "commenterSmartWallet",
        internalType: "address",
        type: "address"
      },
      { name: "referrer", internalType: "address", type: "address" }
    ],
    name: "comment",
    outputs: [
      {
        name: "commentIdentifier",
        internalType: "struct IComments.CommentIdentifier",
        type: "tuple",
        components: [
          { name: "commenter", internalType: "address", type: "address" },
          { name: "contractAddress", internalType: "address", type: "address" },
          { name: "tokenId", internalType: "uint256", type: "uint256" },
          { name: "nonce", internalType: "bytes32", type: "bytes32" }
        ]
      }
    ],
    stateMutability: "payable"
  },
  {
    type: "function",
    inputs: [
      {
        name: "commentIdentifier",
        internalType: "struct IComments.CommentIdentifier",
        type: "tuple",
        components: [
          { name: "commenter", internalType: "address", type: "address" },
          { name: "contractAddress", internalType: "address", type: "address" },
          { name: "tokenId", internalType: "uint256", type: "uint256" },
          { name: "nonce", internalType: "bytes32", type: "bytes32" }
        ]
      }
    ],
    name: "commentSparksQuantity",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "contractName",
    outputs: [{ name: "", internalType: "string", type: "string" }],
    stateMutability: "pure"
  },
  {
    type: "function",
    inputs: [],
    name: "contractVersion",
    outputs: [{ name: "", internalType: "string", type: "string" }],
    stateMutability: "pure"
  },
  {
    type: "function",
    inputs: [
      { name: "commenter", internalType: "address", type: "address" },
      { name: "contractAddress", internalType: "address", type: "address" },
      { name: "tokenId", internalType: "uint256", type: "uint256" },
      { name: "text", internalType: "string", type: "string" },
      {
        name: "replyTo",
        internalType: "struct IComments.CommentIdentifier",
        type: "tuple",
        components: [
          { name: "commenter", internalType: "address", type: "address" },
          { name: "contractAddress", internalType: "address", type: "address" },
          { name: "tokenId", internalType: "uint256", type: "uint256" },
          { name: "nonce", internalType: "bytes32", type: "bytes32" }
        ]
      },
      {
        name: "commenterSmartWalletOwner",
        internalType: "address",
        type: "address"
      },
      { name: "referrer", internalType: "address", type: "address" }
    ],
    name: "delegateComment",
    outputs: [
      {
        name: "commentIdentifier",
        internalType: "struct IComments.CommentIdentifier",
        type: "tuple",
        components: [
          { name: "commenter", internalType: "address", type: "address" },
          { name: "contractAddress", internalType: "address", type: "address" },
          { name: "tokenId", internalType: "uint256", type: "uint256" },
          { name: "nonce", internalType: "bytes32", type: "bytes32" }
        ]
      },
      { name: "commentId", internalType: "bytes32", type: "bytes32" }
    ],
    stateMutability: "payable"
  },
  {
    type: "function",
    inputs: [],
    name: "eip712Domain",
    outputs: [
      { name: "fields", internalType: "bytes1", type: "bytes1" },
      { name: "name", internalType: "string", type: "string" },
      { name: "version", internalType: "string", type: "string" },
      { name: "chainId", internalType: "uint256", type: "uint256" },
      { name: "verifyingContract", internalType: "address", type: "address" },
      { name: "salt", internalType: "bytes32", type: "bytes32" },
      { name: "extensions", internalType: "uint256[]", type: "uint256[]" }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [{ name: "role", internalType: "bytes32", type: "bytes32" }],
    name: "getRoleAdmin",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32" },
      { name: "account", internalType: "address", type: "address" }
    ],
    name: "grantRole",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32" },
      { name: "account", internalType: "address", type: "address" }
    ],
    name: "hasRole",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [
      {
        name: "commentIdentifier",
        internalType: "struct IComments.CommentIdentifier",
        type: "tuple",
        components: [
          { name: "commenter", internalType: "address", type: "address" },
          { name: "contractAddress", internalType: "address", type: "address" },
          { name: "tokenId", internalType: "uint256", type: "uint256" },
          { name: "nonce", internalType: "bytes32", type: "bytes32" }
        ]
      }
    ],
    name: "hashAndCheckCommentExists",
    outputs: [
      { name: "commentId", internalType: "bytes32", type: "bytes32" },
      { name: "exists", internalType: "bool", type: "bool" }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [
      {
        name: "commentIdentifier",
        internalType: "struct IComments.CommentIdentifier",
        type: "tuple",
        components: [
          { name: "commenter", internalType: "address", type: "address" },
          { name: "contractAddress", internalType: "address", type: "address" },
          { name: "tokenId", internalType: "uint256", type: "uint256" },
          { name: "nonce", internalType: "bytes32", type: "bytes32" }
        ]
      }
    ],
    name: "hashAndValidateCommentExists",
    outputs: [{ name: "commentId", internalType: "bytes32", type: "bytes32" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [
      {
        name: "commentIdentifier",
        internalType: "struct IComments.CommentIdentifier",
        type: "tuple",
        components: [
          { name: "commenter", internalType: "address", type: "address" },
          { name: "contractAddress", internalType: "address", type: "address" },
          { name: "tokenId", internalType: "uint256", type: "uint256" },
          { name: "nonce", internalType: "bytes32", type: "bytes32" }
        ]
      }
    ],
    name: "hashCommentIdentifier",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
    stateMutability: "pure"
  },
  {
    type: "function",
    inputs: [
      {
        name: "permit",
        internalType: "struct IComments.PermitComment",
        type: "tuple",
        components: [
          { name: "commenter", internalType: "address", type: "address" },
          {
            name: "commenterSmartWallet",
            internalType: "address",
            type: "address"
          },
          { name: "contractAddress", internalType: "address", type: "address" },
          { name: "tokenId", internalType: "uint256", type: "uint256" },
          {
            name: "replyTo",
            internalType: "struct IComments.CommentIdentifier",
            type: "tuple",
            components: [
              { name: "commenter", internalType: "address", type: "address" },
              {
                name: "contractAddress",
                internalType: "address",
                type: "address"
              },
              { name: "tokenId", internalType: "uint256", type: "uint256" },
              { name: "nonce", internalType: "bytes32", type: "bytes32" }
            ]
          },
          { name: "text", internalType: "string", type: "string" },
          { name: "referrer", internalType: "address", type: "address" },
          { name: "deadline", internalType: "uint256", type: "uint256" },
          { name: "nonce", internalType: "bytes32", type: "bytes32" },
          { name: "sourceChainId", internalType: "uint32", type: "uint32" },
          {
            name: "destinationChainId",
            internalType: "uint32",
            type: "uint32"
          }
        ]
      }
    ],
    name: "hashPermitComment",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [
      {
        name: "permit",
        internalType: "struct IComments.PermitSparkComment",
        type: "tuple",
        components: [
          {
            name: "comment",
            internalType: "struct IComments.CommentIdentifier",
            type: "tuple",
            components: [
              { name: "commenter", internalType: "address", type: "address" },
              {
                name: "contractAddress",
                internalType: "address",
                type: "address"
              },
              { name: "tokenId", internalType: "uint256", type: "uint256" },
              { name: "nonce", internalType: "bytes32", type: "bytes32" }
            ]
          },
          { name: "sparker", internalType: "address", type: "address" },
          { name: "sparksQuantity", internalType: "uint256", type: "uint256" },
          { name: "deadline", internalType: "uint256", type: "uint256" },
          { name: "nonce", internalType: "bytes32", type: "bytes32" },
          { name: "referrer", internalType: "address", type: "address" },
          { name: "sourceChainId", internalType: "uint32", type: "uint32" },
          {
            name: "destinationChainId",
            internalType: "uint32",
            type: "uint32"
          }
        ]
      }
    ],
    name: "hashPermitSparkComment",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "implementation",
    outputs: [{ name: "", internalType: "address", type: "address" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [
      { name: "defaultAdmin", internalType: "address", type: "address" },
      { name: "backfiller", internalType: "address", type: "address" },
      {
        name: "delegateCommenters",
        internalType: "address[]",
        type: "address[]"
      }
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [],
    name: "nextNonce",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [
      { name: "owner", internalType: "address", type: "address" },
      { name: "nonce", internalType: "bytes32", type: "bytes32" }
    ],
    name: "nonceUsed",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [
      {
        name: "permit",
        internalType: "struct IComments.PermitComment",
        type: "tuple",
        components: [
          { name: "commenter", internalType: "address", type: "address" },
          {
            name: "commenterSmartWallet",
            internalType: "address",
            type: "address"
          },
          { name: "contractAddress", internalType: "address", type: "address" },
          { name: "tokenId", internalType: "uint256", type: "uint256" },
          {
            name: "replyTo",
            internalType: "struct IComments.CommentIdentifier",
            type: "tuple",
            components: [
              { name: "commenter", internalType: "address", type: "address" },
              {
                name: "contractAddress",
                internalType: "address",
                type: "address"
              },
              { name: "tokenId", internalType: "uint256", type: "uint256" },
              { name: "nonce", internalType: "bytes32", type: "bytes32" }
            ]
          },
          { name: "text", internalType: "string", type: "string" },
          { name: "referrer", internalType: "address", type: "address" },
          { name: "deadline", internalType: "uint256", type: "uint256" },
          { name: "nonce", internalType: "bytes32", type: "bytes32" },
          { name: "sourceChainId", internalType: "uint32", type: "uint32" },
          {
            name: "destinationChainId",
            internalType: "uint32",
            type: "uint32"
          }
        ]
      },
      { name: "signature", internalType: "bytes", type: "bytes" }
    ],
    name: "permitComment",
    outputs: [],
    stateMutability: "payable"
  },
  {
    type: "function",
    inputs: [
      {
        name: "permit",
        internalType: "struct IComments.PermitSparkComment",
        type: "tuple",
        components: [
          {
            name: "comment",
            internalType: "struct IComments.CommentIdentifier",
            type: "tuple",
            components: [
              { name: "commenter", internalType: "address", type: "address" },
              {
                name: "contractAddress",
                internalType: "address",
                type: "address"
              },
              { name: "tokenId", internalType: "uint256", type: "uint256" },
              { name: "nonce", internalType: "bytes32", type: "bytes32" }
            ]
          },
          { name: "sparker", internalType: "address", type: "address" },
          { name: "sparksQuantity", internalType: "uint256", type: "uint256" },
          { name: "deadline", internalType: "uint256", type: "uint256" },
          { name: "nonce", internalType: "bytes32", type: "bytes32" },
          { name: "referrer", internalType: "address", type: "address" },
          { name: "sourceChainId", internalType: "uint32", type: "uint32" },
          {
            name: "destinationChainId",
            internalType: "uint32",
            type: "uint32"
          }
        ]
      },
      { name: "signature", internalType: "bytes", type: "bytes" }
    ],
    name: "permitSparkComment",
    outputs: [],
    stateMutability: "payable"
  },
  {
    type: "function",
    inputs: [],
    name: "protocolRewards",
    outputs: [
      { name: "", internalType: "contract IProtocolRewards", type: "address" }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "proxiableUUID",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32" },
      { name: "callerConfirmation", internalType: "address", type: "address" }
    ],
    name: "renounceRole",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32" },
      { name: "account", internalType: "address", type: "address" }
    ],
    name: "revokeRole",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [
      {
        name: "commentIdentifier",
        internalType: "struct IComments.CommentIdentifier",
        type: "tuple",
        components: [
          { name: "commenter", internalType: "address", type: "address" },
          { name: "contractAddress", internalType: "address", type: "address" },
          { name: "tokenId", internalType: "uint256", type: "uint256" },
          { name: "nonce", internalType: "bytes32", type: "bytes32" }
        ]
      },
      { name: "sparksQuantity", internalType: "uint256", type: "uint256" },
      { name: "referrer", internalType: "address", type: "address" }
    ],
    name: "sparkComment",
    outputs: [],
    stateMutability: "payable"
  },
  {
    type: "function",
    inputs: [],
    name: "sparkValue",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [{ name: "interfaceId", internalType: "bytes4", type: "bytes4" }],
    name: "supportsInterface",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [
      { name: "newImplementation", internalType: "address", type: "address" },
      { name: "data", internalType: "bytes", type: "bytes" }
    ],
    name: "upgradeToAndCall",
    outputs: [],
    stateMutability: "payable"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "commentId",
        internalType: "bytes32",
        type: "bytes32",
        indexed: true
      },
      {
        name: "commentIdentifier",
        internalType: "struct IComments.CommentIdentifier",
        type: "tuple",
        components: [
          { name: "commenter", internalType: "address", type: "address" },
          { name: "contractAddress", internalType: "address", type: "address" },
          { name: "tokenId", internalType: "uint256", type: "uint256" },
          { name: "nonce", internalType: "bytes32", type: "bytes32" }
        ],
        indexed: false
      },
      { name: "text", internalType: "string", type: "string", indexed: false },
      {
        name: "timestamp",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      },
      {
        name: "originalTransactionId",
        internalType: "bytes32",
        type: "bytes32",
        indexed: false
      }
    ],
    name: "BackfilledComment"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "commentId",
        internalType: "bytes32",
        type: "bytes32",
        indexed: true
      },
      {
        name: "commentIdentifier",
        internalType: "struct IComments.CommentIdentifier",
        type: "tuple",
        components: [
          { name: "commenter", internalType: "address", type: "address" },
          { name: "contractAddress", internalType: "address", type: "address" },
          { name: "tokenId", internalType: "uint256", type: "uint256" },
          { name: "nonce", internalType: "bytes32", type: "bytes32" }
        ],
        indexed: false
      },
      {
        name: "replyToId",
        internalType: "bytes32",
        type: "bytes32",
        indexed: false
      },
      {
        name: "replyTo",
        internalType: "struct IComments.CommentIdentifier",
        type: "tuple",
        components: [
          { name: "commenter", internalType: "address", type: "address" },
          { name: "contractAddress", internalType: "address", type: "address" },
          { name: "tokenId", internalType: "uint256", type: "uint256" },
          { name: "nonce", internalType: "bytes32", type: "bytes32" }
        ],
        indexed: false
      },
      {
        name: "sparksQuantity",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      },
      { name: "text", internalType: "string", type: "string", indexed: false },
      {
        name: "timestamp",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      },
      {
        name: "referrer",
        internalType: "address",
        type: "address",
        indexed: false
      }
    ],
    name: "Commented"
  },
  { type: "event", anonymous: false, inputs: [], name: "EIP712DomainChanged" },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "version",
        internalType: "uint64",
        type: "uint64",
        indexed: false
      }
    ],
    name: "Initialized"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32", indexed: true },
      {
        name: "previousAdminRole",
        internalType: "bytes32",
        type: "bytes32",
        indexed: true
      },
      {
        name: "newAdminRole",
        internalType: "bytes32",
        type: "bytes32",
        indexed: true
      }
    ],
    name: "RoleAdminChanged"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32", indexed: true },
      {
        name: "account",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "sender",
        internalType: "address",
        type: "address",
        indexed: true
      }
    ],
    name: "RoleGranted"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "role", internalType: "bytes32", type: "bytes32", indexed: true },
      {
        name: "account",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "sender",
        internalType: "address",
        type: "address",
        indexed: true
      }
    ],
    name: "RoleRevoked"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "commentId",
        internalType: "bytes32",
        type: "bytes32",
        indexed: true
      },
      {
        name: "commentIdentifier",
        internalType: "struct IComments.CommentIdentifier",
        type: "tuple",
        components: [
          { name: "commenter", internalType: "address", type: "address" },
          { name: "contractAddress", internalType: "address", type: "address" },
          { name: "tokenId", internalType: "uint256", type: "uint256" },
          { name: "nonce", internalType: "bytes32", type: "bytes32" }
        ],
        indexed: false
      },
      {
        name: "sparksQuantity",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      },
      {
        name: "sparker",
        internalType: "address",
        type: "address",
        indexed: false
      },
      {
        name: "timestamp",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      },
      {
        name: "referrer",
        internalType: "address",
        type: "address",
        indexed: false
      }
    ],
    name: "SparkedComment"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "implementation",
        internalType: "address",
        type: "address",
        indexed: true
      }
    ],
    name: "Upgraded"
  },
  { type: "error", inputs: [], name: "AccessControlBadConfirmation" },
  {
    type: "error",
    inputs: [
      { name: "account", internalType: "address", type: "address" },
      { name: "neededRole", internalType: "bytes32", type: "bytes32" }
    ],
    name: "AccessControlUnauthorizedAccount"
  },
  {
    type: "error",
    inputs: [{ name: "target", internalType: "address", type: "address" }],
    name: "AddressEmptyCode"
  },
  { type: "error", inputs: [], name: "AddressZero" },
  { type: "error", inputs: [], name: "ArrayLengthMismatch" },
  { type: "error", inputs: [], name: "CannotSparkOwnComment" },
  {
    type: "error",
    inputs: [
      { name: "commentAddress", internalType: "address", type: "address" },
      { name: "commentTokenId", internalType: "uint256", type: "uint256" },
      { name: "replyAddress", internalType: "address", type: "address" },
      { name: "replyTokenId", internalType: "uint256", type: "uint256" }
    ],
    name: "CommentAddressOrTokenIdsDoNotMatch"
  },
  { type: "error", inputs: [], name: "CommentDoesntExist" },
  {
    type: "error",
    inputs: [
      { name: "expected", internalType: "address", type: "address" },
      { name: "actual", internalType: "address", type: "address" }
    ],
    name: "CommenterMismatch"
  },
  {
    type: "error",
    inputs: [{ name: "commentId", internalType: "bytes32", type: "bytes32" }],
    name: "DuplicateComment"
  },
  {
    type: "error",
    inputs: [
      { name: "implementation", internalType: "address", type: "address" }
    ],
    name: "ERC1967InvalidImplementation"
  },
  { type: "error", inputs: [], name: "ERC1967NonPayable" },
  {
    type: "error",
    inputs: [{ name: "deadline", internalType: "uint256", type: "uint256" }],
    name: "ERC2612ExpiredSignature"
  },
  { type: "error", inputs: [], name: "EmptyComment" },
  { type: "error", inputs: [], name: "FailedInnerCall" },
  {
    type: "error",
    inputs: [
      {
        name: "wrongDestinationChainId",
        internalType: "uint256",
        type: "uint256"
      }
    ],
    name: "IncorrectDestinationChain"
  },
  {
    type: "error",
    inputs: [
      { name: "actual", internalType: "uint256", type: "uint256" },
      { name: "expected", internalType: "uint256", type: "uint256" }
    ],
    name: "IncorrectETHAmountForSparks"
  },
  {
    type: "error",
    inputs: [
      { name: "account", internalType: "address", type: "address" },
      { name: "currentNonce", internalType: "bytes32", type: "bytes32" }
    ],
    name: "InvalidAccountNonce"
  },
  { type: "error", inputs: [], name: "InvalidInitialization" },
  { type: "error", inputs: [], name: "InvalidSignature" },
  { type: "error", inputs: [], name: "MustSendAtLeastOneSpark" },
  { type: "error", inputs: [], name: "NoFundsRecipient" },
  { type: "error", inputs: [], name: "NotInitializing" },
  { type: "error", inputs: [], name: "NotSmartWallet" },
  { type: "error", inputs: [], name: "NotSmartWalletOwner" },
  { type: "error", inputs: [], name: "NotTokenHolderOrAdmin" },
  { type: "error", inputs: [], name: "OnlySparksContract" },
  { type: "error", inputs: [], name: "TransferFailed" },
  { type: "error", inputs: [], name: "UUPSUnauthorizedCallContext" },
  {
    type: "error",
    inputs: [{ name: "slot", internalType: "bytes32", type: "bytes32" }],
    name: "UUPSUnsupportedProxiableUUID"
  },
  {
    type: "error",
    inputs: [
      { name: "currentName", internalType: "string", type: "string" },
      { name: "newName", internalType: "string", type: "string" }
    ],
    name: "UpgradeToMismatchedContractName"
  }
];
var commentsAddress = {
  1: "0x7777777C2B3132e03a65721a41745C07170a5877",
  10: "0x7777777C2B3132e03a65721a41745C07170a5877",
  8453: "0x7777777C2B3132e03a65721a41745C07170a5877",
  42161: "0x7777777C2B3132e03a65721a41745C07170a5877",
  81457: "0x7777777C2B3132e03a65721a41745C07170a5877",
  84532: "0x7777777C2B3132e03a65721a41745C07170a5877",
  7777777: "0x7777777C2B3132e03a65721a41745C07170a5877",
  11155111: "0x7777777C2B3132e03a65721a41745C07170a5877",
  11155420: "0x7777777C2B3132e03a65721a41745C07170a5877",
  999999999: "0x7777777C2B3132e03a65721a41745C07170a5877"
};
var commentsConfig = {
  address: commentsAddress,
  abi: commentsABI
};
var devBuySupplyWithSwapRouterHookABI = [
  {
    type: "constructor",
    inputs: [
      {
        name: "_factory",
        internalType: "contract IZoraFactory",
        type: "address"
      },
      { name: "_swapRouter", internalType: "address", type: "address" },
      { name: "_poolManager", internalType: "address", type: "address" }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [
      { name: "sender", internalType: "address", type: "address" },
      { name: "coin", internalType: "contract ICoin", type: "address" },
      { name: "hookData", internalType: "bytes", type: "bytes" }
    ],
    name: "afterCoinDeploy",
    outputs: [{ name: "", internalType: "bytes", type: "bytes" }],
    stateMutability: "payable"
  },
  {
    type: "function",
    inputs: [],
    name: "factory",
    outputs: [
      { name: "", internalType: "contract IZoraFactory", type: "address" }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [{ name: "interfaceId", internalType: "bytes4", type: "bytes4" }],
    name: "supportsInterface",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
    stateMutability: "pure"
  },
  {
    type: "function",
    inputs: [{ name: "data", internalType: "bytes", type: "bytes" }],
    name: "unlockCallback",
    outputs: [{ name: "", internalType: "bytes", type: "bytes" }],
    stateMutability: "nonpayable"
  },
  { type: "error", inputs: [], name: "AddressZero" },
  {
    type: "error",
    inputs: [{ name: "balance", internalType: "uint256", type: "uint256" }],
    name: "CoinBalanceNot0"
  },
  {
    type: "error",
    inputs: [{ name: "balance", internalType: "uint256", type: "uint256" }],
    name: "CurrencyBalanceNot0"
  },
  { type: "error", inputs: [], name: "Erc20NotReceived" },
  { type: "error", inputs: [], name: "HookNotImplemented" },
  { type: "error", inputs: [], name: "InvalidSwapRouterCall" },
  { type: "error", inputs: [], name: "NotFactory" },
  { type: "error", inputs: [], name: "OnlyPoolManager" },
  {
    type: "error",
    inputs: [{ name: "error", internalType: "bytes", type: "bytes" }],
    name: "SwapReverted"
  }
];
var devBuySupplyWithSwapRouterHookAddress = {
  8453: "0x0a747629609b22E348d0ea9865fC2A5a04ED945d"
};
var devBuySupplyWithSwapRouterHookConfig = {
  address: devBuySupplyWithSwapRouterHookAddress,
  abi: devBuySupplyWithSwapRouterHookABI
};
var devCoinFactoryABI = [
  {
    type: "constructor",
    inputs: [
      { name: "_coinImpl", internalType: "address", type: "address" },
      { name: "_coinV4Impl", internalType: "address", type: "address" }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [],
    name: "UPGRADE_INTERFACE_VERSION",
    outputs: [{ name: "", internalType: "string", type: "string" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [
      { name: "msgSender", internalType: "address", type: "address" },
      { name: "name", internalType: "string", type: "string" },
      { name: "symbol", internalType: "string", type: "string" },
      { name: "poolConfig", internalType: "bytes", type: "bytes" },
      { name: "platformReferrer", internalType: "address", type: "address" },
      { name: "coinSalt", internalType: "bytes32", type: "bytes32" }
    ],
    name: "coinAddress",
    outputs: [{ name: "", internalType: "address", type: "address" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "coinImpl",
    outputs: [{ name: "", internalType: "address", type: "address" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "coinV4Impl",
    outputs: [{ name: "", internalType: "address", type: "address" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "contractName",
    outputs: [{ name: "", internalType: "string", type: "string" }],
    stateMutability: "pure"
  },
  {
    type: "function",
    inputs: [],
    name: "contractVersion",
    outputs: [{ name: "", internalType: "string", type: "string" }],
    stateMutability: "pure"
  },
  {
    type: "function",
    inputs: [
      { name: "payoutRecipient", internalType: "address", type: "address" },
      { name: "owners", internalType: "address[]", type: "address[]" },
      { name: "uri", internalType: "string", type: "string" },
      { name: "name", internalType: "string", type: "string" },
      { name: "symbol", internalType: "string", type: "string" },
      { name: "platformReferrer", internalType: "address", type: "address" },
      { name: "currency", internalType: "address", type: "address" },
      { name: "", internalType: "int24", type: "int24" },
      { name: "orderSize", internalType: "uint256", type: "uint256" }
    ],
    name: "deploy",
    outputs: [
      { name: "", internalType: "address", type: "address" },
      { name: "", internalType: "uint256", type: "uint256" }
    ],
    stateMutability: "payable"
  },
  {
    type: "function",
    inputs: [
      { name: "payoutRecipient", internalType: "address", type: "address" },
      { name: "owners", internalType: "address[]", type: "address[]" },
      { name: "uri", internalType: "string", type: "string" },
      { name: "name", internalType: "string", type: "string" },
      { name: "symbol", internalType: "string", type: "string" },
      { name: "poolConfig", internalType: "bytes", type: "bytes" },
      { name: "platformReferrer", internalType: "address", type: "address" },
      { name: "postDeployHook", internalType: "address", type: "address" },
      { name: "postDeployHookData", internalType: "bytes", type: "bytes" },
      { name: "coinSalt", internalType: "bytes32", type: "bytes32" }
    ],
    name: "deploy",
    outputs: [
      { name: "coin", internalType: "address", type: "address" },
      { name: "postDeployHookDataOut", internalType: "bytes", type: "bytes" }
    ],
    stateMutability: "payable"
  },
  {
    type: "function",
    inputs: [
      { name: "payoutRecipient", internalType: "address", type: "address" },
      { name: "owners", internalType: "address[]", type: "address[]" },
      { name: "uri", internalType: "string", type: "string" },
      { name: "name", internalType: "string", type: "string" },
      { name: "symbol", internalType: "string", type: "string" },
      { name: "poolConfig", internalType: "bytes", type: "bytes" },
      { name: "platformReferrer", internalType: "address", type: "address" },
      { name: "orderSize", internalType: "uint256", type: "uint256" }
    ],
    name: "deploy",
    outputs: [
      { name: "", internalType: "address", type: "address" },
      { name: "", internalType: "uint256", type: "uint256" }
    ],
    stateMutability: "payable"
  },
  {
    type: "function",
    inputs: [
      { name: "payoutRecipient", internalType: "address", type: "address" },
      { name: "owners", internalType: "address[]", type: "address[]" },
      { name: "uri", internalType: "string", type: "string" },
      { name: "name", internalType: "string", type: "string" },
      { name: "symbol", internalType: "string", type: "string" },
      { name: "poolConfig", internalType: "bytes", type: "bytes" },
      { name: "platformReferrer", internalType: "address", type: "address" },
      { name: "hook", internalType: "address", type: "address" },
      { name: "hookData", internalType: "bytes", type: "bytes" }
    ],
    name: "deployWithHook",
    outputs: [
      { name: "coin", internalType: "address", type: "address" },
      { name: "hookDataOut", internalType: "bytes", type: "bytes" }
    ],
    stateMutability: "payable"
  },
  {
    type: "function",
    inputs: [{ name: "coin", internalType: "address", type: "address" }],
    name: "getVersionForDeployedCoin",
    outputs: [{ name: "", internalType: "uint8", type: "uint8" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "implementation",
    outputs: [{ name: "", internalType: "address", type: "address" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [
      { name: "initialOwner", internalType: "address", type: "address" }
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [],
    name: "owner",
    outputs: [{ name: "", internalType: "address", type: "address" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "proxiableUUID",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [{ name: "newOwner", internalType: "address", type: "address" }],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [
      { name: "newImplementation", internalType: "address", type: "address" },
      { name: "data", internalType: "bytes", type: "bytes" }
    ],
    name: "upgradeToAndCall",
    outputs: [],
    stateMutability: "payable"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "caller",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "payoutRecipient",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "platformReferrer",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "currency",
        internalType: "address",
        type: "address",
        indexed: false
      },
      { name: "uri", internalType: "string", type: "string", indexed: false },
      { name: "name", internalType: "string", type: "string", indexed: false },
      {
        name: "symbol",
        internalType: "string",
        type: "string",
        indexed: false
      },
      {
        name: "coin",
        internalType: "address",
        type: "address",
        indexed: false
      },
      {
        name: "pool",
        internalType: "address",
        type: "address",
        indexed: false
      },
      {
        name: "version",
        internalType: "string",
        type: "string",
        indexed: false
      }
    ],
    name: "CoinCreated"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "caller",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "payoutRecipient",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "platformReferrer",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "currency",
        internalType: "address",
        type: "address",
        indexed: false
      },
      { name: "uri", internalType: "string", type: "string", indexed: false },
      { name: "name", internalType: "string", type: "string", indexed: false },
      {
        name: "symbol",
        internalType: "string",
        type: "string",
        indexed: false
      },
      {
        name: "coin",
        internalType: "address",
        type: "address",
        indexed: false
      },
      {
        name: "poolKey",
        internalType: "struct PoolKey",
        type: "tuple",
        components: [
          { name: "currency0", internalType: "Currency", type: "address" },
          { name: "currency1", internalType: "Currency", type: "address" },
          { name: "fee", internalType: "uint24", type: "uint24" },
          { name: "tickSpacing", internalType: "int24", type: "int24" },
          { name: "hooks", internalType: "contract IHooks", type: "address" }
        ],
        indexed: false
      },
      {
        name: "poolKeyHash",
        internalType: "bytes32",
        type: "bytes32",
        indexed: false
      },
      {
        name: "version",
        internalType: "string",
        type: "string",
        indexed: false
      }
    ],
    name: "CoinCreatedV4"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "version",
        internalType: "uint64",
        type: "uint64",
        indexed: false
      }
    ],
    name: "Initialized"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "previousOwner",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "newOwner",
        internalType: "address",
        type: "address",
        indexed: true
      }
    ],
    name: "OwnershipTransferred"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "implementation",
        internalType: "address",
        type: "address",
        indexed: true
      }
    ],
    name: "Upgraded"
  },
  {
    type: "error",
    inputs: [{ name: "target", internalType: "address", type: "address" }],
    name: "AddressEmptyCode"
  },
  {
    type: "error",
    inputs: [{ name: "account", internalType: "address", type: "address" }],
    name: "AddressInsufficientBalance"
  },
  { type: "error", inputs: [], name: "ArrayLengthMismatch" },
  { type: "error", inputs: [], name: "CannotMintZeroLiquidity" },
  { type: "error", inputs: [], name: "ConfigTickLowerMustBeLessThanTickUpper" },
  { type: "error", inputs: [], name: "Deprecated" },
  { type: "error", inputs: [], name: "ERC1167FailedCreateClone" },
  {
    type: "error",
    inputs: [
      { name: "implementation", internalType: "address", type: "address" }
    ],
    name: "ERC1967InvalidImplementation"
  },
  { type: "error", inputs: [], name: "ERC1967NonPayable" },
  { type: "error", inputs: [], name: "ERC20TransferAmountMismatch" },
  { type: "error", inputs: [], name: "EthTransferInvalid" },
  { type: "error", inputs: [], name: "FailedInnerCall" },
  { type: "error", inputs: [], name: "InvalidHook" },
  { type: "error", inputs: [], name: "InvalidInitialization" },
  { type: "error", inputs: [], name: "InvalidPoolVersion" },
  {
    type: "error",
    inputs: [
      { name: "tickLower", internalType: "int24", type: "int24" },
      { name: "tickUpper", internalType: "int24", type: "int24" }
    ],
    name: "InvalidTickRangeMisordered"
  },
  {
    type: "error",
    inputs: [
      { name: "tickLower", internalType: "int24", type: "int24" },
      { name: "tickUpper", internalType: "int24", type: "int24" }
    ],
    name: "InvalidTickRangeMisordered"
  },
  {
    type: "error",
    inputs: [
      { name: "value", internalType: "uint256", type: "uint256" },
      { name: "limit", internalType: "uint256", type: "uint256" }
    ],
    name: "MaxShareToBeSoldExceeded"
  },
  { type: "error", inputs: [], name: "NotInitializing" },
  { type: "error", inputs: [], name: "NumDiscoveryPositionsOutOfRange" },
  {
    type: "error",
    inputs: [{ name: "owner", internalType: "address", type: "address" }],
    name: "OwnableInvalidOwner"
  },
  {
    type: "error",
    inputs: [{ name: "account", internalType: "address", type: "address" }],
    name: "OwnableUnauthorizedAccount"
  },
  { type: "error", inputs: [], name: "ReentrancyGuardReentrantCall" },
  {
    type: "error",
    inputs: [{ name: "token", internalType: "address", type: "address" }],
    name: "SafeERC20FailedOperation"
  },
  { type: "error", inputs: [], name: "UUPSUnauthorizedCallContext" },
  {
    type: "error",
    inputs: [{ name: "slot", internalType: "bytes32", type: "bytes32" }],
    name: "UUPSUnsupportedProxiableUUID"
  },
  {
    type: "error",
    inputs: [
      { name: "currentName", internalType: "string", type: "string" },
      { name: "newName", internalType: "string", type: "string" }
    ],
    name: "UpgradeToMismatchedContractName"
  },
  { type: "error", inputs: [], name: "ZeroDiscoveryPositions" },
  { type: "error", inputs: [], name: "ZeroDiscoverySupplyShare" }
];
var devCoinFactoryAddress = {
  8453: "0x3d7A3f3351855e135CF89AB412A7C2AA449f9296"
};
var devCoinFactoryConfig = {
  address: devCoinFactoryAddress,
  abi: devCoinFactoryABI
};
var erc20MinterABI = [
  {
    type: "function",
    inputs: [],
    name: "acceptOwnership",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [
      {
        name: "config",
        internalType: "struct IERC20Minter.PremintSalesConfig",
        type: "tuple",
        components: [
          { name: "duration", internalType: "uint64", type: "uint64" },
          {
            name: "maxTokensPerAddress",
            internalType: "uint64",
            type: "uint64"
          },
          { name: "pricePerToken", internalType: "uint256", type: "uint256" },
          { name: "fundsRecipient", internalType: "address", type: "address" },
          { name: "currency", internalType: "address", type: "address" }
        ]
      }
    ],
    name: "buildSalesConfigForPremint",
    outputs: [
      {
        name: "",
        internalType: "struct IERC20Minter.SalesConfig",
        type: "tuple",
        components: [
          { name: "saleStart", internalType: "uint64", type: "uint64" },
          { name: "saleEnd", internalType: "uint64", type: "uint64" },
          {
            name: "maxTokensPerAddress",
            internalType: "uint64",
            type: "uint64"
          },
          { name: "pricePerToken", internalType: "uint256", type: "uint256" },
          { name: "fundsRecipient", internalType: "address", type: "address" },
          { name: "currency", internalType: "address", type: "address" }
        ]
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "cancelOwnershipTransfer",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [{ name: "totalReward", internalType: "uint256", type: "uint256" }],
    name: "computePaidMintRewards",
    outputs: [
      {
        name: "",
        internalType: "struct IERC20Minter.RewardsSettings",
        type: "tuple",
        components: [
          {
            name: "createReferralReward",
            internalType: "uint256",
            type: "uint256"
          },
          {
            name: "mintReferralReward",
            internalType: "uint256",
            type: "uint256"
          },
          { name: "zoraReward", internalType: "uint256", type: "uint256" },
          {
            name: "firstMinterReward",
            internalType: "uint256",
            type: "uint256"
          }
        ]
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    inputs: [
      { name: "totalReward", internalType: "uint256", type: "uint256" },
      { name: "rewardPct", internalType: "uint256", type: "uint256" }
    ],
    name: "computeReward",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "pure"
  },
  {
    type: "function",
    inputs: [{ name: "totalValue", internalType: "uint256", type: "uint256" }],
    name: "computeTotalReward",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "contractName",
    outputs: [{ name: "", internalType: "string", type: "string" }],
    stateMutability: "pure"
  },
  {
    type: "function",
    inputs: [],
    name: "contractURI",
    outputs: [{ name: "", internalType: "string", type: "string" }],
    stateMutability: "pure"
  },
  {
    type: "function",
    inputs: [],
    name: "contractVersion",
    outputs: [{ name: "", internalType: "string", type: "string" }],
    stateMutability: "pure"
  },
  {
    type: "function",
    inputs: [],
    name: "ethRewardAmount",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [
      { name: "tokenContract", internalType: "address", type: "address" },
      { name: "tokenId", internalType: "uint256", type: "uint256" }
    ],
    name: "getCreateReferral",
    outputs: [
      { name: "createReferral", internalType: "address", type: "address" }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "getERC20MinterConfig",
    outputs: [
      {
        name: "",
        internalType: "struct IERC20Minter.ERC20MinterConfig",
        type: "tuple",
        components: [
          {
            name: "zoraRewardRecipientAddress",
            internalType: "address",
            type: "address"
          },
          {
            name: "rewardRecipientPercentage",
            internalType: "uint256",
            type: "uint256"
          },
          { name: "ethReward", internalType: "uint256", type: "uint256" }
        ]
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [
      { name: "tokenContract", internalType: "address", type: "address" },
      { name: "tokenId", internalType: "uint256", type: "uint256" }
    ],
    name: "getFirstMinter",
    outputs: [
      { name: "firstMinter", internalType: "address", type: "address" }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [
      { name: "tokenContract", internalType: "address", type: "address" },
      { name: "tokenId", internalType: "uint256", type: "uint256" },
      { name: "wallet", internalType: "address", type: "address" }
    ],
    name: "getMintedPerWallet",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [
      {
        name: "_zoraRewardRecipientAddress",
        internalType: "address",
        type: "address"
      },
      { name: "_owner", internalType: "address", type: "address" },
      { name: "_rewardPct", internalType: "uint256", type: "uint256" },
      { name: "_ethReward", internalType: "uint256", type: "uint256" }
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [
      { name: "mintTo", internalType: "address", type: "address" },
      { name: "quantity", internalType: "uint256", type: "uint256" },
      { name: "tokenAddress", internalType: "address", type: "address" },
      { name: "tokenId", internalType: "uint256", type: "uint256" },
      { name: "totalValue", internalType: "uint256", type: "uint256" },
      { name: "currency", internalType: "address", type: "address" },
      { name: "mintReferral", internalType: "address", type: "address" },
      { name: "comment", internalType: "string", type: "string" }
    ],
    name: "mint",
    outputs: [],
    stateMutability: "payable"
  },
  {
    type: "function",
    inputs: [],
    name: "minterConfig",
    outputs: [
      {
        name: "zoraRewardRecipientAddress",
        internalType: "address",
        type: "address"
      },
      {
        name: "rewardRecipientPercentage",
        internalType: "uint256",
        type: "uint256"
      },
      { name: "ethReward", internalType: "uint256", type: "uint256" }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "owner",
    outputs: [{ name: "", internalType: "address", type: "address" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "pendingOwner",
    outputs: [{ name: "", internalType: "address", type: "address" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [
      { name: "", internalType: "address", type: "address" },
      { name: "", internalType: "uint256", type: "uint256" },
      { name: "", internalType: "uint256", type: "uint256" },
      { name: "", internalType: "uint256", type: "uint256" },
      { name: "", internalType: "bytes", type: "bytes" }
    ],
    name: "requestMint",
    outputs: [
      {
        name: "",
        internalType: "struct ICreatorCommands.CommandSet",
        type: "tuple",
        components: [
          {
            name: "commands",
            internalType: "struct ICreatorCommands.Command[]",
            type: "tuple[]",
            components: [
              {
                name: "method",
                internalType: "enum ICreatorCommands.CreatorActions",
                type: "uint8"
              },
              { name: "args", internalType: "bytes", type: "bytes" }
            ]
          },
          { name: "at", internalType: "uint256", type: "uint256" }
        ]
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    inputs: [{ name: "tokenId", internalType: "uint256", type: "uint256" }],
    name: "resetSale",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [],
    name: "resignOwnership",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [{ name: "_newOwner", internalType: "address", type: "address" }],
    name: "safeTransferOwnership",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [
      { name: "tokenContract", internalType: "address", type: "address" },
      { name: "tokenId", internalType: "uint256", type: "uint256" }
    ],
    name: "sale",
    outputs: [
      {
        name: "",
        internalType: "struct IERC20Minter.SalesConfig",
        type: "tuple",
        components: [
          { name: "saleStart", internalType: "uint64", type: "uint64" },
          { name: "saleEnd", internalType: "uint64", type: "uint64" },
          {
            name: "maxTokensPerAddress",
            internalType: "uint64",
            type: "uint64"
          },
          { name: "pricePerToken", internalType: "uint256", type: "uint256" },
          { name: "fundsRecipient", internalType: "address", type: "address" },
          { name: "currency", internalType: "address", type: "address" }
        ]
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [
      {
        name: "config",
        internalType: "struct IERC20Minter.ERC20MinterConfig",
        type: "tuple",
        components: [
          {
            name: "zoraRewardRecipientAddress",
            internalType: "address",
            type: "address"
          },
          {
            name: "rewardRecipientPercentage",
            internalType: "uint256",
            type: "uint256"
          },
          { name: "ethReward", internalType: "uint256", type: "uint256" }
        ]
      }
    ],
    name: "setERC20MinterConfig",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [
      { name: "tokenId", internalType: "uint256", type: "uint256" },
      {
        name: "encodedPremintSalesConfig",
        internalType: "bytes",
        type: "bytes"
      }
    ],
    name: "setPremintSale",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [
      { name: "tokenId", internalType: "uint256", type: "uint256" },
      {
        name: "salesConfig",
        internalType: "struct IERC20Minter.SalesConfig",
        type: "tuple",
        components: [
          { name: "saleStart", internalType: "uint64", type: "uint64" },
          { name: "saleEnd", internalType: "uint64", type: "uint64" },
          {
            name: "maxTokensPerAddress",
            internalType: "uint64",
            type: "uint64"
          },
          { name: "pricePerToken", internalType: "uint256", type: "uint256" },
          { name: "fundsRecipient", internalType: "address", type: "address" },
          { name: "currency", internalType: "address", type: "address" }
        ]
      }
    ],
    name: "setSale",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [{ name: "interfaceId", internalType: "bytes4", type: "bytes4" }],
    name: "supportsInterface",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
    stateMutability: "pure"
  },
  {
    type: "function",
    inputs: [],
    name: "totalRewardPct",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [{ name: "_newOwner", internalType: "address", type: "address" }],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "config",
        internalType: "struct IERC20Minter.ERC20MinterConfig",
        type: "tuple",
        components: [
          {
            name: "zoraRewardRecipientAddress",
            internalType: "address",
            type: "address"
          },
          {
            name: "rewardRecipientPercentage",
            internalType: "uint256",
            type: "uint256"
          },
          { name: "ethReward", internalType: "uint256", type: "uint256" }
        ],
        indexed: false
      }
    ],
    name: "ERC20MinterConfigSet"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "createReferral",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "mintReferral",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "firstMinter",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "zora",
        internalType: "address",
        type: "address",
        indexed: false
      },
      {
        name: "collection",
        internalType: "address",
        type: "address",
        indexed: false
      },
      {
        name: "currency",
        internalType: "address",
        type: "address",
        indexed: false
      },
      {
        name: "tokenId",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      },
      {
        name: "createReferralReward",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      },
      {
        name: "mintReferralReward",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      },
      {
        name: "firstMinterReward",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      },
      {
        name: "zoraReward",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      }
    ],
    name: "ERC20RewardsDeposit"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "version", internalType: "uint8", type: "uint8", indexed: false }
    ],
    name: "Initialized"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "sender",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "tokenContract",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "tokenId",
        internalType: "uint256",
        type: "uint256",
        indexed: true
      },
      {
        name: "quantity",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      },
      {
        name: "comment",
        internalType: "string",
        type: "string",
        indexed: false
      }
    ],
    name: "MintComment"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "owner",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "canceledOwner",
        internalType: "address",
        type: "address",
        indexed: true
      }
    ],
    name: "OwnerCanceled"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "owner",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "pendingOwner",
        internalType: "address",
        type: "address",
        indexed: true
      }
    ],
    name: "OwnerPending"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "prevOwner",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "newOwner",
        internalType: "address",
        type: "address",
        indexed: true
      }
    ],
    name: "OwnerUpdated"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "mediaContract",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "tokenId",
        internalType: "uint256",
        type: "uint256",
        indexed: true
      },
      {
        name: "salesConfig",
        internalType: "struct IERC20Minter.SalesConfig",
        type: "tuple",
        components: [
          { name: "saleStart", internalType: "uint64", type: "uint64" },
          { name: "saleEnd", internalType: "uint64", type: "uint64" },
          {
            name: "maxTokensPerAddress",
            internalType: "uint64",
            type: "uint64"
          },
          { name: "pricePerToken", internalType: "uint256", type: "uint256" },
          { name: "fundsRecipient", internalType: "address", type: "address" },
          { name: "currency", internalType: "address", type: "address" }
        ],
        indexed: false
      }
    ],
    name: "SaleSet"
  },
  { type: "error", inputs: [], name: "AddressZero" },
  { type: "error", inputs: [], name: "ERC20TransferSlippage" },
  { type: "error", inputs: [], name: "FailedToSendEthReward" },
  {
    type: "error",
    inputs: [],
    name: "INITIALIZABLE_CONTRACT_ALREADY_INITIALIZED"
  },
  {
    type: "error",
    inputs: [],
    name: "INITIALIZABLE_CONTRACT_IS_NOT_INITIALIZING"
  },
  { type: "error", inputs: [], name: "InvalidCurrency" },
  {
    type: "error",
    inputs: [
      { name: "expectedValue", internalType: "uint256", type: "uint256" },
      { name: "actualValue", internalType: "uint256", type: "uint256" }
    ],
    name: "InvalidETHValue"
  },
  { type: "error", inputs: [], name: "InvalidValue" },
  { type: "error", inputs: [], name: "ONLY_OWNER" },
  { type: "error", inputs: [], name: "ONLY_PENDING_OWNER" },
  { type: "error", inputs: [], name: "OWNER_CANNOT_BE_ZERO_ADDRESS" },
  { type: "error", inputs: [], name: "PricePerTokenTooLow" },
  { type: "error", inputs: [], name: "RequestMintInvalidUseMint" },
  { type: "error", inputs: [], name: "SaleEnded" },
  { type: "error", inputs: [], name: "SaleHasNotStarted" },
  {
    type: "error",
    inputs: [
      { name: "user", internalType: "address", type: "address" },
      { name: "limit", internalType: "uint256", type: "uint256" },
      { name: "requestedAmount", internalType: "uint256", type: "uint256" }
    ],
    name: "UserExceedsMintLimit"
  },
  { type: "error", inputs: [], name: "WrongValueSent" }
];
var erc20MinterAddress = {
  1: "0x777777E8850d8D6d98De2B5f64fae401F96eFF31",
  10: "0x777777E8850d8D6d98De2B5f64fae401F96eFF31",
  8453: "0x777777E8850d8D6d98De2B5f64fae401F96eFF31",
  42161: "0x777777E8850d8D6d98De2B5f64fae401F96eFF31",
  81457: "0x777777E8850d8D6d98De2B5f64fae401F96eFF31",
  84532: "0x777777E8850d8D6d98De2B5f64fae401F96eFF31",
  421614: "0x777777E8850d8D6d98De2B5f64fae401F96eFF31",
  7777777: "0x777777E8850d8D6d98De2B5f64fae401F96eFF31",
  11155111: "0x777777E8850d8D6d98De2B5f64fae401F96eFF31",
  999999999: "0x8Ec7f068A77fa5FC1925110f82381374BA054Ff2"
};
var erc20MinterConfig = {
  address: erc20MinterAddress,
  abi: erc20MinterABI
};
var erc20ZABI = [
  {
    type: "constructor",
    inputs: [
      {
        name: "_royalties",
        internalType: "contract IRoyalties",
        type: "address"
      }
    ],
    stateMutability: "nonpayable"
  },
  { type: "receive", stateMutability: "payable" },
  {
    type: "function",
    inputs: [],
    name: "WETH",
    outputs: [{ name: "", internalType: "contract IWETH", type: "address" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [
      { name: "erc20TotalSupply", internalType: "uint256", type: "uint256" },
      { name: "erc20Reserve", internalType: "uint256", type: "uint256" },
      { name: "erc20Liquidity", internalType: "uint256", type: "uint256" },
      { name: "erc20Excess", internalType: "uint256", type: "uint256" },
      { name: "erc1155Excess", internalType: "uint256", type: "uint256" }
    ],
    name: "activate",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [
      { name: "owner", internalType: "address", type: "address" },
      { name: "spender", internalType: "address", type: "address" }
    ],
    name: "allowance",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [
      { name: "spender", internalType: "address", type: "address" },
      { name: "value", internalType: "uint256", type: "uint256" }
    ],
    name: "approve",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [{ name: "account", internalType: "address", type: "address" }],
    name: "balanceOf",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "contractURI",
    outputs: [{ name: "", internalType: "string", type: "string" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "decimals",
    outputs: [{ name: "", internalType: "uint8", type: "uint8" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [
      { name: "collection", internalType: "address", type: "address" },
      { name: "tokenId", internalType: "uint256", type: "uint256" },
      { name: "name", internalType: "string", type: "string" },
      { name: "symbol", internalType: "string", type: "string" }
    ],
    name: "initialize",
    outputs: [{ name: "", internalType: "address", type: "address" }],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [],
    name: "name",
    outputs: [{ name: "", internalType: "string", type: "string" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "nonfungiblePositionManager",
    outputs: [
      {
        name: "",
        internalType: "contract INonfungiblePositionManager",
        type: "address"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [
      { name: "operator", internalType: "address", type: "address" },
      { name: "from", internalType: "address", type: "address" },
      { name: "ids", internalType: "uint256[]", type: "uint256[]" },
      { name: "values", internalType: "uint256[]", type: "uint256[]" },
      { name: "data", internalType: "bytes", type: "bytes" }
    ],
    name: "onERC1155BatchReceived",
    outputs: [{ name: "", internalType: "bytes4", type: "bytes4" }],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [
      { name: "operator", internalType: "address", type: "address" },
      { name: "from", internalType: "address", type: "address" },
      { name: "id", internalType: "uint256", type: "uint256" },
      { name: "value", internalType: "uint256", type: "uint256" },
      { name: "data", internalType: "bytes", type: "bytes" }
    ],
    name: "onERC1155Received",
    outputs: [{ name: "", internalType: "bytes4", type: "bytes4" }],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [
      { name: "from", internalType: "address", type: "address" },
      { name: "operator", internalType: "address", type: "address" },
      { name: "tokenId", internalType: "uint256", type: "uint256" },
      { name: "data", internalType: "bytes", type: "bytes" }
    ],
    name: "onERC721Received",
    outputs: [{ name: "", internalType: "bytes4", type: "bytes4" }],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [],
    name: "royalties",
    outputs: [
      { name: "", internalType: "contract IRoyalties", type: "address" }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [{ name: "interfaceId", internalType: "bytes4", type: "bytes4" }],
    name: "supportsInterface",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "symbol",
    outputs: [{ name: "", internalType: "string", type: "string" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "tokenInfo",
    outputs: [
      {
        name: "",
        internalType: "struct IERC20Z.TokenInfo",
        type: "tuple",
        components: [
          { name: "collection", internalType: "address", type: "address" },
          { name: "tokenId", internalType: "uint256", type: "uint256" },
          { name: "creator", internalType: "address", type: "address" }
        ]
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "tokenLiquidityInfo",
    outputs: [
      { name: "pool", internalType: "address", type: "address" },
      {
        name: "initialLiquidityPositionId",
        internalType: "uint256",
        type: "uint256"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "tokenURI",
    outputs: [{ name: "", internalType: "string", type: "string" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "totalSupply",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [
      { name: "to", internalType: "address", type: "address" },
      { name: "value", internalType: "uint256", type: "uint256" }
    ],
    name: "transfer",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [
      { name: "from", internalType: "address", type: "address" },
      { name: "to", internalType: "address", type: "address" },
      { name: "value", internalType: "uint256", type: "uint256" }
    ],
    name: "transferFrom",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [
      { name: "amount20z", internalType: "uint256", type: "uint256" },
      { name: "recipient", internalType: "address", type: "address" }
    ],
    name: "unwrap",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [
      { name: "amount1155", internalType: "uint256", type: "uint256" },
      { name: "recipient", internalType: "address", type: "address" }
    ],
    name: "wrap",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "owner",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "spender",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "value",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      }
    ],
    name: "Approval"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "erc20z",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "amount20z",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      },
      {
        name: "collection",
        internalType: "address",
        type: "address",
        indexed: false
      },
      {
        name: "tokenId",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      },
      {
        name: "amount1155",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      },
      {
        name: "recipient",
        internalType: "address",
        type: "address",
        indexed: false
      }
    ],
    name: "ConvertedTo1155"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "erc20z",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "amount20z",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      },
      {
        name: "collection",
        internalType: "address",
        type: "address",
        indexed: false
      },
      {
        name: "tokenId",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      },
      {
        name: "amount1155",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      },
      {
        name: "recipient",
        internalType: "address",
        type: "address",
        indexed: false
      }
    ],
    name: "ConvertedTo20z"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "version",
        internalType: "uint64",
        type: "uint64",
        indexed: false
      }
    ],
    name: "Initialized"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "quantity",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      }
    ],
    name: "ReceivedAdminMintNFTs"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "token0",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "amount0",
        internalType: "uint256",
        type: "uint256",
        indexed: true
      },
      {
        name: "token1",
        internalType: "address",
        type: "address",
        indexed: false
      },
      {
        name: "amount1",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      },
      { name: "fee", internalType: "uint256", type: "uint256", indexed: false },
      {
        name: "positionId",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      },
      {
        name: "lpLiquidity",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      },
      {
        name: "erc20Excess",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      },
      {
        name: "erc1155Excess",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      }
    ],
    name: "SecondaryMarketActivated"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "from", internalType: "address", type: "address", indexed: true },
      { name: "to", internalType: "address", type: "address", indexed: true },
      {
        name: "value",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      }
    ],
    name: "Transfer"
  },
  {
    type: "error",
    inputs: [{ name: "target", internalType: "address", type: "address" }],
    name: "AddressEmptyCode"
  },
  {
    type: "error",
    inputs: [{ name: "account", internalType: "address", type: "address" }],
    name: "AddressInsufficientBalance"
  },
  { type: "error", inputs: [], name: "AlreadyActivatedCannotReactivate" },
  {
    type: "error",
    inputs: [
      { name: "spender", internalType: "address", type: "address" },
      { name: "allowance", internalType: "uint256", type: "uint256" },
      { name: "needed", internalType: "uint256", type: "uint256" }
    ],
    name: "ERC20InsufficientAllowance"
  },
  {
    type: "error",
    inputs: [
      { name: "sender", internalType: "address", type: "address" },
      { name: "balance", internalType: "uint256", type: "uint256" },
      { name: "needed", internalType: "uint256", type: "uint256" }
    ],
    name: "ERC20InsufficientBalance"
  },
  {
    type: "error",
    inputs: [{ name: "approver", internalType: "address", type: "address" }],
    name: "ERC20InvalidApprover"
  },
  {
    type: "error",
    inputs: [{ name: "receiver", internalType: "address", type: "address" }],
    name: "ERC20InvalidReceiver"
  },
  {
    type: "error",
    inputs: [{ name: "sender", internalType: "address", type: "address" }],
    name: "ERC20InvalidSender"
  },
  {
    type: "error",
    inputs: [{ name: "spender", internalType: "address", type: "address" }],
    name: "ERC20InvalidSpender"
  },
  { type: "error", inputs: [], name: "FailedInnerCall" },
  { type: "error", inputs: [], name: "IDsDoNotMatchValuesLength" },
  { type: "error", inputs: [], name: "InsufficientBalance" },
  { type: "error", inputs: [], name: "Invalid20zTransfer" },
  { type: "error", inputs: [], name: "InvalidAmount20z" },
  { type: "error", inputs: [], name: "InvalidInitialization" },
  { type: "error", inputs: [], name: "InvalidParams" },
  { type: "error", inputs: [], name: "NotInitializing" },
  { type: "error", inputs: [], name: "OnlySaleStrategy" },
  {
    type: "error",
    inputs: [],
    name: "OnlySupportReceivingERC1155AssociatedZoraNFT"
  },
  {
    type: "error",
    inputs: [],
    name: "OnlySupportReceivingERC721UniswapPoolNFTs"
  },
  { type: "error", inputs: [], name: "PoolCreationFailed" },
  { type: "error", inputs: [], name: "RecipientAddressZero" },
  { type: "error", inputs: [], name: "ReentrancyGuardReentrantCall" },
  {
    type: "error",
    inputs: [{ name: "token", internalType: "address", type: "address" }],
    name: "SafeERC20FailedOperation"
  },
  { type: "error", inputs: [], name: "SecondaryMarketHasNotYetStarted" },
  { type: "error", inputs: [], name: "TokenIdNotValidToSwap" },
  { type: "error", inputs: [], name: "UnknownReceiveActionDataCall" }
];
var erc20ZRoyaltiesABI = [
  { type: "receive", stateMutability: "payable" },
  {
    type: "function",
    inputs: [],
    name: "WETH",
    outputs: [{ name: "", internalType: "contract IWETH", type: "address" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [
      { name: "erc20z", internalType: "address", type: "address" },
      { name: "recipient", internalType: "address payable", type: "address" }
    ],
    name: "claim",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [{ name: "erc20z", internalType: "address", type: "address" }],
    name: "claimFor",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [],
    name: "feeBps",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "feeRecipient",
    outputs: [{ name: "", internalType: "address payable", type: "address" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [{ name: "amount", internalType: "uint256", type: "uint256" }],
    name: "getFee",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [{ name: "erc20z", internalType: "address", type: "address" }],
    name: "getUnclaimedFees",
    outputs: [
      {
        name: "",
        internalType: "struct IRoyalties.UnclaimedFees",
        type: "tuple",
        components: [
          { name: "token0", internalType: "address", type: "address" },
          { name: "token1", internalType: "address", type: "address" },
          { name: "token0Amount", internalType: "uint128", type: "uint128" },
          { name: "token1Amount", internalType: "uint128", type: "uint128" }
        ]
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [{ name: "erc20z", internalType: "address[]", type: "address[]" }],
    name: "getUnclaimedFeesBatch",
    outputs: [
      {
        name: "",
        internalType: "struct IRoyalties.UnclaimedFees[]",
        type: "tuple[]",
        components: [
          { name: "token0", internalType: "address", type: "address" },
          { name: "token1", internalType: "address", type: "address" },
          { name: "token0Amount", internalType: "uint128", type: "uint128" },
          { name: "token1Amount", internalType: "uint128", type: "uint128" }
        ]
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [
      { name: "_weth", internalType: "contract IWETH", type: "address" },
      {
        name: "_nonfungiblePositionManager",
        internalType: "contract INonfungiblePositionManager",
        type: "address"
      },
      {
        name: "_feeRecipient",
        internalType: "address payable",
        type: "address"
      },
      { name: "_feeBps", internalType: "uint256", type: "uint256" }
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [],
    name: "nonfungiblePositionManager",
    outputs: [
      {
        name: "",
        internalType: "contract INonfungiblePositionManager",
        type: "address"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [
      { name: "operator", internalType: "address", type: "address" },
      { name: "from", internalType: "address", type: "address" },
      { name: "positionId", internalType: "uint256", type: "uint256" },
      { name: "data", internalType: "bytes", type: "bytes" }
    ],
    name: "onERC721Received",
    outputs: [{ name: "", internalType: "bytes4", type: "bytes4" }],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [{ name: "erc20z", internalType: "address", type: "address" }],
    name: "positionsByErc20z",
    outputs: [{ name: "positionId", internalType: "uint256", type: "uint256" }],
    stateMutability: "view"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "collection",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "tokenId",
        internalType: "uint256",
        type: "uint256",
        indexed: true
      },
      {
        name: "creator",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "recipient",
        internalType: "address",
        type: "address",
        indexed: false
      },
      {
        name: "positionAddress",
        internalType: "address",
        type: "address",
        indexed: false
      },
      {
        name: "positionId",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      },
      {
        name: "token0",
        internalType: "address",
        type: "address",
        indexed: false
      },
      {
        name: "token0Amount",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      },
      {
        name: "token1",
        internalType: "address",
        type: "address",
        indexed: false
      },
      {
        name: "token1Amount",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      }
    ],
    name: "RoyaltyClaim"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "erc20zAddress",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "positionAddress",
        internalType: "address",
        type: "address",
        indexed: false
      },
      {
        name: "positionId",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      }
    ],
    name: "RoyaltyDeposit"
  },
  { type: "error", inputs: [], name: "AddressCannotBeZero" },
  {
    type: "error",
    inputs: [{ name: "target", internalType: "address", type: "address" }],
    name: "AddressEmptyCode"
  },
  {
    type: "error",
    inputs: [{ name: "account", internalType: "address", type: "address" }],
    name: "AddressInsufficientBalance"
  },
  { type: "error", inputs: [], name: "AddressZero" },
  { type: "error", inputs: [], name: "AlreadyInitialized" },
  { type: "error", inputs: [], name: "CreatorMustBeSet" },
  {
    type: "error",
    inputs: [],
    name: "ERC721SenderRoyaltiesNeedsToBePositionManager"
  },
  { type: "error", inputs: [], name: "FailedInnerCall" },
  { type: "error", inputs: [], name: "OnlyCreatorCanCall" },
  { type: "error", inputs: [], name: "OnlyErc20z" },
  { type: "error", inputs: [], name: "OnlyWeth" },
  { type: "error", inputs: [], name: "ParamsCannotBeZero" },
  { type: "error", inputs: [], name: "ReentrancyGuardReentrantCall" },
  {
    type: "error",
    inputs: [{ name: "token", internalType: "address", type: "address" }],
    name: "SafeERC20FailedOperation"
  }
];
var erc20ZRoyaltiesAddress = {
  1: "0x77777771DF91C56c5468746E80DFA8b880f9719F",
  10: "0x77777771DF91C56c5468746E80DFA8b880f9719F",
  8453: "0x77777771DF91C56c5468746E80DFA8b880f9719F",
  42161: "0x77777771DF91C56c5468746E80DFA8b880f9719F",
  81457: "0x77777771DF91C56c5468746E80DFA8b880f9719F",
  84532: "0x77777771DF91C56c5468746E80DFA8b880f9719F",
  421614: "0x77777771DF91C56c5468746E80DFA8b880f9719F",
  7777777: "0x77777771DF91C56c5468746E80DFA8b880f9719F",
  11155111: "0x53a85FbD2955EF713AA489Ae0C48523E727a0c07",
  999999999: "0x77777771DF91C56c5468746E80DFA8b880f9719F"
};
var erc20ZRoyaltiesConfig = {
  address: erc20ZRoyaltiesAddress,
  abi: erc20ZRoyaltiesABI
};
var iPremintDefinitionsABI = [
  {
    type: "function",
    inputs: [
      {
        name: "",
        internalType: "struct TokenCreationConfig",
        type: "tuple",
        components: [
          { name: "tokenURI", internalType: "string", type: "string" },
          { name: "maxSupply", internalType: "uint256", type: "uint256" },
          {
            name: "maxTokensPerAddress",
            internalType: "uint64",
            type: "uint64"
          },
          { name: "pricePerToken", internalType: "uint96", type: "uint96" },
          { name: "mintStart", internalType: "uint64", type: "uint64" },
          { name: "mintDuration", internalType: "uint64", type: "uint64" },
          {
            name: "royaltyMintSchedule",
            internalType: "uint32",
            type: "uint32"
          },
          { name: "royaltyBPS", internalType: "uint32", type: "uint32" },
          {
            name: "royaltyRecipient",
            internalType: "address",
            type: "address"
          },
          {
            name: "fixedPriceMinter",
            internalType: "address",
            type: "address"
          }
        ]
      }
    ],
    name: "tokenConfigV1Definition",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [
      {
        name: "",
        internalType: "struct TokenCreationConfigV2",
        type: "tuple",
        components: [
          { name: "tokenURI", internalType: "string", type: "string" },
          { name: "maxSupply", internalType: "uint256", type: "uint256" },
          {
            name: "maxTokensPerAddress",
            internalType: "uint64",
            type: "uint64"
          },
          { name: "pricePerToken", internalType: "uint96", type: "uint96" },
          { name: "mintStart", internalType: "uint64", type: "uint64" },
          { name: "mintDuration", internalType: "uint64", type: "uint64" },
          { name: "royaltyBPS", internalType: "uint32", type: "uint32" },
          { name: "payoutRecipient", internalType: "address", type: "address" },
          {
            name: "fixedPriceMinter",
            internalType: "address",
            type: "address"
          },
          { name: "createReferral", internalType: "address", type: "address" }
        ]
      }
    ],
    name: "tokenConfigV2Definition",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [
      {
        name: "",
        internalType: "struct TokenCreationConfigV3",
        type: "tuple",
        components: [
          { name: "tokenURI", internalType: "string", type: "string" },
          { name: "maxSupply", internalType: "uint256", type: "uint256" },
          { name: "royaltyBPS", internalType: "uint32", type: "uint32" },
          { name: "payoutRecipient", internalType: "address", type: "address" },
          { name: "createReferral", internalType: "address", type: "address" },
          { name: "mintStart", internalType: "uint64", type: "uint64" },
          { name: "minter", internalType: "address", type: "address" },
          { name: "premintSalesConfig", internalType: "bytes", type: "bytes" }
        ]
      }
    ],
    name: "tokenConfigV3Definition",
    outputs: [],
    stateMutability: "nonpayable"
  }
];
var iSponsoredSparksSpenderActionABI = [
  {
    type: "function",
    inputs: [
      {
        name: "sponsoredMintBatch",
        internalType: "struct SponsoredMintBatch",
        type: "tuple",
        components: [
          { name: "verifier", internalType: "address", type: "address" },
          { name: "from", internalType: "address", type: "address" },
          {
            name: "destination",
            internalType: "address payable",
            type: "address"
          },
          { name: "data", internalType: "bytes", type: "bytes" },
          {
            name: "expectedRedeemAmount",
            internalType: "uint256",
            type: "uint256"
          },
          { name: "totalAmount", internalType: "uint256", type: "uint256" },
          { name: "ids", internalType: "uint256[]", type: "uint256[]" },
          { name: "quantities", internalType: "uint256[]", type: "uint256[]" },
          { name: "nonce", internalType: "uint256", type: "uint256" },
          { name: "deadline", internalType: "uint256", type: "uint256" }
        ]
      },
      { name: "signature", internalType: "bytes", type: "bytes" }
    ],
    name: "sponsoredMintBatch",
    outputs: [],
    stateMutability: "nonpayable"
  }
];
var iUniswapV3PoolABI = [
  {
    type: "function",
    inputs: [],
    name: "fee",
    outputs: [{ name: "", internalType: "uint24", type: "uint24" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "feeGrowthGlobal0X128",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "feeGrowthGlobal1X128",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [
      {
        name: "observationCardinalityNext",
        internalType: "uint16",
        type: "uint16"
      }
    ],
    name: "increaseObservationCardinalityNext",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [
      { name: "secondsAgos", internalType: "uint32[]", type: "uint32[]" }
    ],
    name: "observe",
    outputs: [
      { name: "tickCumulatives", internalType: "int56[]", type: "int56[]" },
      {
        name: "secondsPerLiquidityCumulativeX128s",
        internalType: "uint160[]",
        type: "uint160[]"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "slot0",
    outputs: [
      {
        name: "slot0",
        internalType: "struct IUniswapV3Pool.Slot0",
        type: "tuple",
        components: [
          { name: "sqrtPriceX96", internalType: "uint160", type: "uint160" },
          { name: "tick", internalType: "int24", type: "int24" },
          { name: "observationIndex", internalType: "uint16", type: "uint16" },
          {
            name: "observationCardinality",
            internalType: "uint16",
            type: "uint16"
          },
          {
            name: "observationCardinalityNext",
            internalType: "uint16",
            type: "uint16"
          },
          { name: "feeProtocol", internalType: "uint8", type: "uint8" },
          { name: "unlocked", internalType: "bool", type: "bool" }
        ]
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [
      { name: "recipient", internalType: "address", type: "address" },
      { name: "zeroForOne", internalType: "bool", type: "bool" },
      { name: "amountSpecified", internalType: "int256", type: "int256" },
      { name: "sqrtPriceLimitX96", internalType: "uint160", type: "uint160" },
      { name: "data", internalType: "bytes", type: "bytes" }
    ],
    name: "swap",
    outputs: [
      { name: "amount0", internalType: "int256", type: "int256" },
      { name: "amount1", internalType: "int256", type: "int256" }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [],
    name: "token0",
    outputs: [{ name: "", internalType: "address", type: "address" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "token1",
    outputs: [{ name: "", internalType: "address", type: "address" }],
    stateMutability: "view"
  }
];
var iUnwrapAndForwardActionABI = [
  {
    type: "function",
    inputs: [
      { name: "receiverAddress", internalType: "address", type: "address" },
      { name: "call", internalType: "bytes", type: "bytes" },
      { name: "valueToSend", internalType: "uint256", type: "uint256" }
    ],
    name: "callWithEth",
    outputs: [],
    stateMutability: "payable"
  }
];
var mintsEthUnwrapperAndCallerABI = [
  {
    type: "constructor",
    inputs: [
      {
        name: "_zoraSparks1155",
        internalType: "contract IZoraSparks1155",
        type: "address"
      }
    ],
    stateMutability: "nonpayable"
  },
  { type: "receive", stateMutability: "payable" },
  {
    type: "function",
    inputs: [
      { name: "", internalType: "address", type: "address" },
      { name: "from", internalType: "address", type: "address" },
      { name: "ids", internalType: "uint256[]", type: "uint256[]" },
      { name: "values", internalType: "uint256[]", type: "uint256[]" },
      { name: "data", internalType: "bytes", type: "bytes" }
    ],
    name: "onERC1155BatchReceived",
    outputs: [{ name: "", internalType: "bytes4", type: "bytes4" }],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [
      { name: "", internalType: "address", type: "address" },
      { name: "from", internalType: "address", type: "address" },
      { name: "id", internalType: "uint256", type: "uint256" },
      { name: "value", internalType: "uint256", type: "uint256" },
      { name: "data", internalType: "bytes", type: "bytes" }
    ],
    name: "onERC1155Received",
    outputs: [{ name: "", internalType: "bytes4", type: "bytes4" }],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [
      {
        name: "permit",
        internalType: "struct IZoraSparks1155Managed.PermitBatch",
        type: "tuple",
        components: [
          { name: "owner", internalType: "address", type: "address" },
          { name: "to", internalType: "address", type: "address" },
          { name: "tokenIds", internalType: "uint256[]", type: "uint256[]" },
          { name: "quantities", internalType: "uint256[]", type: "uint256[]" },
          { name: "safeTransferData", internalType: "bytes", type: "bytes" },
          { name: "deadline", internalType: "uint256", type: "uint256" },
          { name: "nonce", internalType: "uint256", type: "uint256" }
        ]
      },
      { name: "signature", internalType: "bytes", type: "bytes" }
    ],
    name: "permitWithAdditionalValue",
    outputs: [],
    stateMutability: "payable"
  },
  {
    type: "error",
    inputs: [{ name: "account", internalType: "address", type: "address" }],
    name: "AddressInsufficientBalance"
  },
  {
    type: "error",
    inputs: [{ name: "data", internalType: "bytes", type: "bytes" }],
    name: "CallFailed"
  },
  {
    type: "error",
    inputs: [{ name: "tokenId", internalType: "uint256", type: "uint256" }],
    name: "ERC20NotSupported"
  },
  { type: "error", inputs: [], name: "FailedInnerCall" },
  { type: "error", inputs: [], name: "NotExpectingReceive" },
  { type: "error", inputs: [], name: "NotZoraSparks1155" },
  {
    type: "error",
    inputs: [{ name: "data", internalType: "bytes", type: "bytes" }],
    name: "TransferFailed"
  },
  { type: "error", inputs: [], name: "UnknownUserAction" }
];
var mintsEthUnwrapperAndCallerAddress = {
  7777777: "0xb0994EB9520C98C97e1F3953a5964535C2bd271A",
  999999999: "0xb0994EB9520C98C97e1F3953a5964535C2bd271A"
};
var mintsEthUnwrapperAndCallerConfig = {
  address: mintsEthUnwrapperAndCallerAddress,
  abi: mintsEthUnwrapperAndCallerABI
};
var permit2ABI = [
  {
    type: "function",
    inputs: [],
    name: "DOMAIN_SEPARATOR",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [
      { name: "user", internalType: "address", type: "address" },
      { name: "token", internalType: "address", type: "address" },
      { name: "spender", internalType: "address", type: "address" }
    ],
    name: "allowance",
    outputs: [
      { name: "amount", internalType: "uint160", type: "uint160" },
      { name: "expiration", internalType: "uint48", type: "uint48" },
      { name: "nonce", internalType: "uint48", type: "uint48" }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [
      { name: "token", internalType: "address", type: "address" },
      { name: "spender", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint160", type: "uint160" },
      { name: "expiration", internalType: "uint48", type: "uint48" }
    ],
    name: "approve",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [
      { name: "token", internalType: "address", type: "address" },
      { name: "spender", internalType: "address", type: "address" },
      { name: "newNonce", internalType: "uint48", type: "uint48" }
    ],
    name: "invalidateNonces",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [
      { name: "wordPos", internalType: "uint256", type: "uint256" },
      { name: "mask", internalType: "uint256", type: "uint256" }
    ],
    name: "invalidateUnorderedNonces",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [
      {
        name: "approvals",
        internalType: "struct IAllowanceTransfer.TokenSpenderPair[]",
        type: "tuple[]",
        components: [
          { name: "token", internalType: "address", type: "address" },
          { name: "spender", internalType: "address", type: "address" }
        ]
      }
    ],
    name: "lockdown",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [
      { name: "", internalType: "address", type: "address" },
      { name: "", internalType: "uint256", type: "uint256" }
    ],
    name: "nonceBitmap",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [
      { name: "owner", internalType: "address", type: "address" },
      {
        name: "permitBatch",
        internalType: "struct IAllowanceTransfer.PermitBatch",
        type: "tuple",
        components: [
          {
            name: "details",
            internalType: "struct IAllowanceTransfer.PermitDetails[]",
            type: "tuple[]",
            components: [
              { name: "token", internalType: "address", type: "address" },
              { name: "amount", internalType: "uint160", type: "uint160" },
              { name: "expiration", internalType: "uint48", type: "uint48" },
              { name: "nonce", internalType: "uint48", type: "uint48" }
            ]
          },
          { name: "spender", internalType: "address", type: "address" },
          { name: "sigDeadline", internalType: "uint256", type: "uint256" }
        ]
      },
      { name: "signature", internalType: "bytes", type: "bytes" }
    ],
    name: "permit",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [
      { name: "owner", internalType: "address", type: "address" },
      {
        name: "permitSingle",
        internalType: "struct IAllowanceTransfer.PermitSingle",
        type: "tuple",
        components: [
          {
            name: "details",
            internalType: "struct IAllowanceTransfer.PermitDetails",
            type: "tuple",
            components: [
              { name: "token", internalType: "address", type: "address" },
              { name: "amount", internalType: "uint160", type: "uint160" },
              { name: "expiration", internalType: "uint48", type: "uint48" },
              { name: "nonce", internalType: "uint48", type: "uint48" }
            ]
          },
          { name: "spender", internalType: "address", type: "address" },
          { name: "sigDeadline", internalType: "uint256", type: "uint256" }
        ]
      },
      { name: "signature", internalType: "bytes", type: "bytes" }
    ],
    name: "permit",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [
      {
        name: "permit",
        internalType: "struct ISignatureTransfer.PermitTransferFrom",
        type: "tuple",
        components: [
          {
            name: "permitted",
            internalType: "struct ISignatureTransfer.TokenPermissions",
            type: "tuple",
            components: [
              { name: "token", internalType: "address", type: "address" },
              { name: "amount", internalType: "uint256", type: "uint256" }
            ]
          },
          { name: "nonce", internalType: "uint256", type: "uint256" },
          { name: "deadline", internalType: "uint256", type: "uint256" }
        ]
      },
      {
        name: "transferDetails",
        internalType: "struct ISignatureTransfer.SignatureTransferDetails",
        type: "tuple",
        components: [
          { name: "to", internalType: "address", type: "address" },
          { name: "requestedAmount", internalType: "uint256", type: "uint256" }
        ]
      },
      { name: "owner", internalType: "address", type: "address" },
      { name: "signature", internalType: "bytes", type: "bytes" }
    ],
    name: "permitTransferFrom",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [
      {
        name: "permit",
        internalType: "struct ISignatureTransfer.PermitBatchTransferFrom",
        type: "tuple",
        components: [
          {
            name: "permitted",
            internalType: "struct ISignatureTransfer.TokenPermissions[]",
            type: "tuple[]",
            components: [
              { name: "token", internalType: "address", type: "address" },
              { name: "amount", internalType: "uint256", type: "uint256" }
            ]
          },
          { name: "nonce", internalType: "uint256", type: "uint256" },
          { name: "deadline", internalType: "uint256", type: "uint256" }
        ]
      },
      {
        name: "transferDetails",
        internalType: "struct ISignatureTransfer.SignatureTransferDetails[]",
        type: "tuple[]",
        components: [
          { name: "to", internalType: "address", type: "address" },
          { name: "requestedAmount", internalType: "uint256", type: "uint256" }
        ]
      },
      { name: "owner", internalType: "address", type: "address" },
      { name: "signature", internalType: "bytes", type: "bytes" }
    ],
    name: "permitTransferFrom",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [
      {
        name: "permit",
        internalType: "struct ISignatureTransfer.PermitTransferFrom",
        type: "tuple",
        components: [
          {
            name: "permitted",
            internalType: "struct ISignatureTransfer.TokenPermissions",
            type: "tuple",
            components: [
              { name: "token", internalType: "address", type: "address" },
              { name: "amount", internalType: "uint256", type: "uint256" }
            ]
          },
          { name: "nonce", internalType: "uint256", type: "uint256" },
          { name: "deadline", internalType: "uint256", type: "uint256" }
        ]
      },
      {
        name: "transferDetails",
        internalType: "struct ISignatureTransfer.SignatureTransferDetails",
        type: "tuple",
        components: [
          { name: "to", internalType: "address", type: "address" },
          { name: "requestedAmount", internalType: "uint256", type: "uint256" }
        ]
      },
      { name: "owner", internalType: "address", type: "address" },
      { name: "witness", internalType: "bytes32", type: "bytes32" },
      { name: "witnessTypeString", internalType: "string", type: "string" },
      { name: "signature", internalType: "bytes", type: "bytes" }
    ],
    name: "permitWitnessTransferFrom",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [
      {
        name: "permit",
        internalType: "struct ISignatureTransfer.PermitBatchTransferFrom",
        type: "tuple",
        components: [
          {
            name: "permitted",
            internalType: "struct ISignatureTransfer.TokenPermissions[]",
            type: "tuple[]",
            components: [
              { name: "token", internalType: "address", type: "address" },
              { name: "amount", internalType: "uint256", type: "uint256" }
            ]
          },
          { name: "nonce", internalType: "uint256", type: "uint256" },
          { name: "deadline", internalType: "uint256", type: "uint256" }
        ]
      },
      {
        name: "transferDetails",
        internalType: "struct ISignatureTransfer.SignatureTransferDetails[]",
        type: "tuple[]",
        components: [
          { name: "to", internalType: "address", type: "address" },
          { name: "requestedAmount", internalType: "uint256", type: "uint256" }
        ]
      },
      { name: "owner", internalType: "address", type: "address" },
      { name: "witness", internalType: "bytes32", type: "bytes32" },
      { name: "witnessTypeString", internalType: "string", type: "string" },
      { name: "signature", internalType: "bytes", type: "bytes" }
    ],
    name: "permitWitnessTransferFrom",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [
      {
        name: "transferDetails",
        internalType: "struct IAllowanceTransfer.AllowanceTransferDetails[]",
        type: "tuple[]",
        components: [
          { name: "from", internalType: "address", type: "address" },
          { name: "to", internalType: "address", type: "address" },
          { name: "amount", internalType: "uint160", type: "uint160" },
          { name: "token", internalType: "address", type: "address" }
        ]
      }
    ],
    name: "transferFrom",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [
      { name: "from", internalType: "address", type: "address" },
      { name: "to", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint160", type: "uint160" },
      { name: "token", internalType: "address", type: "address" }
    ],
    name: "transferFrom",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "owner",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "token",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "spender",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "amount",
        internalType: "uint160",
        type: "uint160",
        indexed: false
      },
      {
        name: "expiration",
        internalType: "uint48",
        type: "uint48",
        indexed: false
      }
    ],
    name: "Approval"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "owner",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "token",
        internalType: "address",
        type: "address",
        indexed: false
      },
      {
        name: "spender",
        internalType: "address",
        type: "address",
        indexed: false
      }
    ],
    name: "Lockdown"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "owner",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "token",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "spender",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "newNonce",
        internalType: "uint48",
        type: "uint48",
        indexed: false
      },
      {
        name: "oldNonce",
        internalType: "uint48",
        type: "uint48",
        indexed: false
      }
    ],
    name: "NonceInvalidation"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "owner",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "token",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "spender",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "amount",
        internalType: "uint160",
        type: "uint160",
        indexed: false
      },
      {
        name: "expiration",
        internalType: "uint48",
        type: "uint48",
        indexed: false
      },
      { name: "nonce", internalType: "uint48", type: "uint48", indexed: false }
    ],
    name: "Permit"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "owner",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "word",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      },
      {
        name: "mask",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      }
    ],
    name: "UnorderedNonceInvalidation"
  },
  {
    type: "error",
    inputs: [{ name: "deadline", internalType: "uint256", type: "uint256" }],
    name: "AllowanceExpired"
  },
  { type: "error", inputs: [], name: "ExcessiveInvalidation" },
  {
    type: "error",
    inputs: [{ name: "amount", internalType: "uint256", type: "uint256" }],
    name: "InsufficientAllowance"
  },
  {
    type: "error",
    inputs: [{ name: "maxAmount", internalType: "uint256", type: "uint256" }],
    name: "InvalidAmount"
  },
  { type: "error", inputs: [], name: "LengthMismatch" }
];
var permit2Address = {
  8453: "0x000000000022D473030F116dDEE9F6B43aC78BA3",
  84532: "0x000000000022D473030F116dDEE9F6B43aC78BA3"
};
var permit2Config = {
  address: permit2Address,
  abi: permit2ABI
};
var poolConfigEncodingABI = [
  {
    type: "function",
    inputs: [
      { name: "version", internalType: "uint8", type: "uint8" },
      { name: "currency", internalType: "address", type: "address" },
      { name: "tickLower", internalType: "int24[]", type: "int24[]" },
      { name: "tickUpper", internalType: "int24[]", type: "int24[]" },
      {
        name: "numDiscoveryPositions",
        internalType: "uint16[]",
        type: "uint16[]"
      },
      {
        name: "maxDiscoverySupplyShare",
        internalType: "uint256[]",
        type: "uint256[]"
      }
    ],
    name: "encodeMultiCurvePoolConfig",
    outputs: [{ name: "", internalType: "bytes", type: "bytes" }],
    stateMutability: "pure"
  }
];
var protocolRewardsABI = [
  { type: "constructor", inputs: [], stateMutability: "payable" },
  {
    type: "function",
    inputs: [],
    name: "WITHDRAW_TYPEHASH",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [{ name: "", internalType: "address", type: "address" }],
    name: "balanceOf",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [
      { name: "to", internalType: "address", type: "address" },
      { name: "reason", internalType: "bytes4", type: "bytes4" },
      { name: "comment", internalType: "string", type: "string" }
    ],
    name: "deposit",
    outputs: [],
    stateMutability: "payable"
  },
  {
    type: "function",
    inputs: [
      { name: "recipients", internalType: "address[]", type: "address[]" },
      { name: "amounts", internalType: "uint256[]", type: "uint256[]" },
      { name: "reasons", internalType: "bytes4[]", type: "bytes4[]" },
      { name: "comment", internalType: "string", type: "string" }
    ],
    name: "depositBatch",
    outputs: [],
    stateMutability: "payable"
  },
  {
    type: "function",
    inputs: [
      { name: "creator", internalType: "address", type: "address" },
      { name: "creatorReward", internalType: "uint256", type: "uint256" },
      { name: "createReferral", internalType: "address", type: "address" },
      {
        name: "createReferralReward",
        internalType: "uint256",
        type: "uint256"
      },
      { name: "mintReferral", internalType: "address", type: "address" },
      { name: "mintReferralReward", internalType: "uint256", type: "uint256" },
      { name: "firstMinter", internalType: "address", type: "address" },
      { name: "firstMinterReward", internalType: "uint256", type: "uint256" },
      { name: "zora", internalType: "address", type: "address" },
      { name: "zoraReward", internalType: "uint256", type: "uint256" }
    ],
    name: "depositRewards",
    outputs: [],
    stateMutability: "payable"
  },
  {
    type: "function",
    inputs: [],
    name: "eip712Domain",
    outputs: [
      { name: "fields", internalType: "bytes1", type: "bytes1" },
      { name: "name", internalType: "string", type: "string" },
      { name: "version", internalType: "string", type: "string" },
      { name: "chainId", internalType: "uint256", type: "uint256" },
      { name: "verifyingContract", internalType: "address", type: "address" },
      { name: "salt", internalType: "bytes32", type: "bytes32" },
      { name: "extensions", internalType: "uint256[]", type: "uint256[]" }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [{ name: "", internalType: "address", type: "address" }],
    name: "nonces",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "totalSupply",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [
      { name: "to", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" }
    ],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [
      { name: "to", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" }
    ],
    name: "withdrawFor",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [
      { name: "from", internalType: "address", type: "address" },
      { name: "to", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
      { name: "deadline", internalType: "uint256", type: "uint256" },
      { name: "v", internalType: "uint8", type: "uint8" },
      { name: "r", internalType: "bytes32", type: "bytes32" },
      { name: "s", internalType: "bytes32", type: "bytes32" }
    ],
    name: "withdrawWithSig",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "from", internalType: "address", type: "address", indexed: true },
      { name: "to", internalType: "address", type: "address", indexed: true },
      { name: "reason", internalType: "bytes4", type: "bytes4", indexed: true },
      {
        name: "amount",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      },
      {
        name: "comment",
        internalType: "string",
        type: "string",
        indexed: false
      }
    ],
    name: "Deposit"
  },
  { type: "event", anonymous: false, inputs: [], name: "EIP712DomainChanged" },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "creator",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "createReferral",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "mintReferral",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "firstMinter",
        internalType: "address",
        type: "address",
        indexed: false
      },
      {
        name: "zora",
        internalType: "address",
        type: "address",
        indexed: false
      },
      {
        name: "from",
        internalType: "address",
        type: "address",
        indexed: false
      },
      {
        name: "creatorReward",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      },
      {
        name: "createReferralReward",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      },
      {
        name: "mintReferralReward",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      },
      {
        name: "firstMinterReward",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      },
      {
        name: "zoraReward",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      }
    ],
    name: "RewardsDeposit"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "from", internalType: "address", type: "address", indexed: true },
      { name: "to", internalType: "address", type: "address", indexed: true },
      {
        name: "amount",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      }
    ],
    name: "Withdraw"
  },
  { type: "error", inputs: [], name: "ADDRESS_ZERO" },
  { type: "error", inputs: [], name: "ARRAY_LENGTH_MISMATCH" },
  { type: "error", inputs: [], name: "INVALID_DEPOSIT" },
  { type: "error", inputs: [], name: "INVALID_SIGNATURE" },
  { type: "error", inputs: [], name: "INVALID_WITHDRAW" },
  { type: "error", inputs: [], name: "InvalidShortString" },
  { type: "error", inputs: [], name: "SIGNATURE_DEADLINE_EXPIRED" },
  {
    type: "error",
    inputs: [{ name: "str", internalType: "string", type: "string" }],
    name: "StringTooLong"
  },
  { type: "error", inputs: [], name: "TRANSFER_FAILED" }
];
var protocolRewardsAddress = {
  1: "0x7777777F279eba3d3Ad8F4E708545291A6fDBA8B",
  10: "0x7777777F279eba3d3Ad8F4E708545291A6fDBA8B",
  999: "0x7777777F279eba3d3Ad8F4E708545291A6fDBA8B",
  8453: "0x7777777F279eba3d3Ad8F4E708545291A6fDBA8B",
  42161: "0x7777777F279eba3d3Ad8F4E708545291A6fDBA8B",
  81457: "0x7777777F279eba3d3Ad8F4E708545291A6fDBA8B",
  84532: "0x7777777F279eba3d3Ad8F4E708545291A6fDBA8B",
  421614: "0x7777777F279eba3d3Ad8F4E708545291A6fDBA8B",
  7777777: "0x7777777F279eba3d3Ad8F4E708545291A6fDBA8B",
  11155111: "0x7777777F279eba3d3Ad8F4E708545291A6fDBA8B",
  168587773: "0x7777777F279eba3d3Ad8F4E708545291A6fDBA8B",
  999999999: "0x7777777F279eba3d3Ad8F4E708545291A6fDBA8B"
};
var protocolRewardsConfig = {
  address: protocolRewardsAddress,
  abi: protocolRewardsABI
};
var secondarySwapABI = [
  { type: "receive", stateMutability: "payable" },
  {
    type: "function",
    inputs: [],
    name: "WETH",
    outputs: [{ name: "", internalType: "contract IWETH", type: "address" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [
      { name: "erc20zAddress", internalType: "address", type: "address" },
      { name: "num1155ToBuy", internalType: "uint256", type: "uint256" },
      { name: "recipient", internalType: "address payable", type: "address" },
      {
        name: "excessRefundRecipient",
        internalType: "address payable",
        type: "address"
      },
      { name: "maxEthToSpend", internalType: "uint256", type: "uint256" },
      { name: "sqrtPriceLimitX96", internalType: "uint160", type: "uint160" }
    ],
    name: "buy1155",
    outputs: [],
    stateMutability: "payable"
  },
  {
    type: "function",
    inputs: [
      { name: "weth_", internalType: "contract IWETH", type: "address" },
      {
        name: "swapRouter_",
        internalType: "contract ISwapRouter",
        type: "address"
      },
      { name: "uniswapFee_", internalType: "uint24", type: "uint24" },
      {
        name: "zoraTimedSaleStrategy_",
        internalType: "contract IZoraTimedSaleStrategy",
        type: "address"
      }
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [
      { name: "", internalType: "address", type: "address" },
      { name: "", internalType: "address", type: "address" },
      { name: "", internalType: "uint256[]", type: "uint256[]" },
      { name: "", internalType: "uint256[]", type: "uint256[]" },
      { name: "", internalType: "bytes", type: "bytes" }
    ],
    name: "onERC1155BatchReceived",
    outputs: [{ name: "", internalType: "bytes4", type: "bytes4" }],
    stateMutability: "pure"
  },
  {
    type: "function",
    inputs: [
      { name: "", internalType: "address", type: "address" },
      { name: "", internalType: "address", type: "address" },
      { name: "id", internalType: "uint256", type: "uint256" },
      { name: "value", internalType: "uint256", type: "uint256" },
      { name: "data", internalType: "bytes", type: "bytes" }
    ],
    name: "onERC1155Received",
    outputs: [{ name: "", internalType: "bytes4", type: "bytes4" }],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [
      { name: "erc20zAddress", internalType: "address", type: "address" },
      { name: "num1155ToSell", internalType: "uint256", type: "uint256" },
      { name: "recipient", internalType: "address payable", type: "address" },
      { name: "minEthToAcquire", internalType: "uint256", type: "uint256" },
      { name: "sqrtPriceLimitX96", internalType: "uint160", type: "uint160" }
    ],
    name: "sell1155",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [{ name: "interfaceId", internalType: "bytes4", type: "bytes4" }],
    name: "supportsInterface",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "swapRouter",
    outputs: [
      { name: "", internalType: "contract ISwapRouter", type: "address" }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "uniswapFee",
    outputs: [{ name: "", internalType: "uint24", type: "uint24" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "zoraTimedSaleStrategy",
    outputs: [
      {
        name: "",
        internalType: "contract IZoraTimedSaleStrategy",
        type: "address"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "msgSender",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "recipient",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "erc20zAddress",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "amountETHSold",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      },
      {
        name: "num1155Purchased",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      }
    ],
    name: "SecondaryBuy"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "sender",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "collection",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "tokenId",
        internalType: "uint256",
        type: "uint256",
        indexed: true
      },
      {
        name: "quantity",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      },
      {
        name: "comment",
        internalType: "string",
        type: "string",
        indexed: false
      },
      {
        name: "secondaryType",
        internalType: "enum ISecondarySwap.SecondaryType",
        type: "uint8",
        indexed: false
      }
    ],
    name: "SecondaryComment"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "msgSender",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "recipient",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "erc20zAddress",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "amountETHPurchased",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      },
      {
        name: "num1155Sold",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      }
    ],
    name: "SecondarySell"
  },
  {
    type: "error",
    inputs: [{ name: "account", internalType: "address", type: "address" }],
    name: "AddressInsufficientBalance"
  },
  { type: "error", inputs: [], name: "AddressZero" },
  { type: "error", inputs: [], name: "AlreadyInitialized" },
  { type: "error", inputs: [], name: "ERC20ZEquivalentAmountNotConverted" },
  { type: "error", inputs: [], name: "ERC20ZMinimumAmountNotReceived" },
  { type: "error", inputs: [], name: "FailedInnerCall" },
  { type: "error", inputs: [], name: "InvalidRecipient" },
  { type: "error", inputs: [], name: "NoETHSent" },
  { type: "error", inputs: [], name: "NotSupported" },
  { type: "error", inputs: [], name: "OnlyWETH" },
  { type: "error", inputs: [], name: "ReentrancyGuardReentrantCall" },
  { type: "error", inputs: [], name: "SaleNotSet" }
];
var secondarySwapAddress = {
  1: "0x777777EDF27Ac61671e3D5718b10bf6a8802f9f1",
  10: "0x777777EDF27Ac61671e3D5718b10bf6a8802f9f1",
  8453: "0x777777EDF27Ac61671e3D5718b10bf6a8802f9f1",
  42161: "0x777777EDF27Ac61671e3D5718b10bf6a8802f9f1",
  81457: "0x777777EDF27Ac61671e3D5718b10bf6a8802f9f1",
  84532: "0x777777EDF27Ac61671e3D5718b10bf6a8802f9f1",
  421614: "0x777777794a6e310F2A55da6f157b16ED28Fa5D91",
  7777777: "0x777777EDF27Ac61671e3D5718b10bf6a8802f9f1",
  11155111: "0x777777EDF27Ac61671e3D5718b10bf6a8802f9f1",
  999999999: "0x777777EDF27Ac61671e3D5718b10bf6a8802f9f1"
};
var secondarySwapConfig = {
  address: secondarySwapAddress,
  abi: secondarySwapABI
};
var sponsoredSparksSpenderABI = [
  {
    type: "constructor",
    inputs: [
      {
        name: "_zoraSparks1155",
        internalType: "contract IZoraSparks1155",
        type: "address"
      },
      { name: "fundsManager", internalType: "address", type: "address" },
      {
        name: "defaultVerifiers",
        internalType: "address[]",
        type: "address[]"
      }
    ],
    stateMutability: "nonpayable"
  },
  { type: "receive", stateMutability: "payable" },
  {
    type: "function",
    inputs: [],
    name: "NAME",
    outputs: [{ name: "", internalType: "string", type: "string" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "SPONSORED_SPEND_TYPEHASH",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "SPONSORSHIP_TYPEHASH",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "VERSION",
    outputs: [{ name: "", internalType: "string", type: "string" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "acceptOwnership",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [{ name: "", internalType: "address", type: "address" }],
    name: "allowedVerifiers",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "contractName",
    outputs: [{ name: "", internalType: "string", type: "string" }],
    stateMutability: "pure"
  },
  {
    type: "function",
    inputs: [],
    name: "contractVersion",
    outputs: [{ name: "", internalType: "string", type: "string" }],
    stateMutability: "pure"
  },
  {
    type: "function",
    inputs: [],
    name: "eip712Domain",
    outputs: [
      { name: "fields", internalType: "bytes1", type: "bytes1" },
      { name: "name", internalType: "string", type: "string" },
      { name: "version", internalType: "string", type: "string" },
      { name: "chainId", internalType: "uint256", type: "uint256" },
      { name: "verifyingContract", internalType: "address", type: "address" },
      { name: "salt", internalType: "bytes32", type: "bytes32" },
      { name: "extensions", internalType: "uint256[]", type: "uint256[]" }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "fund",
    outputs: [],
    stateMutability: "payable"
  },
  {
    type: "function",
    inputs: [
      {
        name: "sponsorship",
        internalType: "struct SponsoredMintBatch",
        type: "tuple",
        components: [
          { name: "verifier", internalType: "address", type: "address" },
          { name: "from", internalType: "address", type: "address" },
          {
            name: "destination",
            internalType: "address payable",
            type: "address"
          },
          { name: "data", internalType: "bytes", type: "bytes" },
          {
            name: "expectedRedeemAmount",
            internalType: "uint256",
            type: "uint256"
          },
          { name: "totalAmount", internalType: "uint256", type: "uint256" },
          { name: "ids", internalType: "uint256[]", type: "uint256[]" },
          { name: "quantities", internalType: "uint256[]", type: "uint256[]" },
          { name: "nonce", internalType: "uint256", type: "uint256" },
          { name: "deadline", internalType: "uint256", type: "uint256" }
        ]
      }
    ],
    name: "hashSponsoredMint",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [
      {
        name: "sponsoredSpend",
        internalType: "struct SponsoredSpend",
        type: "tuple",
        components: [
          { name: "verifier", internalType: "address", type: "address" },
          { name: "from", internalType: "address", type: "address" },
          {
            name: "destination",
            internalType: "address payable",
            type: "address"
          },
          { name: "data", internalType: "bytes", type: "bytes" },
          {
            name: "expectedInputAmount",
            internalType: "uint256",
            type: "uint256"
          },
          { name: "totalAmount", internalType: "uint256", type: "uint256" },
          { name: "nonce", internalType: "uint256", type: "uint256" },
          { name: "deadline", internalType: "uint256", type: "uint256" }
        ]
      }
    ],
    name: "hashSponsoredSpend",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [
      { name: "", internalType: "address", type: "address" },
      { name: "from", internalType: "address", type: "address" },
      { name: "ids", internalType: "uint256[]", type: "uint256[]" },
      { name: "values", internalType: "uint256[]", type: "uint256[]" },
      { name: "data", internalType: "bytes", type: "bytes" }
    ],
    name: "onERC1155BatchReceived",
    outputs: [{ name: "", internalType: "bytes4", type: "bytes4" }],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [
      { name: "", internalType: "address", type: "address" },
      { name: "from", internalType: "address", type: "address" },
      { name: "id", internalType: "uint256", type: "uint256" },
      { name: "value", internalType: "uint256", type: "uint256" },
      { name: "data", internalType: "bytes", type: "bytes" }
    ],
    name: "onERC1155Received",
    outputs: [{ name: "", internalType: "bytes4", type: "bytes4" }],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [],
    name: "owner",
    outputs: [{ name: "", internalType: "address", type: "address" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "pendingOwner",
    outputs: [{ name: "", internalType: "address", type: "address" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [
      { name: "verifier", internalType: "address", type: "address" },
      { name: "enabled", internalType: "bool", type: "bool" }
    ],
    name: "setVerifierStatus",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [
      {
        name: "sponsoredSpend",
        internalType: "struct SponsoredSpend",
        type: "tuple",
        components: [
          { name: "verifier", internalType: "address", type: "address" },
          { name: "from", internalType: "address", type: "address" },
          {
            name: "destination",
            internalType: "address payable",
            type: "address"
          },
          { name: "data", internalType: "bytes", type: "bytes" },
          {
            name: "expectedInputAmount",
            internalType: "uint256",
            type: "uint256"
          },
          { name: "totalAmount", internalType: "uint256", type: "uint256" },
          { name: "nonce", internalType: "uint256", type: "uint256" },
          { name: "deadline", internalType: "uint256", type: "uint256" }
        ]
      },
      { name: "signature", internalType: "bytes", type: "bytes" }
    ],
    name: "sponsoredExecute",
    outputs: [],
    stateMutability: "payable"
  },
  {
    type: "function",
    inputs: [{ name: "newOwner", internalType: "address", type: "address" }],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [
      { name: "", internalType: "address", type: "address" },
      { name: "", internalType: "uint256", type: "uint256" }
    ],
    name: "usedNonces",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [{ name: "amount", internalType: "uint256", type: "uint256" }],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "sender",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "amount",
        internalType: "uint256",
        type: "uint256",
        indexed: true
      }
    ],
    name: "ContractFunded"
  },
  { type: "event", anonymous: false, inputs: [], name: "EIP712DomainChanged" },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "previousOwner",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "newOwner",
        internalType: "address",
        type: "address",
        indexed: true
      }
    ],
    name: "OwnershipTransferStarted"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "previousOwner",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "newOwner",
        internalType: "address",
        type: "address",
        indexed: true
      }
    ],
    name: "OwnershipTransferred"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "verifier",
        internalType: "address",
        type: "address",
        indexed: true
      },
      { name: "from", internalType: "address", type: "address", indexed: true },
      {
        name: "amountSpent",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      },
      {
        name: "contractValue",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      }
    ],
    name: "SentSponsoredCallFromMintBalances"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "verifier",
        internalType: "address",
        type: "address",
        indexed: true
      },
      { name: "enabled", internalType: "bool", type: "bool", indexed: true }
    ],
    name: "SetVerifierStatus"
  },
  {
    type: "error",
    inputs: [{ name: "data", internalType: "bytes", type: "bytes" }],
    name: "CallFailed"
  },
  {
    type: "error",
    inputs: [{ name: "tokenId", internalType: "uint256", type: "uint256" }],
    name: "ERC20NotSupported"
  },
  { type: "error", inputs: [], name: "IdsMismatch" },
  { type: "error", inputs: [], name: "InvalidShortString" },
  { type: "error", inputs: [], name: "InvalidSignature" },
  { type: "error", inputs: [], name: "LengthMismatch" },
  { type: "error", inputs: [], name: "NoMoreFundsToSponsor" },
  { type: "error", inputs: [], name: "NonceUsed" },
  { type: "error", inputs: [], name: "NotExpectingReceive" },
  { type: "error", inputs: [], name: "NotZoraSparks1155" },
  {
    type: "error",
    inputs: [{ name: "owner", internalType: "address", type: "address" }],
    name: "OwnableInvalidOwner"
  },
  {
    type: "error",
    inputs: [{ name: "account", internalType: "address", type: "address" }],
    name: "OwnableUnauthorizedAccount"
  },
  {
    type: "error",
    inputs: [
      {
        name: "expectedRedeemAmount",
        internalType: "uint256",
        type: "uint256"
      },
      {
        name: "transientReceivedAmount",
        internalType: "uint256",
        type: "uint256"
      }
    ],
    name: "RedeemAmountIsIncorrect"
  },
  { type: "error", inputs: [], name: "SenderNotAllowedInSignature" },
  { type: "error", inputs: [], name: "SignatureExpired" },
  { type: "error", inputs: [], name: "SingleTransferNotSupported" },
  {
    type: "error",
    inputs: [{ name: "str", internalType: "string", type: "string" }],
    name: "StringTooLong"
  },
  {
    type: "error",
    inputs: [{ name: "data", internalType: "bytes", type: "bytes" }],
    name: "TransferFailed"
  },
  { type: "error", inputs: [], name: "UnknownAction" },
  { type: "error", inputs: [], name: "UnknownUserAction" },
  { type: "error", inputs: [], name: "ValuesMismatch" },
  {
    type: "error",
    inputs: [{ name: "verifier", internalType: "address", type: "address" }],
    name: "VerifierNotAllowed"
  },
  { type: "error", inputs: [], name: "WithdrawFailed" }
];
var sponsoredSparksSpenderAddress = {
  10: "0x35ca784918bf11692708c1D530691704AAcEA95E",
  8453: "0x6958A8866A40118e2CC21ab4752353835321b5e6",
  42161: "0x2fBdBc34B6015e7b40638179Aa05a2D2267452c7",
  81457: "0x786F0f6aE196715Cd6d65693f06DA57426ac8463",
  84532: "0x23150f60E233F519A01C735C29c1591f9E8353dE",
  7777777: "0x362Ef86acAD2FAa66A28Ee8d1F5a835ac0BBD11d",
  999999999: "0x3A98313fB00918a81d98f9986aED089365428293"
};
var sponsoredSparksSpenderConfig = {
  address: sponsoredSparksSpenderAddress,
  abi: sponsoredSparksSpenderABI
};
var uniswapUniversalRouterABI = [
  {
    type: "function",
    inputs: [
      { name: "commands", internalType: "bytes", type: "bytes" },
      { name: "inputs", internalType: "bytes[]", type: "bytes[]" },
      { name: "deadline", internalType: "uint256", type: "uint256" }
    ],
    name: "execute",
    outputs: [],
    stateMutability: "payable"
  },
  { type: "error", inputs: [], name: "ETHNotAccepted" },
  {
    type: "error",
    inputs: [
      { name: "commandIndex", internalType: "uint256", type: "uint256" },
      { name: "message", internalType: "bytes", type: "bytes" }
    ],
    name: "ExecutionFailed"
  },
  { type: "error", inputs: [], name: "InvalidEthSender" },
  { type: "error", inputs: [], name: "LengthMismatch" },
  { type: "error", inputs: [], name: "TransactionDeadlinePassed" }
];
var uniswapUniversalRouterAddress = {
  8453: "0x6fF5693b99212Da76ad316178A184AB56D299b43",
  84532: "0x492E6456D9528771018DeB9E87ef7750EF184104"
};
var uniswapUniversalRouterConfig = {
  address: uniswapUniversalRouterAddress,
  abi: uniswapUniversalRouterABI
};
var uniswapV3SwapRouterABI = [
  {
    type: "function",
    inputs: [
      {
        name: "params",
        internalType: "struct ISwapRouter.ExactInputParams",
        type: "tuple",
        components: [
          { name: "path", internalType: "bytes", type: "bytes" },
          { name: "recipient", internalType: "address", type: "address" },
          { name: "amountIn", internalType: "uint256", type: "uint256" },
          {
            name: "amountOutMinimum",
            internalType: "uint256",
            type: "uint256"
          }
        ]
      }
    ],
    name: "exactInput",
    outputs: [{ name: "amountOut", internalType: "uint256", type: "uint256" }],
    stateMutability: "payable"
  },
  {
    type: "function",
    inputs: [
      {
        name: "params",
        internalType: "struct ISwapRouter.ExactInputSingleParams",
        type: "tuple",
        components: [
          { name: "tokenIn", internalType: "address", type: "address" },
          { name: "tokenOut", internalType: "address", type: "address" },
          { name: "fee", internalType: "uint24", type: "uint24" },
          { name: "recipient", internalType: "address", type: "address" },
          { name: "amountIn", internalType: "uint256", type: "uint256" },
          {
            name: "amountOutMinimum",
            internalType: "uint256",
            type: "uint256"
          },
          {
            name: "sqrtPriceLimitX96",
            internalType: "uint160",
            type: "uint160"
          }
        ]
      }
    ],
    name: "exactInputSingle",
    outputs: [{ name: "amountOut", internalType: "uint256", type: "uint256" }],
    stateMutability: "payable"
  },
  {
    type: "function",
    inputs: [
      {
        name: "params",
        internalType: "struct ISwapRouter.ExactOutputParams",
        type: "tuple",
        components: [
          { name: "path", internalType: "bytes", type: "bytes" },
          { name: "recipient", internalType: "address", type: "address" },
          { name: "amountOut", internalType: "uint256", type: "uint256" },
          { name: "amountInMaximum", internalType: "uint256", type: "uint256" }
        ]
      }
    ],
    name: "exactOutput",
    outputs: [{ name: "amountIn", internalType: "uint256", type: "uint256" }],
    stateMutability: "payable"
  },
  {
    type: "function",
    inputs: [
      {
        name: "params",
        internalType: "struct ISwapRouter.ExactOutputSingleParams",
        type: "tuple",
        components: [
          { name: "tokenIn", internalType: "address", type: "address" },
          { name: "tokenOut", internalType: "address", type: "address" },
          { name: "fee", internalType: "uint24", type: "uint24" },
          { name: "recipient", internalType: "address", type: "address" },
          { name: "amountOut", internalType: "uint256", type: "uint256" },
          { name: "amountInMaximum", internalType: "uint256", type: "uint256" },
          {
            name: "sqrtPriceLimitX96",
            internalType: "uint160",
            type: "uint160"
          }
        ]
      }
    ],
    name: "exactOutputSingle",
    outputs: [{ name: "amountIn", internalType: "uint256", type: "uint256" }],
    stateMutability: "payable"
  },
  {
    type: "function",
    inputs: [
      { name: "amount0Delta", internalType: "int256", type: "int256" },
      { name: "amount1Delta", internalType: "int256", type: "int256" },
      { name: "data", internalType: "bytes", type: "bytes" }
    ],
    name: "uniswapV3SwapCallback",
    outputs: [],
    stateMutability: "nonpayable"
  }
];
var uniswapV3SwapRouterAddress = {
  1: "0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45",
  10: "0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45",
  8453: "0x2626664c2603336E57B271c5C0b26F421741e481",
  42161: "0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45",
  81457: "0x549FEB8c9bd4c12Ad2AB27022dA12492aC452B66",
  84532: "0x94cC0AaC535CCDB3C01d6787D6413C739ae12bc4",
  421614: "0x101F443B4d1b059569D643917553c771E1b9663E",
  7777777: "0x7De04c96BE5159c3b5CeffC82aa176dc81281557",
  11155111: "0x3bFA4769FB09eefC5a80d6E87c3B9C650f7Ae48E",
  11155420: "0x94cC0AaC535CCDB3C01d6787D6413C739ae12bc4",
  999999999: "0x6B36d761981d82B1e07cF3c4daF4cB4615c4850a"
};
var uniswapV3SwapRouterConfig = {
  address: uniswapV3SwapRouterAddress,
  abi: uniswapV3SwapRouterABI
};
var upgradeGateABI = [
  { type: "constructor", inputs: [], stateMutability: "nonpayable" },
  {
    type: "function",
    inputs: [],
    name: "acceptOwnership",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [],
    name: "cancelOwnershipTransfer",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [],
    name: "contractName",
    outputs: [{ name: "", internalType: "string", type: "string" }],
    stateMutability: "pure"
  },
  {
    type: "function",
    inputs: [],
    name: "contractURI",
    outputs: [{ name: "", internalType: "string", type: "string" }],
    stateMutability: "pure"
  },
  {
    type: "function",
    inputs: [
      { name: "_initialOwner", internalType: "address", type: "address" }
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [
      { name: "", internalType: "address", type: "address" },
      { name: "", internalType: "address", type: "address" }
    ],
    name: "isAllowedUpgrade",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [
      { name: "baseImpl", internalType: "address", type: "address" },
      { name: "upgradeImpl", internalType: "address", type: "address" }
    ],
    name: "isRegisteredUpgradePath",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "owner",
    outputs: [{ name: "", internalType: "address", type: "address" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "pendingOwner",
    outputs: [{ name: "", internalType: "address", type: "address" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [
      { name: "baseImpls", internalType: "address[]", type: "address[]" },
      { name: "upgradeImpl", internalType: "address", type: "address" }
    ],
    name: "registerUpgradePath",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [
      { name: "baseImpl", internalType: "address", type: "address" },
      { name: "upgradeImpl", internalType: "address", type: "address" }
    ],
    name: "removeUpgradePath",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [],
    name: "resignOwnership",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [{ name: "_newOwner", internalType: "address", type: "address" }],
    name: "safeTransferOwnership",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [{ name: "_newOwner", internalType: "address", type: "address" }],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "version", internalType: "uint8", type: "uint8", indexed: false }
    ],
    name: "Initialized"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "owner",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "canceledOwner",
        internalType: "address",
        type: "address",
        indexed: true
      }
    ],
    name: "OwnerCanceled"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "owner",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "pendingOwner",
        internalType: "address",
        type: "address",
        indexed: true
      }
    ],
    name: "OwnerPending"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "prevOwner",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "newOwner",
        internalType: "address",
        type: "address",
        indexed: true
      }
    ],
    name: "OwnerUpdated"
  },
  { type: "event", anonymous: false, inputs: [], name: "UpgradeGateSetup" },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "baseImpl",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "upgradeImpl",
        internalType: "address",
        type: "address",
        indexed: true
      }
    ],
    name: "UpgradeRegistered"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "baseImpl",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "upgradeImpl",
        internalType: "address",
        type: "address",
        indexed: true
      }
    ],
    name: "UpgradeRemoved"
  },
  {
    type: "error",
    inputs: [],
    name: "INITIALIZABLE_CONTRACT_ALREADY_INITIALIZED"
  },
  {
    type: "error",
    inputs: [],
    name: "INITIALIZABLE_CONTRACT_IS_NOT_INITIALIZING"
  },
  { type: "error", inputs: [], name: "ONLY_OWNER" },
  { type: "error", inputs: [], name: "ONLY_PENDING_OWNER" },
  { type: "error", inputs: [], name: "OWNER_CANNOT_BE_ZERO_ADDRESS" }
];
var upgradeGateAddress = {
  1: "0xbC50029836A59A4E5e1Bb8988272F46ebA0F9900",
  10: "0xbC50029836A59A4E5e1Bb8988272F46ebA0F9900",
  8453: "0xbC50029836A59A4E5e1Bb8988272F46ebA0F9900",
  42161: "0xbC50029836A59A4E5e1Bb8988272F46ebA0F9900",
  81457: "0xbC50029836A59A4E5e1Bb8988272F46ebA0F9900",
  84532: "0xbC50029836A59A4E5e1Bb8988272F46ebA0F9900",
  421614: "0xbC50029836A59A4E5e1Bb8988272F46ebA0F9900",
  7777777: "0xbC50029836A59A4E5e1Bb8988272F46ebA0F9900",
  11155111: "0xbC50029836A59A4E5e1Bb8988272F46ebA0F9900",
  168587773: "0xbC50029836A59A4E5e1Bb8988272F46ebA0F9900"
};
var upgradeGateConfig = {
  address: upgradeGateAddress,
  abi: upgradeGateABI
};
var wethABI = [
  {
    type: "function",
    inputs: [
      { name: "guy", internalType: "address", type: "address" },
      { name: "wad", internalType: "uint256", type: "uint256" }
    ],
    name: "approve",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [{ name: "guy", internalType: "address", type: "address" }],
    name: "balanceOf",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "deposit",
    outputs: [],
    stateMutability: "payable"
  },
  {
    type: "function",
    inputs: [
      { name: "dst", internalType: "address", type: "address" },
      { name: "wad", internalType: "uint256", type: "uint256" }
    ],
    name: "transfer",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [
      { name: "src", internalType: "address", type: "address" },
      { name: "dst", internalType: "address", type: "address" },
      { name: "wad", internalType: "uint256", type: "uint256" }
    ],
    name: "transferFrom",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [{ name: "wad", internalType: "uint256", type: "uint256" }],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable"
  }
];
var wethAddress = {
  1: "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",
  10: "0x4200000000000000000000000000000000000006",
  8453: "0x4200000000000000000000000000000000000006",
  42161: "0x82aF49447D8a07e3bd95BD0d56f35241523fBab1",
  81457: "0x4300000000000000000000000000000000000004",
  84532: "0x4200000000000000000000000000000000000006",
  421614: "0xc556bAe1e86B2aE9c22eA5E036b07E55E7596074",
  7777777: "0x4200000000000000000000000000000000000006",
  11155111: "0x7b79995e5f793A07Bc00c21412e50Ecae098E7f9",
  11155420: "0x4200000000000000000000000000000000000006",
  999999999: "0x4200000000000000000000000000000000000006"
};
var wethConfig = { address: wethAddress, abi: wethABI };
var zoraAccountManagerABI = [
  { type: "constructor", inputs: [], stateMutability: "nonpayable" },
  {
    type: "function",
    inputs: [],
    name: "UPGRADE_INTERFACE_VERSION",
    outputs: [{ name: "", internalType: "string", type: "string" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [
      { name: "encodedOwners", internalType: "bytes[]", type: "bytes[]" },
      { name: "nonce", internalType: "uint256", type: "uint256" }
    ],
    name: "createSmartWallet",
    outputs: [{ name: "", internalType: "address", type: "address" }],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [],
    name: "entryPoint",
    outputs: [
      { name: "", internalType: "contract IEntryPoint", type: "address" }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [
      { name: "encodedOwners", internalType: "bytes[]", type: "bytes[]" },
      { name: "nonce", internalType: "uint256", type: "uint256" }
    ],
    name: "getAddress",
    outputs: [{ name: "", internalType: "address", type: "address" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [
      { name: "smartWallet", internalType: "address", type: "address" },
      { name: "key", internalType: "uint192", type: "uint192" }
    ],
    name: "getKeyNonce",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [{ name: "smartWallet", internalType: "address", type: "address" }],
    name: "getNonce",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "implementation",
    outputs: [{ name: "", internalType: "address", type: "address" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [
      { name: "initialOwner", internalType: "address", type: "address" }
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [],
    name: "owner",
    outputs: [{ name: "", internalType: "address", type: "address" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "proxiableUUID",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [],
    name: "smartWalletFactory",
    outputs: [
      {
        name: "",
        internalType: "contract ICoinbaseSmartWalletFactory",
        type: "address"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [{ name: "newOwner", internalType: "address", type: "address" }],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [
      { name: "newImplementation", internalType: "address", type: "address" },
      { name: "data", internalType: "bytes", type: "bytes" }
    ],
    name: "upgradeToAndCall",
    outputs: [],
    stateMutability: "payable"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "version",
        internalType: "uint64",
        type: "uint64",
        indexed: false
      }
    ],
    name: "Initialized"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "previousOwner",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "newOwner",
        internalType: "address",
        type: "address",
        indexed: true
      }
    ],
    name: "OwnershipTransferred"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "implementation",
        internalType: "address",
        type: "address",
        indexed: true
      }
    ],
    name: "Upgraded"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "smartWallet",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "baseOwner",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "owners",
        internalType: "address[]",
        type: "address[]",
        indexed: false
      },
      {
        name: "nonce",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      }
    ],
    name: "ZoraSmartWalletCreated"
  },
  {
    type: "error",
    inputs: [{ name: "target", internalType: "address", type: "address" }],
    name: "AddressEmptyCode"
  },
  {
    type: "error",
    inputs: [
      { name: "implementation", internalType: "address", type: "address" }
    ],
    name: "ERC1967InvalidImplementation"
  },
  { type: "error", inputs: [], name: "ERC1967NonPayable" },
  { type: "error", inputs: [], name: "FailedInnerCall" },
  { type: "error", inputs: [], name: "InvalidInitialization" },
  { type: "error", inputs: [], name: "NotInitializing" },
  {
    type: "error",
    inputs: [{ name: "owner", internalType: "address", type: "address" }],
    name: "OwnableInvalidOwner"
  },
  {
    type: "error",
    inputs: [{ name: "account", internalType: "address", type: "address" }],
    name: "OwnableUnauthorizedAccount"
  },
  { type: "error", inputs: [], name: "UUPSUnauthorizedCallContext" },
  {
    type: "error",
    inputs: [{ name: "slot", internalType: "bytes32", type: "bytes32" }],
    name: "UUPSUnsupportedProxiableUUID"
  }
];
var zoraAccountManagerAddress = {
  8453: "0x0Ba958A449701907302e28F5955fa9d16dDC45c3",
  7777777: "0x7777777f7bA9ce74A5d7f058B30Ac824d940fB52"
};
var zoraAccountManagerConfig = {
  address: zoraAccountManagerAddress,
  abi: zoraAccountManagerABI
};
var zoraCreator1155FactoryImplABI = [
  {
    type: "constructor",
    inputs: [
      {
        name: "_zora1155Impl",
        internalType: "contract IZoraCreator1155",
        type: "address"
      },
      {
        name: "_merkleMinter",
        internalType: "contract IMinter1155",
        type: "address"
      },
      {
        name: "_fixedPriceMinter",
        internalType: "contract IMinter1155",
        type: "address"
      },
      {
        name: "_redeemMinterFactory",
        internalType: "contract IMinter1155",
        type: "address"
      }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [],
    name: "acceptOwnership",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [],
    name: "cancelOwnershipTransfer",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [],
    name: "contractName",
    outputs: [{ name: "", internalType: "string", type: "string" }],
    stateMutability: "pure"
  },
  {
    type: "function",
    inputs: [],
    name: "contractURI",
    outputs: [{ name: "", internalType: "string", type: "string" }],
    stateMutability: "pure"
  },
  {
    type: "function",
    inputs: [],
    name: "contractVersion",
    outputs: [{ name: "", internalType: "string", type: "string" }],
    stateMutability: "pure"
  },
  {
    type: "function",
    inputs: [
      { name: "newContractURI", internalType: "string", type: "string" },
      { name: "name", internalType: "string", type: "string" },
      {
        name: "defaultRoyaltyConfiguration",
        internalType: "struct ICreatorRoyaltiesControl.RoyaltyConfiguration",
        type: "tuple",
        components: [
          {
            name: "royaltyMintSchedule",
            internalType: "uint32",
            type: "uint32"
          },
          { name: "royaltyBPS", internalType: "uint32", type: "uint32" },
          {
            name: "royaltyRecipient",
            internalType: "address",
            type: "address"
          }
        ]
      },
      {
        name: "defaultAdmin",
        internalType: "address payable",
        type: "address"
      },
      { name: "setupActions", internalType: "bytes[]", type: "bytes[]" }
    ],
    name: "createContract",
    outputs: [{ name: "", internalType: "address", type: "address" }],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [
      { name: "newContractURI", internalType: "string", type: "string" },
      { name: "name", internalType: "string", type: "string" },
      {
        name: "defaultRoyaltyConfiguration",
        internalType: "struct ICreatorRoyaltiesControl.RoyaltyConfiguration",
        type: "tuple",
        components: [
          {
            name: "royaltyMintSchedule",
            internalType: "uint32",
            type: "uint32"
          },
          { name: "royaltyBPS", internalType: "uint32", type: "uint32" },
          {
            name: "royaltyRecipient",
            internalType: "address",
            type: "address"
          }
        ]
      },
      {
        name: "defaultAdmin",
        internalType: "address payable",
        type: "address"
      },
      { name: "setupActions", internalType: "bytes[]", type: "bytes[]" }
    ],
    name: "createContractDeterministic",
    outputs: [{ name: "", internalType: "address", type: "address" }],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [],
    name: "defaultMinters",
    outputs: [
      {
        name: "minters",
        internalType: "contract IMinter1155[]",
        type: "address[]"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [
      { name: "msgSender", internalType: "address", type: "address" },
      { name: "newContractURI", internalType: "string", type: "string" },
      { name: "name", internalType: "string", type: "string" },
      { name: "contractAdmin", internalType: "address", type: "address" }
    ],
    name: "deterministicContractAddress",
    outputs: [{ name: "", internalType: "address", type: "address" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [
      { name: "msgSender", internalType: "address", type: "address" },
      { name: "newContractURI", internalType: "string", type: "string" },
      { name: "name", internalType: "string", type: "string" },
      { name: "contractAdmin", internalType: "address", type: "address" },
      { name: "setupActions", internalType: "bytes[]", type: "bytes[]" }
    ],
    name: "deterministicContractAddressWithSetupActions",
    outputs: [{ name: "", internalType: "address", type: "address" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "fixedPriceMinter",
    outputs: [
      { name: "", internalType: "contract IMinter1155", type: "address" }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [
      {
        name: "expectedContractAddress",
        internalType: "address",
        type: "address"
      },
      { name: "newContractURI", internalType: "string", type: "string" },
      { name: "name", internalType: "string", type: "string" },
      {
        name: "defaultRoyaltyConfiguration",
        internalType: "struct ICreatorRoyaltiesControl.RoyaltyConfiguration",
        type: "tuple",
        components: [
          {
            name: "royaltyMintSchedule",
            internalType: "uint32",
            type: "uint32"
          },
          { name: "royaltyBPS", internalType: "uint32", type: "uint32" },
          {
            name: "royaltyRecipient",
            internalType: "address",
            type: "address"
          }
        ]
      },
      {
        name: "defaultAdmin",
        internalType: "address payable",
        type: "address"
      },
      { name: "setupActions", internalType: "bytes[]", type: "bytes[]" }
    ],
    name: "getOrCreateContractDeterministic",
    outputs: [
      {
        name: "calculatedContractAddress",
        internalType: "address",
        type: "address"
      }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [],
    name: "implementation",
    outputs: [{ name: "", internalType: "address", type: "address" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [
      { name: "_initialOwner", internalType: "address", type: "address" }
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [],
    name: "merkleMinter",
    outputs: [
      { name: "", internalType: "contract IMinter1155", type: "address" }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "owner",
    outputs: [{ name: "", internalType: "address", type: "address" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "pendingOwner",
    outputs: [{ name: "", internalType: "address", type: "address" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "proxiableUUID",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "redeemMinterFactory",
    outputs: [
      { name: "", internalType: "contract IMinter1155", type: "address" }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "resignOwnership",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [{ name: "_newOwner", internalType: "address", type: "address" }],
    name: "safeTransferOwnership",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [{ name: "_newOwner", internalType: "address", type: "address" }],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [
      { name: "newImplementation", internalType: "address", type: "address" }
    ],
    name: "upgradeTo",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [
      { name: "newImplementation", internalType: "address", type: "address" },
      { name: "data", internalType: "bytes", type: "bytes" }
    ],
    name: "upgradeToAndCall",
    outputs: [],
    stateMutability: "payable"
  },
  {
    type: "function",
    inputs: [],
    name: "zora1155Impl",
    outputs: [
      { name: "", internalType: "contract IZoraCreator1155", type: "address" }
    ],
    stateMutability: "view"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "previousAdmin",
        internalType: "address",
        type: "address",
        indexed: false
      },
      {
        name: "newAdmin",
        internalType: "address",
        type: "address",
        indexed: false
      }
    ],
    name: "AdminChanged"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "beacon",
        internalType: "address",
        type: "address",
        indexed: true
      }
    ],
    name: "BeaconUpgraded"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "calculatedContractAddress",
        internalType: "address",
        type: "address",
        indexed: false
      }
    ],
    name: "ContractAlreadyExistsSkippingDeploy"
  },
  { type: "event", anonymous: false, inputs: [], name: "FactorySetup" },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "version", internalType: "uint8", type: "uint8", indexed: false }
    ],
    name: "Initialized"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "owner",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "canceledOwner",
        internalType: "address",
        type: "address",
        indexed: true
      }
    ],
    name: "OwnerCanceled"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "owner",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "pendingOwner",
        internalType: "address",
        type: "address",
        indexed: true
      }
    ],
    name: "OwnerPending"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "prevOwner",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "newOwner",
        internalType: "address",
        type: "address",
        indexed: true
      }
    ],
    name: "OwnerUpdated"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "newContract",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "creator",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "defaultAdmin",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "contractURI",
        internalType: "string",
        type: "string",
        indexed: false
      },
      { name: "name", internalType: "string", type: "string", indexed: false },
      {
        name: "defaultRoyaltyConfiguration",
        internalType: "struct ICreatorRoyaltiesControl.RoyaltyConfiguration",
        type: "tuple",
        components: [
          {
            name: "royaltyMintSchedule",
            internalType: "uint32",
            type: "uint32"
          },
          { name: "royaltyBPS", internalType: "uint32", type: "uint32" },
          {
            name: "royaltyRecipient",
            internalType: "address",
            type: "address"
          }
        ],
        indexed: false
      }
    ],
    name: "SetupNewContract"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "implementation",
        internalType: "address",
        type: "address",
        indexed: true
      }
    ],
    name: "Upgraded"
  },
  { type: "error", inputs: [], name: "ADDRESS_DELEGATECALL_TO_NON_CONTRACT" },
  { type: "error", inputs: [], name: "ADDRESS_LOW_LEVEL_CALL_FAILED" },
  { type: "error", inputs: [], name: "Constructor_ImplCannotBeZero" },
  { type: "error", inputs: [], name: "ERC1967_NEW_IMPL_NOT_CONTRACT" },
  { type: "error", inputs: [], name: "ERC1967_NEW_IMPL_NOT_UUPS" },
  { type: "error", inputs: [], name: "ERC1967_UNSUPPORTED_PROXIABLEUUID" },
  {
    type: "error",
    inputs: [
      {
        name: "expectedContractAddress",
        internalType: "address",
        type: "address"
      },
      {
        name: "calculcatedContractAddress",
        internalType: "address",
        type: "address"
      }
    ],
    name: "ExpectedContractAddressDoesNotMatchCalculatedContractAddress"
  },
  {
    type: "error",
    inputs: [],
    name: "FUNCTION_MUST_BE_CALLED_THROUGH_ACTIVE_PROXY"
  },
  {
    type: "error",
    inputs: [],
    name: "FUNCTION_MUST_BE_CALLED_THROUGH_DELEGATECALL"
  },
  {
    type: "error",
    inputs: [],
    name: "INITIALIZABLE_CONTRACT_ALREADY_INITIALIZED"
  },
  {
    type: "error",
    inputs: [],
    name: "INITIALIZABLE_CONTRACT_IS_NOT_INITIALIZING"
  },
  { type: "error", inputs: [], name: "ONLY_OWNER" },
  { type: "error", inputs: [], name: "ONLY_PENDING_OWNER" },
  { type: "error", inputs: [], name: "OWNER_CANNOT_BE_ZERO_ADDRESS" },
  {
    type: "error",
    inputs: [],
    name: "UUPS_UPGRADEABLE_MUST_NOT_BE_CALLED_THROUGH_DELEGATECALL"
  },
  {
    type: "error",
    inputs: [
      { name: "expected", internalType: "string", type: "string" },
      { name: "actual", internalType: "string", type: "string" }
    ],
    name: "UpgradeToMismatchedContractName"
  },
  { type: "error", inputs: [], name: "ADDRESS_DELEGATECALL_TO_NON_CONTRACT" },
  { type: "error", inputs: [], name: "ADDRESS_LOW_LEVEL_CALL_FAILED" },
  {
    type: "error",
    inputs: [
      { name: "operator", internalType: "address", type: "address" },
      { name: "user", internalType: "address", type: "address" }
    ],
    name: "Burn_NotOwnerOrApproved"
  },
  { type: "error", inputs: [], name: "CREATOR_FUNDS_RECIPIENT_NOT_SET" },
  {
    type: "error",
    inputs: [{ name: "reason", internalType: "bytes", type: "bytes" }],
    name: "CallFailed"
  },
  { type: "error", inputs: [], name: "Call_TokenIdMismatch" },
  { type: "error", inputs: [], name: "CallerNotZoraCreator1155" },
  { type: "error", inputs: [], name: "CanOnlyReduceMaxSupply" },
  {
    type: "error",
    inputs: [
      { name: "tokenId", internalType: "uint256", type: "uint256" },
      { name: "quantity", internalType: "uint256", type: "uint256" },
      { name: "totalMinted", internalType: "uint256", type: "uint256" },
      { name: "maxSupply", internalType: "uint256", type: "uint256" }
    ],
    name: "CannotMintMoreTokens"
  },
  { type: "error", inputs: [], name: "CannotReduceMaxSupplyBelowMinted" },
  {
    type: "error",
    inputs: [
      { name: "proposedAddress", internalType: "address", type: "address" }
    ],
    name: "Config_TransferHookNotSupported"
  },
  {
    type: "error",
    inputs: [],
    name: "ERC1155_ACCOUNTS_AND_IDS_LENGTH_MISMATCH"
  },
  {
    type: "error",
    inputs: [],
    name: "ERC1155_ADDRESS_ZERO_IS_NOT_A_VALID_OWNER"
  },
  { type: "error", inputs: [], name: "ERC1155_BURN_AMOUNT_EXCEEDS_BALANCE" },
  { type: "error", inputs: [], name: "ERC1155_BURN_FROM_ZERO_ADDRESS" },
  {
    type: "error",
    inputs: [],
    name: "ERC1155_CALLER_IS_NOT_TOKEN_OWNER_OR_APPROVED"
  },
  {
    type: "error",
    inputs: [],
    name: "ERC1155_ERC1155RECEIVER_REJECTED_TOKENS"
  },
  {
    type: "error",
    inputs: [],
    name: "ERC1155_IDS_AND_AMOUNTS_LENGTH_MISMATCH"
  },
  {
    type: "error",
    inputs: [],
    name: "ERC1155_INSUFFICIENT_BALANCE_FOR_TRANSFER"
  },
  { type: "error", inputs: [], name: "ERC1155_MINT_TO_ZERO_ADDRESS" },
  { type: "error", inputs: [], name: "ERC1155_MINT_TO_ZERO_ADDRESS" },
  { type: "error", inputs: [], name: "ERC1155_SETTING_APPROVAL_FOR_SELF" },
  {
    type: "error",
    inputs: [],
    name: "ERC1155_TRANSFER_TO_NON_ERC1155RECEIVER_IMPLEMENTER"
  },
  { type: "error", inputs: [], name: "ERC1155_TRANSFER_TO_ZERO_ADDRESS" },
  { type: "error", inputs: [], name: "ERC1967_NEW_IMPL_NOT_CONTRACT" },
  { type: "error", inputs: [], name: "ERC1967_NEW_IMPL_NOT_UUPS" },
  { type: "error", inputs: [], name: "ERC1967_UNSUPPORTED_PROXIABLEUUID" },
  {
    type: "error",
    inputs: [
      { name: "recipient", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" }
    ],
    name: "ETHWithdrawFailed"
  },
  {
    type: "error",
    inputs: [],
    name: "FUNCTION_MUST_BE_CALLED_THROUGH_ACTIVE_PROXY"
  },
  {
    type: "error",
    inputs: [],
    name: "FUNCTION_MUST_BE_CALLED_THROUGH_DELEGATECALL"
  },
  { type: "error", inputs: [], name: "FirstMinterAddressZero" },
  {
    type: "error",
    inputs: [
      { name: "amount", internalType: "uint256", type: "uint256" },
      { name: "contractValue", internalType: "uint256", type: "uint256" }
    ],
    name: "FundsWithdrawInsolvent"
  },
  {
    type: "error",
    inputs: [],
    name: "INITIALIZABLE_CONTRACT_ALREADY_INITIALIZED"
  },
  {
    type: "error",
    inputs: [],
    name: "INITIALIZABLE_CONTRACT_IS_NOT_INITIALIZING"
  },
  { type: "error", inputs: [], name: "INVALID_ADDRESS_ZERO" },
  { type: "error", inputs: [], name: "INVALID_ETH_AMOUNT" },
  {
    type: "error",
    inputs: [
      { name: "mintTo", internalType: "address", type: "address" },
      { name: "merkleProof", internalType: "bytes32[]", type: "bytes32[]" },
      { name: "merkleRoot", internalType: "bytes32", type: "bytes32" }
    ],
    name: "InvalidMerkleProof"
  },
  { type: "error", inputs: [], name: "InvalidMintSchedule" },
  { type: "error", inputs: [], name: "InvalidMintSchedule" },
  { type: "error", inputs: [], name: "InvalidPremintVersion" },
  { type: "error", inputs: [], name: "InvalidSignature" },
  { type: "error", inputs: [], name: "InvalidSignatureVersion" },
  {
    type: "error",
    inputs: [{ name: "magicValue", internalType: "bytes4", type: "bytes4" }],
    name: "InvalidSigner"
  },
  { type: "error", inputs: [], name: "MintNotYetStarted" },
  { type: "error", inputs: [], name: "Mint_InsolventSaleTransfer" },
  { type: "error", inputs: [], name: "Mint_InvalidMintArrayLength" },
  { type: "error", inputs: [], name: "Mint_TokenIDMintNotAllowed" },
  { type: "error", inputs: [], name: "Mint_UnknownCommand" },
  { type: "error", inputs: [], name: "Mint_ValueTransferFail" },
  { type: "error", inputs: [], name: "MinterContractAlreadyExists" },
  { type: "error", inputs: [], name: "MinterContractDoesNotExist" },
  { type: "error", inputs: [], name: "NewOwnerNeedsToBeAdmin" },
  {
    type: "error",
    inputs: [{ name: "tokenId", internalType: "uint256", type: "uint256" }],
    name: "NoRendererForToken"
  },
  { type: "error", inputs: [], name: "NonEthRedemption" },
  { type: "error", inputs: [], name: "ONLY_CREATE_REFERRAL" },
  { type: "error", inputs: [], name: "OnlyAllowedForRegisteredMinter" },
  { type: "error", inputs: [], name: "OnlyAllowedForTimedSaleStrategy" },
  { type: "error", inputs: [], name: "OnlyTransfersFromZoraMints" },
  { type: "error", inputs: [], name: "PremintDeleted" },
  {
    type: "error",
    inputs: [
      { name: "caller", internalType: "address", type: "address" },
      { name: "recipient", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" }
    ],
    name: "ProtocolRewardsWithdrawFailed"
  },
  {
    type: "error",
    inputs: [{ name: "renderer", internalType: "address", type: "address" }],
    name: "RendererNotValid"
  },
  { type: "error", inputs: [], name: "Renderer_NotValidRendererContract" },
  { type: "error", inputs: [], name: "SaleEnded" },
  { type: "error", inputs: [], name: "SaleHasNotStarted" },
  {
    type: "error",
    inputs: [
      { name: "targetContract", internalType: "address", type: "address" }
    ],
    name: "Sale_CannotCallNonSalesContract"
  },
  {
    type: "error",
    inputs: [
      { name: "expected", internalType: "uint256", type: "uint256" },
      { name: "actual", internalType: "uint256", type: "uint256" }
    ],
    name: "TokenIdMismatch"
  },
  {
    type: "error",
    inputs: [],
    name: "UUPS_UPGRADEABLE_MUST_NOT_BE_CALLED_THROUGH_DELEGATECALL"
  },
  {
    type: "error",
    inputs: [
      { name: "user", internalType: "address", type: "address" },
      { name: "limit", internalType: "uint256", type: "uint256" },
      { name: "requestedAmount", internalType: "uint256", type: "uint256" }
    ],
    name: "UserExceedsMintLimit"
  },
  {
    type: "error",
    inputs: [
      { name: "user", internalType: "address", type: "address" },
      { name: "tokenId", internalType: "uint256", type: "uint256" },
      { name: "role", internalType: "uint256", type: "uint256" }
    ],
    name: "UserMissingRoleForToken"
  },
  { type: "error", inputs: [], name: "WrongValueSent" },
  {
    type: "error",
    inputs: [],
    name: "premintSignerContractFailedToRecoverSigner"
  },
  { type: "error", inputs: [], name: "premintSignerContractNotAContract" },
  {
    type: "error",
    inputs: [{ name: "target", internalType: "address", type: "address" }],
    name: "AddressEmptyCode"
  },
  {
    type: "error",
    inputs: [{ name: "account", internalType: "address", type: "address" }],
    name: "AddressInsufficientBalance"
  },
  { type: "error", inputs: [], name: "AddressZero" },
  { type: "error", inputs: [], name: "ERC1167FailedCreateClone" },
  {
    type: "error",
    inputs: [
      { name: "implementation", internalType: "address", type: "address" }
    ],
    name: "ERC1967InvalidImplementation"
  },
  { type: "error", inputs: [], name: "ERC1967NonPayable" },
  { type: "error", inputs: [], name: "EndTimeCannotBeInThePast" },
  { type: "error", inputs: [], name: "FailedInnerCall" },
  { type: "error", inputs: [], name: "InsufficientFunds" },
  { type: "error", inputs: [], name: "InvalidInitialization" },
  { type: "error", inputs: [], name: "MarketAlreadyLaunched" },
  { type: "error", inputs: [], name: "MarketMinimumNotReached" },
  { type: "error", inputs: [], name: "MinimumMarketEthNotMet" },
  { type: "error", inputs: [], name: "NeedsToBeAtLeastOneSaleToStartMarket" },
  { type: "error", inputs: [], name: "NotInitializing" },
  { type: "error", inputs: [], name: "OnlyZoraRewardRecipient" },
  {
    type: "error",
    inputs: [{ name: "owner", internalType: "address", type: "address" }],
    name: "OwnableInvalidOwner"
  },
  {
    type: "error",
    inputs: [{ name: "account", internalType: "address", type: "address" }],
    name: "OwnableUnauthorizedAccount"
  },
  { type: "error", inputs: [], name: "ReentrancyGuardReentrantCall" },
  { type: "error", inputs: [], name: "RequestMintInvalidUseMint" },
  { type: "error", inputs: [], name: "ResetSaleNotAvailable" },
  { type: "error", inputs: [], name: "SaleAlreadySet" },
  { type: "error", inputs: [], name: "SaleEnded" },
  { type: "error", inputs: [], name: "SaleHasNotStarted" },
  { type: "error", inputs: [], name: "SaleInProgress" },
  { type: "error", inputs: [], name: "SaleNotSet" },
  { type: "error", inputs: [], name: "SaleV2AlreadyStarted" },
  { type: "error", inputs: [], name: "SaleV2Ended" },
  { type: "error", inputs: [], name: "SaleV2NotSet" },
  { type: "error", inputs: [], name: "StartTimeCannotBeAfterEndTime" },
  { type: "error", inputs: [], name: "UUPSUnauthorizedCallContext" },
  {
    type: "error",
    inputs: [{ name: "slot", internalType: "bytes32", type: "bytes32" }],
    name: "UUPSUnsupportedProxiableUUID"
  },
  { type: "error", inputs: [], name: "WrongValueSent" },
  {
    type: "error",
    inputs: [],
    name: "ZoraCreator1155ContractNeedsToSupportReduceSupply"
  }
];
var zoraCreator1155FactoryImplAddress = {
  1: "0x777777C338d93e2C7adf08D102d45CA7CC4Ed021",
  10: "0x777777C338d93e2C7adf08D102d45CA7CC4Ed021",
  999: "0x777777C338d93e2C7adf08D102d45CA7CC4Ed021",
  8453: "0x777777C338d93e2C7adf08D102d45CA7CC4Ed021",
  42161: "0x777777C338d93e2C7adf08D102d45CA7CC4Ed021",
  81457: "0x777777C338d93e2C7adf08D102d45CA7CC4Ed021",
  84532: "0x777777C338d93e2C7adf08D102d45CA7CC4Ed021",
  421614: "0x777777C338d93e2C7adf08D102d45CA7CC4Ed021",
  7777777: "0x777777C338d93e2C7adf08D102d45CA7CC4Ed021",
  11155111: "0x777777C338d93e2C7adf08D102d45CA7CC4Ed021",
  168587773: "0x777777C338d93e2C7adf08D102d45CA7CC4Ed021",
  999999999: "0x777777C338d93e2C7adf08D102d45CA7CC4Ed021"
};
var zoraCreator1155FactoryImplConfig = {
  address: zoraCreator1155FactoryImplAddress,
  abi: zoraCreator1155FactoryImplABI
};
var zoraCreator1155ImplABI = [
  {
    type: "constructor",
    inputs: [
      { name: "_mintFeeRecipient", internalType: "address", type: "address" },
      { name: "_upgradeGate", internalType: "address", type: "address" },
      { name: "_protocolRewards", internalType: "address", type: "address" },
      { name: "_timedSaleStrategy", internalType: "address", type: "address" }
    ],
    stateMutability: "nonpayable"
  },
  { type: "receive", stateMutability: "payable" },
  {
    type: "function",
    inputs: [],
    name: "CONTRACT_BASE_ID",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "PERMISSION_BIT_ADMIN",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "PERMISSION_BIT_FUNDS_MANAGER",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "PERMISSION_BIT_METADATA",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "PERMISSION_BIT_MINTER",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "PERMISSION_BIT_SALES",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [
      { name: "tokenId", internalType: "uint256", type: "uint256" },
      { name: "user", internalType: "address", type: "address" },
      { name: "permissionBits", internalType: "uint256", type: "uint256" }
    ],
    name: "addPermission",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [
      { name: "recipient", internalType: "address", type: "address" },
      { name: "tokenId", internalType: "uint256", type: "uint256" },
      { name: "quantity", internalType: "uint256", type: "uint256" },
      { name: "data", internalType: "bytes", type: "bytes" }
    ],
    name: "adminMint",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [{ name: "lastTokenId", internalType: "uint256", type: "uint256" }],
    name: "assumeLastTokenIdMatches",
    outputs: [],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [
      { name: "account", internalType: "address", type: "address" },
      { name: "id", internalType: "uint256", type: "uint256" }
    ],
    name: "balanceOf",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [
      { name: "accounts", internalType: "address[]", type: "address[]" },
      { name: "ids", internalType: "uint256[]", type: "uint256[]" }
    ],
    name: "balanceOfBatch",
    outputs: [
      { name: "batchBalances", internalType: "uint256[]", type: "uint256[]" }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [
      { name: "from", internalType: "address", type: "address" },
      { name: "tokenIds", internalType: "uint256[]", type: "uint256[]" },
      { name: "amounts", internalType: "uint256[]", type: "uint256[]" }
    ],
    name: "burnBatch",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [
      { name: "tokenId", internalType: "uint256", type: "uint256" },
      { name: "data", internalType: "bytes", type: "bytes" }
    ],
    name: "callRenderer",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [
      { name: "tokenId", internalType: "uint256", type: "uint256" },
      {
        name: "salesConfig",
        internalType: "contract IMinter1155",
        type: "address"
      },
      { name: "data", internalType: "bytes", type: "bytes" }
    ],
    name: "callSale",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [
      { name: "mintPrice", internalType: "uint256", type: "uint256" },
      { name: "quantity", internalType: "uint256", type: "uint256" }
    ],
    name: "computeTotalReward",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "pure"
  },
  {
    type: "function",
    inputs: [],
    name: "config",
    outputs: [
      { name: "owner", internalType: "address", type: "address" },
      { name: "__gap1", internalType: "uint96", type: "uint96" },
      {
        name: "fundsRecipient",
        internalType: "address payable",
        type: "address"
      },
      { name: "__gap2", internalType: "uint96", type: "uint96" },
      {
        name: "transferHook",
        internalType: "contract ITransferHookReceiver",
        type: "address"
      },
      { name: "__gap3", internalType: "uint96", type: "uint96" }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "contractName",
    outputs: [{ name: "", internalType: "string", type: "string" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "contractURI",
    outputs: [{ name: "", internalType: "string", type: "string" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "contractVersion",
    outputs: [{ name: "", internalType: "string", type: "string" }],
    stateMutability: "pure"
  },
  {
    type: "function",
    inputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    name: "createReferrals",
    outputs: [{ name: "", internalType: "address", type: "address" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    name: "customRenderers",
    outputs: [
      { name: "", internalType: "contract IRenderer1155", type: "address" }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [
      { name: "premintConfig", internalType: "bytes", type: "bytes" },
      { name: "premintVersion", internalType: "bytes32", type: "bytes32" },
      { name: "signature", internalType: "bytes", type: "bytes" },
      { name: "firstMinter", internalType: "address", type: "address" },
      {
        name: "premintSignerContract",
        internalType: "address",
        type: "address"
      }
    ],
    name: "delegateSetupNewToken",
    outputs: [{ name: "newTokenId", internalType: "uint256", type: "uint256" }],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [{ name: "", internalType: "uint32", type: "uint32" }],
    name: "delegatedTokenId",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    name: "firstMinters",
    outputs: [{ name: "", internalType: "address", type: "address" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [{ name: "tokenId", internalType: "uint256", type: "uint256" }],
    name: "getCreatorRewardRecipient",
    outputs: [{ name: "", internalType: "address", type: "address" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [{ name: "tokenId", internalType: "uint256", type: "uint256" }],
    name: "getCustomRenderer",
    outputs: [
      {
        name: "customRenderer",
        internalType: "contract IRenderer1155",
        type: "address"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [{ name: "tokenId", internalType: "uint256", type: "uint256" }],
    name: "getRoyalties",
    outputs: [
      {
        name: "",
        internalType: "struct ICreatorRoyaltiesControl.RoyaltyConfiguration",
        type: "tuple",
        components: [
          {
            name: "royaltyMintSchedule",
            internalType: "uint32",
            type: "uint32"
          },
          { name: "royaltyBPS", internalType: "uint32", type: "uint32" },
          {
            name: "royaltyRecipient",
            internalType: "address",
            type: "address"
          }
        ]
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [{ name: "tokenId", internalType: "uint256", type: "uint256" }],
    name: "getTokenInfo",
    outputs: [
      {
        name: "",
        internalType: "struct IZoraCreator1155TypesV1.TokenData",
        type: "tuple",
        components: [
          { name: "uri", internalType: "string", type: "string" },
          { name: "maxSupply", internalType: "uint256", type: "uint256" },
          { name: "totalMinted", internalType: "uint256", type: "uint256" }
        ]
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "implementation",
    outputs: [{ name: "", internalType: "address", type: "address" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [
      { name: "contractName", internalType: "string", type: "string" },
      { name: "newContractURI", internalType: "string", type: "string" },
      {
        name: "defaultRoyaltyConfiguration",
        internalType: "struct ICreatorRoyaltiesControl.RoyaltyConfiguration",
        type: "tuple",
        components: [
          {
            name: "royaltyMintSchedule",
            internalType: "uint32",
            type: "uint32"
          },
          { name: "royaltyBPS", internalType: "uint32", type: "uint32" },
          {
            name: "royaltyRecipient",
            internalType: "address",
            type: "address"
          }
        ]
      },
      {
        name: "defaultAdmin",
        internalType: "address payable",
        type: "address"
      },
      { name: "setupActions", internalType: "bytes[]", type: "bytes[]" }
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [
      { name: "user", internalType: "address", type: "address" },
      { name: "tokenId", internalType: "uint256", type: "uint256" },
      { name: "role", internalType: "uint256", type: "uint256" }
    ],
    name: "isAdminOrRole",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [
      { name: "account", internalType: "address", type: "address" },
      { name: "operator", internalType: "address", type: "address" }
    ],
    name: "isApprovedForAll",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    name: "metadataRendererContract",
    outputs: [{ name: "", internalType: "address", type: "address" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [
      { name: "minter", internalType: "contract IMinter1155", type: "address" },
      { name: "tokenId", internalType: "uint256", type: "uint256" },
      { name: "quantity", internalType: "uint256", type: "uint256" },
      {
        name: "rewardsRecipients",
        internalType: "address[]",
        type: "address[]"
      },
      { name: "minterArguments", internalType: "bytes", type: "bytes" }
    ],
    name: "mint",
    outputs: [],
    stateMutability: "payable"
  },
  {
    type: "function",
    inputs: [],
    name: "mintFee",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [{ name: "data", internalType: "bytes[]", type: "bytes[]" }],
    name: "multicall",
    outputs: [{ name: "results", internalType: "bytes[]", type: "bytes[]" }],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [],
    name: "name",
    outputs: [{ name: "", internalType: "string", type: "string" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "nextTokenId",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "owner",
    outputs: [{ name: "", internalType: "address", type: "address" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [
      { name: "", internalType: "uint256", type: "uint256" },
      { name: "", internalType: "address", type: "address" }
    ],
    name: "permissions",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "proxiableUUID",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [
      { name: "tokenId", internalType: "uint256", type: "uint256" },
      { name: "newMaxSupply", internalType: "uint256", type: "uint256" }
    ],
    name: "reduceSupply",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [
      { name: "tokenId", internalType: "uint256", type: "uint256" },
      { name: "user", internalType: "address", type: "address" },
      { name: "permissionBits", internalType: "uint256", type: "uint256" }
    ],
    name: "removePermission",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    name: "royalties",
    outputs: [
      { name: "royaltyMintSchedule", internalType: "uint32", type: "uint32" },
      { name: "royaltyBPS", internalType: "uint32", type: "uint32" },
      { name: "royaltyRecipient", internalType: "address", type: "address" }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [
      { name: "tokenId", internalType: "uint256", type: "uint256" },
      { name: "salePrice", internalType: "uint256", type: "uint256" }
    ],
    name: "royaltyInfo",
    outputs: [
      { name: "receiver", internalType: "address", type: "address" },
      { name: "royaltyAmount", internalType: "uint256", type: "uint256" }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [
      { name: "from", internalType: "address", type: "address" },
      { name: "to", internalType: "address", type: "address" },
      { name: "ids", internalType: "uint256[]", type: "uint256[]" },
      { name: "amounts", internalType: "uint256[]", type: "uint256[]" },
      { name: "data", internalType: "bytes", type: "bytes" }
    ],
    name: "safeBatchTransferFrom",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [
      { name: "from", internalType: "address", type: "address" },
      { name: "to", internalType: "address", type: "address" },
      { name: "id", internalType: "uint256", type: "uint256" },
      { name: "amount", internalType: "uint256", type: "uint256" },
      { name: "data", internalType: "bytes", type: "bytes" }
    ],
    name: "safeTransferFrom",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [
      { name: "operator", internalType: "address", type: "address" },
      { name: "approved", internalType: "bool", type: "bool" }
    ],
    name: "setApprovalForAll",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [
      {
        name: "fundsRecipient",
        internalType: "address payable",
        type: "address"
      }
    ],
    name: "setFundsRecipient",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [{ name: "newOwner", internalType: "address", type: "address" }],
    name: "setOwner",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [
      { name: "tokenId", internalType: "uint256", type: "uint256" },
      {
        name: "renderer",
        internalType: "contract IRenderer1155",
        type: "address"
      }
    ],
    name: "setTokenMetadataRenderer",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [
      {
        name: "transferHook",
        internalType: "contract ITransferHookReceiver",
        type: "address"
      }
    ],
    name: "setTransferHook",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [
      { name: "newURI", internalType: "string", type: "string" },
      { name: "maxSupply", internalType: "uint256", type: "uint256" }
    ],
    name: "setupNewToken",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [
      { name: "newURI", internalType: "string", type: "string" },
      { name: "maxSupply", internalType: "uint256", type: "uint256" },
      { name: "createReferral", internalType: "address", type: "address" }
    ],
    name: "setupNewTokenWithCreateReferral",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [],
    name: "supportedPremintSignatureVersions",
    outputs: [{ name: "", internalType: "string[]", type: "string[]" }],
    stateMutability: "pure"
  },
  {
    type: "function",
    inputs: [{ name: "interfaceId", internalType: "bytes4", type: "bytes4" }],
    name: "supportsInterface",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "symbol",
    outputs: [{ name: "", internalType: "string", type: "string" }],
    stateMutability: "pure"
  },
  {
    type: "function",
    inputs: [
      { name: "_newURI", internalType: "string", type: "string" },
      { name: "_newName", internalType: "string", type: "string" }
    ],
    name: "updateContractMetadata",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [
      { name: "tokenId", internalType: "uint256", type: "uint256" },
      { name: "recipient", internalType: "address", type: "address" }
    ],
    name: "updateCreateReferral",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [
      { name: "tokenId", internalType: "uint256", type: "uint256" },
      {
        name: "newConfiguration",
        internalType: "struct ICreatorRoyaltiesControl.RoyaltyConfiguration",
        type: "tuple",
        components: [
          {
            name: "royaltyMintSchedule",
            internalType: "uint32",
            type: "uint32"
          },
          { name: "royaltyBPS", internalType: "uint32", type: "uint32" },
          {
            name: "royaltyRecipient",
            internalType: "address",
            type: "address"
          }
        ]
      }
    ],
    name: "updateRoyaltiesForToken",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [
      { name: "tokenId", internalType: "uint256", type: "uint256" },
      { name: "_newURI", internalType: "string", type: "string" }
    ],
    name: "updateTokenURI",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [
      { name: "newImplementation", internalType: "address", type: "address" }
    ],
    name: "upgradeTo",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [
      { name: "newImplementation", internalType: "address", type: "address" },
      { name: "data", internalType: "bytes", type: "bytes" }
    ],
    name: "upgradeToAndCall",
    outputs: [],
    stateMutability: "payable"
  },
  {
    type: "function",
    inputs: [{ name: "tokenId", internalType: "uint256", type: "uint256" }],
    name: "uri",
    outputs: [{ name: "", internalType: "string", type: "string" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "previousAdmin",
        internalType: "address",
        type: "address",
        indexed: false
      },
      {
        name: "newAdmin",
        internalType: "address",
        type: "address",
        indexed: false
      }
    ],
    name: "AdminChanged"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "account",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "operator",
        internalType: "address",
        type: "address",
        indexed: true
      },
      { name: "approved", internalType: "bool", type: "bool", indexed: false }
    ],
    name: "ApprovalForAll"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "beacon",
        internalType: "address",
        type: "address",
        indexed: true
      }
    ],
    name: "BeaconUpgraded"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "updater",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "updateType",
        internalType: "enum IZoraCreator1155.ConfigUpdate",
        type: "uint8",
        indexed: true
      },
      {
        name: "newConfig",
        internalType: "struct IZoraCreator1155TypesV1.ContractConfig",
        type: "tuple",
        components: [
          { name: "owner", internalType: "address", type: "address" },
          { name: "__gap1", internalType: "uint96", type: "uint96" },
          {
            name: "fundsRecipient",
            internalType: "address payable",
            type: "address"
          },
          { name: "__gap2", internalType: "uint96", type: "uint96" },
          {
            name: "transferHook",
            internalType: "contract ITransferHookReceiver",
            type: "address"
          },
          { name: "__gap3", internalType: "uint96", type: "uint96" }
        ],
        indexed: false
      }
    ],
    name: "ConfigUpdated"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "updater",
        internalType: "address",
        type: "address",
        indexed: true
      },
      { name: "uri", internalType: "string", type: "string", indexed: false },
      { name: "name", internalType: "string", type: "string", indexed: false }
    ],
    name: "ContractMetadataUpdated"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "renderer",
        internalType: "contract IRenderer1155",
        type: "address",
        indexed: false
      }
    ],
    name: "ContractRendererUpdated"
  },
  { type: "event", anonymous: false, inputs: [], name: "ContractURIUpdated" },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "structHash",
        internalType: "bytes32",
        type: "bytes32",
        indexed: false
      },
      {
        name: "domainName",
        internalType: "string",
        type: "string",
        indexed: false
      },
      {
        name: "version",
        internalType: "string",
        type: "string",
        indexed: false
      },
      {
        name: "creator",
        internalType: "address",
        type: "address",
        indexed: false
      },
      {
        name: "signature",
        internalType: "bytes",
        type: "bytes",
        indexed: false
      }
    ],
    name: "CreatorAttribution"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "version", internalType: "uint8", type: "uint8", indexed: false }
    ],
    name: "Initialized"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "lastOwner",
        internalType: "address",
        type: "address",
        indexed: false
      },
      {
        name: "newOwner",
        internalType: "address",
        type: "address",
        indexed: false
      }
    ],
    name: "OwnershipTransferred"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "sender",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "minter",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "tokenId",
        internalType: "uint256",
        type: "uint256",
        indexed: true
      },
      {
        name: "quantity",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      },
      {
        name: "value",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      }
    ],
    name: "Purchased"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "tokenId",
        internalType: "uint256",
        type: "uint256",
        indexed: true
      },
      {
        name: "renderer",
        internalType: "address",
        type: "address",
        indexed: true
      },
      { name: "user", internalType: "address", type: "address", indexed: true }
    ],
    name: "RendererUpdated"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "tokenId",
        internalType: "uint256",
        type: "uint256",
        indexed: true
      },
      {
        name: "sender",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "newURI",
        internalType: "string",
        type: "string",
        indexed: false
      },
      {
        name: "maxSupply",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      }
    ],
    name: "SetupNewToken"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "operator",
        internalType: "address",
        type: "address",
        indexed: true
      },
      { name: "from", internalType: "address", type: "address", indexed: true },
      { name: "to", internalType: "address", type: "address", indexed: true },
      {
        name: "ids",
        internalType: "uint256[]",
        type: "uint256[]",
        indexed: false
      },
      {
        name: "values",
        internalType: "uint256[]",
        type: "uint256[]",
        indexed: false
      }
    ],
    name: "TransferBatch"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "operator",
        internalType: "address",
        type: "address",
        indexed: true
      },
      { name: "from", internalType: "address", type: "address", indexed: true },
      { name: "to", internalType: "address", type: "address", indexed: true },
      { name: "id", internalType: "uint256", type: "uint256", indexed: false },
      {
        name: "value",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      }
    ],
    name: "TransferSingle"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "value", internalType: "string", type: "string", indexed: false },
      { name: "id", internalType: "uint256", type: "uint256", indexed: true }
    ],
    name: "URI"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "tokenId",
        internalType: "uint256",
        type: "uint256",
        indexed: true
      },
      { name: "user", internalType: "address", type: "address", indexed: true },
      {
        name: "permissions",
        internalType: "uint256",
        type: "uint256",
        indexed: true
      }
    ],
    name: "UpdatedPermissions"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "tokenId",
        internalType: "uint256",
        type: "uint256",
        indexed: true
      },
      { name: "user", internalType: "address", type: "address", indexed: true },
      {
        name: "configuration",
        internalType: "struct ICreatorRoyaltiesControl.RoyaltyConfiguration",
        type: "tuple",
        components: [
          {
            name: "royaltyMintSchedule",
            internalType: "uint32",
            type: "uint32"
          },
          { name: "royaltyBPS", internalType: "uint32", type: "uint32" },
          {
            name: "royaltyRecipient",
            internalType: "address",
            type: "address"
          }
        ],
        indexed: false
      }
    ],
    name: "UpdatedRoyalties"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "from", internalType: "address", type: "address", indexed: true },
      {
        name: "tokenId",
        internalType: "uint256",
        type: "uint256",
        indexed: true
      },
      {
        name: "tokenData",
        internalType: "struct IZoraCreator1155TypesV1.TokenData",
        type: "tuple",
        components: [
          { name: "uri", internalType: "string", type: "string" },
          { name: "maxSupply", internalType: "uint256", type: "uint256" },
          { name: "totalMinted", internalType: "uint256", type: "uint256" }
        ],
        indexed: false
      }
    ],
    name: "UpdatedToken"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "implementation",
        internalType: "address",
        type: "address",
        indexed: true
      }
    ],
    name: "Upgraded"
  },
  { type: "error", inputs: [], name: "ADDRESS_DELEGATECALL_TO_NON_CONTRACT" },
  { type: "error", inputs: [], name: "ADDRESS_LOW_LEVEL_CALL_FAILED" },
  {
    type: "error",
    inputs: [
      { name: "operator", internalType: "address", type: "address" },
      { name: "user", internalType: "address", type: "address" }
    ],
    name: "Burn_NotOwnerOrApproved"
  },
  { type: "error", inputs: [], name: "CREATOR_FUNDS_RECIPIENT_NOT_SET" },
  {
    type: "error",
    inputs: [{ name: "reason", internalType: "bytes", type: "bytes" }],
    name: "CallFailed"
  },
  { type: "error", inputs: [], name: "Call_TokenIdMismatch" },
  { type: "error", inputs: [], name: "CallerNotZoraCreator1155" },
  { type: "error", inputs: [], name: "CanOnlyReduceMaxSupply" },
  {
    type: "error",
    inputs: [
      { name: "tokenId", internalType: "uint256", type: "uint256" },
      { name: "quantity", internalType: "uint256", type: "uint256" },
      { name: "totalMinted", internalType: "uint256", type: "uint256" },
      { name: "maxSupply", internalType: "uint256", type: "uint256" }
    ],
    name: "CannotMintMoreTokens"
  },
  { type: "error", inputs: [], name: "CannotReduceMaxSupplyBelowMinted" },
  {
    type: "error",
    inputs: [
      { name: "proposedAddress", internalType: "address", type: "address" }
    ],
    name: "Config_TransferHookNotSupported"
  },
  {
    type: "error",
    inputs: [],
    name: "ERC1155_ACCOUNTS_AND_IDS_LENGTH_MISMATCH"
  },
  {
    type: "error",
    inputs: [],
    name: "ERC1155_ADDRESS_ZERO_IS_NOT_A_VALID_OWNER"
  },
  { type: "error", inputs: [], name: "ERC1155_BURN_AMOUNT_EXCEEDS_BALANCE" },
  { type: "error", inputs: [], name: "ERC1155_BURN_FROM_ZERO_ADDRESS" },
  {
    type: "error",
    inputs: [],
    name: "ERC1155_CALLER_IS_NOT_TOKEN_OWNER_OR_APPROVED"
  },
  {
    type: "error",
    inputs: [],
    name: "ERC1155_ERC1155RECEIVER_REJECTED_TOKENS"
  },
  {
    type: "error",
    inputs: [],
    name: "ERC1155_IDS_AND_AMOUNTS_LENGTH_MISMATCH"
  },
  {
    type: "error",
    inputs: [],
    name: "ERC1155_INSUFFICIENT_BALANCE_FOR_TRANSFER"
  },
  { type: "error", inputs: [], name: "ERC1155_MINT_TO_ZERO_ADDRESS" },
  { type: "error", inputs: [], name: "ERC1155_MINT_TO_ZERO_ADDRESS" },
  { type: "error", inputs: [], name: "ERC1155_SETTING_APPROVAL_FOR_SELF" },
  {
    type: "error",
    inputs: [],
    name: "ERC1155_TRANSFER_TO_NON_ERC1155RECEIVER_IMPLEMENTER"
  },
  { type: "error", inputs: [], name: "ERC1155_TRANSFER_TO_ZERO_ADDRESS" },
  { type: "error", inputs: [], name: "ERC1967_NEW_IMPL_NOT_CONTRACT" },
  { type: "error", inputs: [], name: "ERC1967_NEW_IMPL_NOT_UUPS" },
  { type: "error", inputs: [], name: "ERC1967_UNSUPPORTED_PROXIABLEUUID" },
  {
    type: "error",
    inputs: [
      { name: "recipient", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" }
    ],
    name: "ETHWithdrawFailed"
  },
  {
    type: "error",
    inputs: [],
    name: "FUNCTION_MUST_BE_CALLED_THROUGH_ACTIVE_PROXY"
  },
  {
    type: "error",
    inputs: [],
    name: "FUNCTION_MUST_BE_CALLED_THROUGH_DELEGATECALL"
  },
  { type: "error", inputs: [], name: "FirstMinterAddressZero" },
  {
    type: "error",
    inputs: [
      { name: "amount", internalType: "uint256", type: "uint256" },
      { name: "contractValue", internalType: "uint256", type: "uint256" }
    ],
    name: "FundsWithdrawInsolvent"
  },
  {
    type: "error",
    inputs: [],
    name: "INITIALIZABLE_CONTRACT_ALREADY_INITIALIZED"
  },
  {
    type: "error",
    inputs: [],
    name: "INITIALIZABLE_CONTRACT_IS_NOT_INITIALIZING"
  },
  { type: "error", inputs: [], name: "INVALID_ADDRESS_ZERO" },
  { type: "error", inputs: [], name: "INVALID_ETH_AMOUNT" },
  {
    type: "error",
    inputs: [
      { name: "mintTo", internalType: "address", type: "address" },
      { name: "merkleProof", internalType: "bytes32[]", type: "bytes32[]" },
      { name: "merkleRoot", internalType: "bytes32", type: "bytes32" }
    ],
    name: "InvalidMerkleProof"
  },
  { type: "error", inputs: [], name: "InvalidMintSchedule" },
  { type: "error", inputs: [], name: "InvalidMintSchedule" },
  { type: "error", inputs: [], name: "InvalidPremintVersion" },
  { type: "error", inputs: [], name: "InvalidSignature" },
  { type: "error", inputs: [], name: "InvalidSignatureVersion" },
  {
    type: "error",
    inputs: [{ name: "magicValue", internalType: "bytes4", type: "bytes4" }],
    name: "InvalidSigner"
  },
  { type: "error", inputs: [], name: "MintNotYetStarted" },
  { type: "error", inputs: [], name: "Mint_InsolventSaleTransfer" },
  { type: "error", inputs: [], name: "Mint_InvalidMintArrayLength" },
  { type: "error", inputs: [], name: "Mint_TokenIDMintNotAllowed" },
  { type: "error", inputs: [], name: "Mint_UnknownCommand" },
  { type: "error", inputs: [], name: "Mint_ValueTransferFail" },
  { type: "error", inputs: [], name: "MinterContractAlreadyExists" },
  { type: "error", inputs: [], name: "MinterContractDoesNotExist" },
  { type: "error", inputs: [], name: "NewOwnerNeedsToBeAdmin" },
  {
    type: "error",
    inputs: [{ name: "tokenId", internalType: "uint256", type: "uint256" }],
    name: "NoRendererForToken"
  },
  { type: "error", inputs: [], name: "NonEthRedemption" },
  { type: "error", inputs: [], name: "ONLY_CREATE_REFERRAL" },
  { type: "error", inputs: [], name: "OnlyAllowedForRegisteredMinter" },
  { type: "error", inputs: [], name: "OnlyAllowedForTimedSaleStrategy" },
  { type: "error", inputs: [], name: "OnlyTransfersFromZoraMints" },
  { type: "error", inputs: [], name: "PremintDeleted" },
  {
    type: "error",
    inputs: [
      { name: "caller", internalType: "address", type: "address" },
      { name: "recipient", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" }
    ],
    name: "ProtocolRewardsWithdrawFailed"
  },
  {
    type: "error",
    inputs: [{ name: "renderer", internalType: "address", type: "address" }],
    name: "RendererNotValid"
  },
  { type: "error", inputs: [], name: "Renderer_NotValidRendererContract" },
  { type: "error", inputs: [], name: "SaleEnded" },
  { type: "error", inputs: [], name: "SaleHasNotStarted" },
  {
    type: "error",
    inputs: [
      { name: "targetContract", internalType: "address", type: "address" }
    ],
    name: "Sale_CannotCallNonSalesContract"
  },
  {
    type: "error",
    inputs: [
      { name: "expected", internalType: "uint256", type: "uint256" },
      { name: "actual", internalType: "uint256", type: "uint256" }
    ],
    name: "TokenIdMismatch"
  },
  {
    type: "error",
    inputs: [],
    name: "UUPS_UPGRADEABLE_MUST_NOT_BE_CALLED_THROUGH_DELEGATECALL"
  },
  {
    type: "error",
    inputs: [
      { name: "user", internalType: "address", type: "address" },
      { name: "limit", internalType: "uint256", type: "uint256" },
      { name: "requestedAmount", internalType: "uint256", type: "uint256" }
    ],
    name: "UserExceedsMintLimit"
  },
  {
    type: "error",
    inputs: [
      { name: "user", internalType: "address", type: "address" },
      { name: "tokenId", internalType: "uint256", type: "uint256" },
      { name: "role", internalType: "uint256", type: "uint256" }
    ],
    name: "UserMissingRoleForToken"
  },
  { type: "error", inputs: [], name: "WrongValueSent" },
  {
    type: "error",
    inputs: [],
    name: "premintSignerContractFailedToRecoverSigner"
  },
  { type: "error", inputs: [], name: "premintSignerContractNotAContract" },
  {
    type: "error",
    inputs: [{ name: "target", internalType: "address", type: "address" }],
    name: "AddressEmptyCode"
  },
  {
    type: "error",
    inputs: [{ name: "account", internalType: "address", type: "address" }],
    name: "AddressInsufficientBalance"
  },
  { type: "error", inputs: [], name: "AddressZero" },
  { type: "error", inputs: [], name: "ERC1167FailedCreateClone" },
  {
    type: "error",
    inputs: [
      { name: "implementation", internalType: "address", type: "address" }
    ],
    name: "ERC1967InvalidImplementation"
  },
  { type: "error", inputs: [], name: "ERC1967NonPayable" },
  { type: "error", inputs: [], name: "EndTimeCannotBeInThePast" },
  { type: "error", inputs: [], name: "FailedInnerCall" },
  { type: "error", inputs: [], name: "InsufficientFunds" },
  { type: "error", inputs: [], name: "InvalidInitialization" },
  { type: "error", inputs: [], name: "MarketAlreadyLaunched" },
  { type: "error", inputs: [], name: "MarketMinimumNotReached" },
  { type: "error", inputs: [], name: "MinimumMarketEthNotMet" },
  { type: "error", inputs: [], name: "NeedsToBeAtLeastOneSaleToStartMarket" },
  { type: "error", inputs: [], name: "NotInitializing" },
  { type: "error", inputs: [], name: "OnlyZoraRewardRecipient" },
  {
    type: "error",
    inputs: [{ name: "owner", internalType: "address", type: "address" }],
    name: "OwnableInvalidOwner"
  },
  {
    type: "error",
    inputs: [{ name: "account", internalType: "address", type: "address" }],
    name: "OwnableUnauthorizedAccount"
  },
  { type: "error", inputs: [], name: "ReentrancyGuardReentrantCall" },
  { type: "error", inputs: [], name: "RequestMintInvalidUseMint" },
  { type: "error", inputs: [], name: "ResetSaleNotAvailable" },
  { type: "error", inputs: [], name: "SaleAlreadySet" },
  { type: "error", inputs: [], name: "SaleEnded" },
  { type: "error", inputs: [], name: "SaleHasNotStarted" },
  { type: "error", inputs: [], name: "SaleInProgress" },
  { type: "error", inputs: [], name: "SaleNotSet" },
  { type: "error", inputs: [], name: "SaleV2AlreadyStarted" },
  { type: "error", inputs: [], name: "SaleV2Ended" },
  { type: "error", inputs: [], name: "SaleV2NotSet" },
  { type: "error", inputs: [], name: "StartTimeCannotBeAfterEndTime" },
  { type: "error", inputs: [], name: "UUPSUnauthorizedCallContext" },
  {
    type: "error",
    inputs: [{ name: "slot", internalType: "bytes32", type: "bytes32" }],
    name: "UUPSUnsupportedProxiableUUID"
  },
  { type: "error", inputs: [], name: "WrongValueSent" },
  {
    type: "error",
    inputs: [],
    name: "ZoraCreator1155ContractNeedsToSupportReduceSupply"
  }
];
var zoraCreator1155PremintExecutorImplABI = [
  {
    type: "constructor",
    inputs: [
      {
        name: "_factory",
        internalType: "contract IZoraCreator1155Factory",
        type: "address"
      }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [],
    name: "acceptOwnership",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [],
    name: "cancelOwnershipTransfer",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [],
    name: "contractName",
    outputs: [{ name: "", internalType: "string", type: "string" }],
    stateMutability: "pure"
  },
  {
    type: "function",
    inputs: [],
    name: "contractVersion",
    outputs: [{ name: "", internalType: "string", type: "string" }],
    stateMutability: "pure"
  },
  {
    type: "function",
    inputs: [
      {
        name: "contractConfig",
        internalType: "struct ContractCreationConfig",
        type: "tuple",
        components: [
          { name: "contractAdmin", internalType: "address", type: "address" },
          { name: "contractURI", internalType: "string", type: "string" },
          { name: "contractName", internalType: "string", type: "string" }
        ]
      }
    ],
    name: "getContractAddress",
    outputs: [{ name: "", internalType: "address", type: "address" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [
      {
        name: "contractConfig",
        internalType: "struct ContractWithAdditionalAdminsCreationConfig",
        type: "tuple",
        components: [
          { name: "contractAdmin", internalType: "address", type: "address" },
          { name: "contractURI", internalType: "string", type: "string" },
          { name: "contractName", internalType: "string", type: "string" },
          {
            name: "additionalAdmins",
            internalType: "address[]",
            type: "address[]"
          }
        ]
      }
    ],
    name: "getContractWithAdditionalAdminsAddress",
    outputs: [{ name: "", internalType: "address", type: "address" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "implementation",
    outputs: [{ name: "", internalType: "address", type: "address" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [
      { name: "_initialOwner", internalType: "address", type: "address" }
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [
      { name: "signer", internalType: "address", type: "address" },
      {
        name: "premintContractConfigContractAdmin",
        internalType: "address",
        type: "address"
      },
      { name: "contractAddress", internalType: "address", type: "address" }
    ],
    name: "isAuthorizedToCreatePremint",
    outputs: [{ name: "isAuthorized", internalType: "bool", type: "bool" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [
      { name: "signer", internalType: "address", type: "address" },
      {
        name: "premintContractConfigContractAdmin",
        internalType: "address",
        type: "address"
      },
      { name: "contractAddress", internalType: "address", type: "address" },
      {
        name: "additionalAdmins",
        internalType: "address[]",
        type: "address[]"
      }
    ],
    name: "isAuthorizedToCreatePremintWithAdditionalAdmins",
    outputs: [{ name: "isAuthorized", internalType: "bool", type: "bool" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [
      {
        name: "contractConfig",
        internalType: "struct ContractCreationConfig",
        type: "tuple",
        components: [
          { name: "contractAdmin", internalType: "address", type: "address" },
          { name: "contractURI", internalType: "string", type: "string" },
          { name: "contractName", internalType: "string", type: "string" }
        ]
      },
      {
        name: "premintConfig",
        internalType: "struct PremintConfig",
        type: "tuple",
        components: [
          {
            name: "tokenConfig",
            internalType: "struct TokenCreationConfig",
            type: "tuple",
            components: [
              { name: "tokenURI", internalType: "string", type: "string" },
              { name: "maxSupply", internalType: "uint256", type: "uint256" },
              {
                name: "maxTokensPerAddress",
                internalType: "uint64",
                type: "uint64"
              },
              { name: "pricePerToken", internalType: "uint96", type: "uint96" },
              { name: "mintStart", internalType: "uint64", type: "uint64" },
              { name: "mintDuration", internalType: "uint64", type: "uint64" },
              {
                name: "royaltyMintSchedule",
                internalType: "uint32",
                type: "uint32"
              },
              { name: "royaltyBPS", internalType: "uint32", type: "uint32" },
              {
                name: "royaltyRecipient",
                internalType: "address",
                type: "address"
              },
              {
                name: "fixedPriceMinter",
                internalType: "address",
                type: "address"
              }
            ]
          },
          { name: "uid", internalType: "uint32", type: "uint32" },
          { name: "version", internalType: "uint32", type: "uint32" },
          { name: "deleted", internalType: "bool", type: "bool" }
        ]
      },
      { name: "signature", internalType: "bytes", type: "bytes" }
    ],
    name: "isValidSignature",
    outputs: [
      { name: "isValid", internalType: "bool", type: "bool" },
      { name: "contractAddress", internalType: "address", type: "address" },
      { name: "recoveredSigner", internalType: "address", type: "address" }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [
      { name: "collectionAddress", internalType: "address", type: "address" }
    ],
    name: "mintFee",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "owner",
    outputs: [{ name: "", internalType: "address", type: "address" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "pendingOwner",
    outputs: [{ name: "", internalType: "address", type: "address" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [
      {
        name: "contractConfig",
        internalType: "struct ContractWithAdditionalAdminsCreationConfig",
        type: "tuple",
        components: [
          { name: "contractAdmin", internalType: "address", type: "address" },
          { name: "contractURI", internalType: "string", type: "string" },
          { name: "contractName", internalType: "string", type: "string" },
          {
            name: "additionalAdmins",
            internalType: "address[]",
            type: "address[]"
          }
        ]
      },
      { name: "premintCollection", internalType: "address", type: "address" },
      {
        name: "encodedPremintConfig",
        internalType: "struct PremintConfigEncoded",
        type: "tuple",
        components: [
          { name: "uid", internalType: "uint32", type: "uint32" },
          { name: "version", internalType: "uint32", type: "uint32" },
          { name: "deleted", internalType: "bool", type: "bool" },
          { name: "tokenConfig", internalType: "bytes", type: "bytes" },
          {
            name: "premintConfigVersion",
            internalType: "bytes32",
            type: "bytes32"
          }
        ]
      },
      { name: "signature", internalType: "bytes", type: "bytes" },
      { name: "quantityToMint", internalType: "uint256", type: "uint256" },
      {
        name: "mintArguments",
        internalType: "struct MintArguments",
        type: "tuple",
        components: [
          { name: "mintRecipient", internalType: "address", type: "address" },
          { name: "mintComment", internalType: "string", type: "string" },
          {
            name: "mintRewardsRecipients",
            internalType: "address[]",
            type: "address[]"
          }
        ]
      },
      { name: "firstMinter", internalType: "address", type: "address" },
      { name: "signerContract", internalType: "address", type: "address" }
    ],
    name: "premint",
    outputs: [
      {
        name: "premintResult",
        internalType: "struct PremintResult",
        type: "tuple",
        components: [
          { name: "contractAddress", internalType: "address", type: "address" },
          { name: "tokenId", internalType: "uint256", type: "uint256" },
          { name: "createdNewContract", internalType: "bool", type: "bool" }
        ]
      }
    ],
    stateMutability: "payable"
  },
  {
    type: "function",
    inputs: [
      { name: "contractAddress", internalType: "address", type: "address" },
      { name: "uid", internalType: "uint32", type: "uint32" }
    ],
    name: "premintStatus",
    outputs: [
      { name: "contractCreated", internalType: "bool", type: "bool" },
      { name: "tokenIdForPremint", internalType: "uint256", type: "uint256" }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [
      {
        name: "contractConfig",
        internalType: "struct ContractCreationConfig",
        type: "tuple",
        components: [
          { name: "contractAdmin", internalType: "address", type: "address" },
          { name: "contractURI", internalType: "string", type: "string" },
          { name: "contractName", internalType: "string", type: "string" }
        ]
      },
      {
        name: "premintConfig",
        internalType: "struct PremintConfig",
        type: "tuple",
        components: [
          {
            name: "tokenConfig",
            internalType: "struct TokenCreationConfig",
            type: "tuple",
            components: [
              { name: "tokenURI", internalType: "string", type: "string" },
              { name: "maxSupply", internalType: "uint256", type: "uint256" },
              {
                name: "maxTokensPerAddress",
                internalType: "uint64",
                type: "uint64"
              },
              { name: "pricePerToken", internalType: "uint96", type: "uint96" },
              { name: "mintStart", internalType: "uint64", type: "uint64" },
              { name: "mintDuration", internalType: "uint64", type: "uint64" },
              {
                name: "royaltyMintSchedule",
                internalType: "uint32",
                type: "uint32"
              },
              { name: "royaltyBPS", internalType: "uint32", type: "uint32" },
              {
                name: "royaltyRecipient",
                internalType: "address",
                type: "address"
              },
              {
                name: "fixedPriceMinter",
                internalType: "address",
                type: "address"
              }
            ]
          },
          { name: "uid", internalType: "uint32", type: "uint32" },
          { name: "version", internalType: "uint32", type: "uint32" },
          { name: "deleted", internalType: "bool", type: "bool" }
        ]
      },
      { name: "signature", internalType: "bytes", type: "bytes" },
      { name: "quantityToMint", internalType: "uint256", type: "uint256" },
      {
        name: "mintArguments",
        internalType: "struct MintArguments",
        type: "tuple",
        components: [
          { name: "mintRecipient", internalType: "address", type: "address" },
          { name: "mintComment", internalType: "string", type: "string" },
          {
            name: "mintRewardsRecipients",
            internalType: "address[]",
            type: "address[]"
          }
        ]
      }
    ],
    name: "premintV1",
    outputs: [
      {
        name: "",
        internalType: "struct PremintResult",
        type: "tuple",
        components: [
          { name: "contractAddress", internalType: "address", type: "address" },
          { name: "tokenId", internalType: "uint256", type: "uint256" },
          { name: "createdNewContract", internalType: "bool", type: "bool" }
        ]
      }
    ],
    stateMutability: "payable"
  },
  {
    type: "function",
    inputs: [
      {
        name: "contractConfig",
        internalType: "struct ContractCreationConfig",
        type: "tuple",
        components: [
          { name: "contractAdmin", internalType: "address", type: "address" },
          { name: "contractURI", internalType: "string", type: "string" },
          { name: "contractName", internalType: "string", type: "string" }
        ]
      },
      {
        name: "premintConfig",
        internalType: "struct PremintConfigV2",
        type: "tuple",
        components: [
          {
            name: "tokenConfig",
            internalType: "struct TokenCreationConfigV2",
            type: "tuple",
            components: [
              { name: "tokenURI", internalType: "string", type: "string" },
              { name: "maxSupply", internalType: "uint256", type: "uint256" },
              {
                name: "maxTokensPerAddress",
                internalType: "uint64",
                type: "uint64"
              },
              { name: "pricePerToken", internalType: "uint96", type: "uint96" },
              { name: "mintStart", internalType: "uint64", type: "uint64" },
              { name: "mintDuration", internalType: "uint64", type: "uint64" },
              { name: "royaltyBPS", internalType: "uint32", type: "uint32" },
              {
                name: "payoutRecipient",
                internalType: "address",
                type: "address"
              },
              {
                name: "fixedPriceMinter",
                internalType: "address",
                type: "address"
              },
              {
                name: "createReferral",
                internalType: "address",
                type: "address"
              }
            ]
          },
          { name: "uid", internalType: "uint32", type: "uint32" },
          { name: "version", internalType: "uint32", type: "uint32" },
          { name: "deleted", internalType: "bool", type: "bool" }
        ]
      },
      { name: "signature", internalType: "bytes", type: "bytes" },
      { name: "quantityToMint", internalType: "uint256", type: "uint256" },
      {
        name: "mintArguments",
        internalType: "struct MintArguments",
        type: "tuple",
        components: [
          { name: "mintRecipient", internalType: "address", type: "address" },
          { name: "mintComment", internalType: "string", type: "string" },
          {
            name: "mintRewardsRecipients",
            internalType: "address[]",
            type: "address[]"
          }
        ]
      }
    ],
    name: "premintV2",
    outputs: [
      {
        name: "",
        internalType: "struct PremintResult",
        type: "tuple",
        components: [
          { name: "contractAddress", internalType: "address", type: "address" },
          { name: "tokenId", internalType: "uint256", type: "uint256" },
          { name: "createdNewContract", internalType: "bool", type: "bool" }
        ]
      }
    ],
    stateMutability: "payable"
  },
  {
    type: "function",
    inputs: [],
    name: "proxiableUUID",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "resignOwnership",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [{ name: "_newOwner", internalType: "address", type: "address" }],
    name: "safeTransferOwnership",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [
      { name: "contractAddress", internalType: "address", type: "address" }
    ],
    name: "supportedPremintSignatureVersions",
    outputs: [{ name: "versions", internalType: "string[]", type: "string[]" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [{ name: "_newOwner", internalType: "address", type: "address" }],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [
      { name: "newImplementation", internalType: "address", type: "address" }
    ],
    name: "upgradeTo",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [
      { name: "newImplementation", internalType: "address", type: "address" },
      { name: "data", internalType: "bytes", type: "bytes" }
    ],
    name: "upgradeToAndCall",
    outputs: [],
    stateMutability: "payable"
  },
  {
    type: "function",
    inputs: [],
    name: "zora1155Factory",
    outputs: [
      {
        name: "",
        internalType: "contract IZoraCreator1155Factory",
        type: "address"
      }
    ],
    stateMutability: "view"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "previousAdmin",
        internalType: "address",
        type: "address",
        indexed: false
      },
      {
        name: "newAdmin",
        internalType: "address",
        type: "address",
        indexed: false
      }
    ],
    name: "AdminChanged"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "beacon",
        internalType: "address",
        type: "address",
        indexed: true
      }
    ],
    name: "BeaconUpgraded"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "version", internalType: "uint8", type: "uint8", indexed: false }
    ],
    name: "Initialized"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "owner",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "canceledOwner",
        internalType: "address",
        type: "address",
        indexed: true
      }
    ],
    name: "OwnerCanceled"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "owner",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "pendingOwner",
        internalType: "address",
        type: "address",
        indexed: true
      }
    ],
    name: "OwnerPending"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "prevOwner",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "newOwner",
        internalType: "address",
        type: "address",
        indexed: true
      }
    ],
    name: "OwnerUpdated"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "contractAddress",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "tokenId",
        internalType: "uint256",
        type: "uint256",
        indexed: true
      },
      {
        name: "createdNewContract",
        internalType: "bool",
        type: "bool",
        indexed: true
      },
      { name: "uid", internalType: "uint32", type: "uint32", indexed: false },
      {
        name: "contractConfig",
        internalType: "struct ContractCreationConfig",
        type: "tuple",
        components: [
          { name: "contractAdmin", internalType: "address", type: "address" },
          { name: "contractURI", internalType: "string", type: "string" },
          { name: "contractName", internalType: "string", type: "string" }
        ],
        indexed: false
      },
      {
        name: "tokenConfig",
        internalType: "struct TokenCreationConfig",
        type: "tuple",
        components: [
          { name: "tokenURI", internalType: "string", type: "string" },
          { name: "maxSupply", internalType: "uint256", type: "uint256" },
          {
            name: "maxTokensPerAddress",
            internalType: "uint64",
            type: "uint64"
          },
          { name: "pricePerToken", internalType: "uint96", type: "uint96" },
          { name: "mintStart", internalType: "uint64", type: "uint64" },
          { name: "mintDuration", internalType: "uint64", type: "uint64" },
          {
            name: "royaltyMintSchedule",
            internalType: "uint32",
            type: "uint32"
          },
          { name: "royaltyBPS", internalType: "uint32", type: "uint32" },
          {
            name: "royaltyRecipient",
            internalType: "address",
            type: "address"
          },
          {
            name: "fixedPriceMinter",
            internalType: "address",
            type: "address"
          }
        ],
        indexed: false
      },
      {
        name: "minter",
        internalType: "address",
        type: "address",
        indexed: false
      },
      {
        name: "quantityMinted",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      }
    ],
    name: "Preminted"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "contractAddress",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "tokenId",
        internalType: "uint256",
        type: "uint256",
        indexed: true
      },
      {
        name: "createdNewContract",
        internalType: "bool",
        type: "bool",
        indexed: true
      },
      { name: "uid", internalType: "uint32", type: "uint32", indexed: false },
      {
        name: "minter",
        internalType: "address",
        type: "address",
        indexed: false
      },
      {
        name: "quantityMinted",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      }
    ],
    name: "PremintedV2"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "implementation",
        internalType: "address",
        type: "address",
        indexed: true
      }
    ],
    name: "Upgraded"
  },
  { type: "error", inputs: [], name: "ADDRESS_DELEGATECALL_TO_NON_CONTRACT" },
  { type: "error", inputs: [], name: "ADDRESS_LOW_LEVEL_CALL_FAILED" },
  {
    type: "error",
    inputs: [
      { name: "operator", internalType: "address", type: "address" },
      { name: "user", internalType: "address", type: "address" }
    ],
    name: "Burn_NotOwnerOrApproved"
  },
  { type: "error", inputs: [], name: "CREATOR_FUNDS_RECIPIENT_NOT_SET" },
  {
    type: "error",
    inputs: [{ name: "reason", internalType: "bytes", type: "bytes" }],
    name: "CallFailed"
  },
  { type: "error", inputs: [], name: "Call_TokenIdMismatch" },
  { type: "error", inputs: [], name: "CallerNotZoraCreator1155" },
  { type: "error", inputs: [], name: "CanOnlyReduceMaxSupply" },
  {
    type: "error",
    inputs: [
      { name: "tokenId", internalType: "uint256", type: "uint256" },
      { name: "quantity", internalType: "uint256", type: "uint256" },
      { name: "totalMinted", internalType: "uint256", type: "uint256" },
      { name: "maxSupply", internalType: "uint256", type: "uint256" }
    ],
    name: "CannotMintMoreTokens"
  },
  { type: "error", inputs: [], name: "CannotReduceMaxSupplyBelowMinted" },
  {
    type: "error",
    inputs: [
      { name: "proposedAddress", internalType: "address", type: "address" }
    ],
    name: "Config_TransferHookNotSupported"
  },
  { type: "error", inputs: [], name: "ERC1155_MINT_TO_ZERO_ADDRESS" },
  { type: "error", inputs: [], name: "ERC1967_NEW_IMPL_NOT_CONTRACT" },
  { type: "error", inputs: [], name: "ERC1967_NEW_IMPL_NOT_UUPS" },
  { type: "error", inputs: [], name: "ERC1967_UNSUPPORTED_PROXIABLEUUID" },
  { type: "error", inputs: [], name: "ERC20TransferSlippage" },
  {
    type: "error",
    inputs: [
      { name: "recipient", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" }
    ],
    name: "ETHWithdrawFailed"
  },
  {
    type: "error",
    inputs: [],
    name: "FUNCTION_MUST_BE_CALLED_THROUGH_ACTIVE_PROXY"
  },
  {
    type: "error",
    inputs: [],
    name: "FUNCTION_MUST_BE_CALLED_THROUGH_DELEGATECALL"
  },
  { type: "error", inputs: [], name: "FirstMinterAddressZero" },
  {
    type: "error",
    inputs: [
      { name: "amount", internalType: "uint256", type: "uint256" },
      { name: "contractValue", internalType: "uint256", type: "uint256" }
    ],
    name: "FundsWithdrawInsolvent"
  },
  {
    type: "error",
    inputs: [],
    name: "INITIALIZABLE_CONTRACT_ALREADY_INITIALIZED"
  },
  { type: "error", inputs: [], name: "INITIALIZABLE_CONTRACT_IS_INITIALIZING" },
  {
    type: "error",
    inputs: [],
    name: "INITIALIZABLE_CONTRACT_IS_NOT_INITIALIZING"
  },
  { type: "error", inputs: [], name: "INVALID_ADDRESS_ZERO" },
  { type: "error", inputs: [], name: "INVALID_ETH_AMOUNT" },
  {
    type: "error",
    inputs: [
      { name: "mintTo", internalType: "address", type: "address" },
      { name: "merkleProof", internalType: "bytes32[]", type: "bytes32[]" },
      { name: "merkleRoot", internalType: "bytes32", type: "bytes32" }
    ],
    name: "InvalidMerkleProof"
  },
  { type: "error", inputs: [], name: "InvalidMintSchedule" },
  { type: "error", inputs: [], name: "InvalidPremintVersion" },
  { type: "error", inputs: [], name: "InvalidSignature" },
  { type: "error", inputs: [], name: "InvalidSignatureVersion" },
  {
    type: "error",
    inputs: [{ name: "magicValue", internalType: "bytes4", type: "bytes4" }],
    name: "InvalidSigner"
  },
  { type: "error", inputs: [], name: "MintNotYetStarted" },
  { type: "error", inputs: [], name: "Mint_InsolventSaleTransfer" },
  { type: "error", inputs: [], name: "Mint_InvalidMintArrayLength" },
  { type: "error", inputs: [], name: "Mint_TokenIDMintNotAllowed" },
  { type: "error", inputs: [], name: "Mint_UnknownCommand" },
  { type: "error", inputs: [], name: "Mint_ValueTransferFail" },
  { type: "error", inputs: [], name: "MinterContractAlreadyExists" },
  { type: "error", inputs: [], name: "MinterContractDoesNotExist" },
  { type: "error", inputs: [], name: "NewOwnerNeedsToBeAdmin" },
  { type: "error", inputs: [], name: "NonEthRedemption" },
  { type: "error", inputs: [], name: "ONLY_CREATE_REFERRAL" },
  { type: "error", inputs: [], name: "ONLY_OWNER" },
  { type: "error", inputs: [], name: "ONLY_PENDING_OWNER" },
  { type: "error", inputs: [], name: "OWNER_CANNOT_BE_ZERO_ADDRESS" },
  { type: "error", inputs: [], name: "OnlyAllowedForRegisteredMinter" },
  { type: "error", inputs: [], name: "OnlyAllowedForTimedSaleStrategy" },
  { type: "error", inputs: [], name: "OnlyTransfersFromZoraMints" },
  { type: "error", inputs: [], name: "PremintDeleted" },
  {
    type: "error",
    inputs: [
      { name: "caller", internalType: "address", type: "address" },
      { name: "recipient", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" }
    ],
    name: "ProtocolRewardsWithdrawFailed"
  },
  { type: "error", inputs: [], name: "Renderer_NotValidRendererContract" },
  { type: "error", inputs: [], name: "SaleEnded" },
  { type: "error", inputs: [], name: "SaleHasNotStarted" },
  {
    type: "error",
    inputs: [
      { name: "targetContract", internalType: "address", type: "address" }
    ],
    name: "Sale_CannotCallNonSalesContract"
  },
  {
    type: "error",
    inputs: [
      { name: "expected", internalType: "uint256", type: "uint256" },
      { name: "actual", internalType: "uint256", type: "uint256" }
    ],
    name: "TokenIdMismatch"
  },
  {
    type: "error",
    inputs: [],
    name: "UUPS_UPGRADEABLE_MUST_NOT_BE_CALLED_THROUGH_DELEGATECALL"
  },
  {
    type: "error",
    inputs: [
      { name: "expected", internalType: "string", type: "string" },
      { name: "actual", internalType: "string", type: "string" }
    ],
    name: "UpgradeToMismatchedContractName"
  },
  {
    type: "error",
    inputs: [
      { name: "user", internalType: "address", type: "address" },
      { name: "limit", internalType: "uint256", type: "uint256" },
      { name: "requestedAmount", internalType: "uint256", type: "uint256" }
    ],
    name: "UserExceedsMintLimit"
  },
  {
    type: "error",
    inputs: [
      { name: "user", internalType: "address", type: "address" },
      { name: "tokenId", internalType: "uint256", type: "uint256" },
      { name: "role", internalType: "uint256", type: "uint256" }
    ],
    name: "UserMissingRoleForToken"
  },
  { type: "error", inputs: [], name: "WrongValueSent" },
  {
    type: "error",
    inputs: [],
    name: "premintSignerContractFailedToRecoverSigner"
  },
  { type: "error", inputs: [], name: "premintSignerContractNotAContract" }
];
var zoraCreator1155PremintExecutorImplAddress = {
  1: "0x7777773606e7e46C8Ba8B98C08f5cD218e31d340",
  10: "0x7777773606e7e46C8Ba8B98C08f5cD218e31d340",
  999: "0x7777773606e7e46C8Ba8B98C08f5cD218e31d340",
  8453: "0x7777773606e7e46C8Ba8B98C08f5cD218e31d340",
  42161: "0x7777773606e7e46C8Ba8B98C08f5cD218e31d340",
  81457: "0x7777773606e7e46C8Ba8B98C08f5cD218e31d340",
  84532: "0x7777773606e7e46C8Ba8B98C08f5cD218e31d340",
  421614: "0x7777773606e7e46C8Ba8B98C08f5cD218e31d340",
  7777777: "0x7777773606e7e46C8Ba8B98C08f5cD218e31d340",
  11155111: "0x7777773606e7e46C8Ba8B98C08f5cD218e31d340",
  168587773: "0x7777773606e7e46C8Ba8B98C08f5cD218e31d340",
  999999999: "0x7777773606e7e46C8Ba8B98C08f5cD218e31d340"
};
var zoraCreator1155PremintExecutorImplConfig = {
  address: zoraCreator1155PremintExecutorImplAddress,
  abi: zoraCreator1155PremintExecutorImplABI
};
var zoraCreatorFixedPriceSaleStrategyABI = [
  {
    type: "function",
    inputs: [],
    name: "contractName",
    outputs: [{ name: "", internalType: "string", type: "string" }],
    stateMutability: "pure"
  },
  {
    type: "function",
    inputs: [],
    name: "contractURI",
    outputs: [{ name: "", internalType: "string", type: "string" }],
    stateMutability: "pure"
  },
  {
    type: "function",
    inputs: [],
    name: "contractVersion",
    outputs: [{ name: "", internalType: "string", type: "string" }],
    stateMutability: "pure"
  },
  {
    type: "function",
    inputs: [
      { name: "tokenContract", internalType: "address", type: "address" },
      { name: "tokenId", internalType: "uint256", type: "uint256" },
      { name: "wallet", internalType: "address", type: "address" }
    ],
    name: "getMintedPerWallet",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [
      { name: "", internalType: "address", type: "address" },
      { name: "tokenId", internalType: "uint256", type: "uint256" },
      { name: "quantity", internalType: "uint256", type: "uint256" },
      { name: "ethValueSent", internalType: "uint256", type: "uint256" },
      { name: "minterArguments", internalType: "bytes", type: "bytes" }
    ],
    name: "requestMint",
    outputs: [
      {
        name: "commands",
        internalType: "struct ICreatorCommands.CommandSet",
        type: "tuple",
        components: [
          {
            name: "commands",
            internalType: "struct ICreatorCommands.Command[]",
            type: "tuple[]",
            components: [
              {
                name: "method",
                internalType: "enum ICreatorCommands.CreatorActions",
                type: "uint8"
              },
              { name: "args", internalType: "bytes", type: "bytes" }
            ]
          },
          { name: "at", internalType: "uint256", type: "uint256" }
        ]
      }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [{ name: "tokenId", internalType: "uint256", type: "uint256" }],
    name: "resetSale",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [
      { name: "tokenContract", internalType: "address", type: "address" },
      { name: "tokenId", internalType: "uint256", type: "uint256" }
    ],
    name: "sale",
    outputs: [
      {
        name: "",
        internalType: "struct ZoraCreatorFixedPriceSaleStrategy.SalesConfig",
        type: "tuple",
        components: [
          { name: "saleStart", internalType: "uint64", type: "uint64" },
          { name: "saleEnd", internalType: "uint64", type: "uint64" },
          {
            name: "maxTokensPerAddress",
            internalType: "uint64",
            type: "uint64"
          },
          { name: "pricePerToken", internalType: "uint96", type: "uint96" },
          { name: "fundsRecipient", internalType: "address", type: "address" }
        ]
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [
      { name: "tokenId", internalType: "uint256", type: "uint256" },
      {
        name: "salesConfig",
        internalType: "struct ZoraCreatorFixedPriceSaleStrategy.SalesConfig",
        type: "tuple",
        components: [
          { name: "saleStart", internalType: "uint64", type: "uint64" },
          { name: "saleEnd", internalType: "uint64", type: "uint64" },
          {
            name: "maxTokensPerAddress",
            internalType: "uint64",
            type: "uint64"
          },
          { name: "pricePerToken", internalType: "uint96", type: "uint96" },
          { name: "fundsRecipient", internalType: "address", type: "address" }
        ]
      }
    ],
    name: "setSale",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [{ name: "interfaceId", internalType: "bytes4", type: "bytes4" }],
    name: "supportsInterface",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
    stateMutability: "pure"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "sender",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "tokenContract",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "tokenId",
        internalType: "uint256",
        type: "uint256",
        indexed: true
      },
      {
        name: "quantity",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      },
      {
        name: "comment",
        internalType: "string",
        type: "string",
        indexed: false
      }
    ],
    name: "MintComment"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "mediaContract",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "tokenId",
        internalType: "uint256",
        type: "uint256",
        indexed: true
      },
      {
        name: "salesConfig",
        internalType: "struct ZoraCreatorFixedPriceSaleStrategy.SalesConfig",
        type: "tuple",
        components: [
          { name: "saleStart", internalType: "uint64", type: "uint64" },
          { name: "saleEnd", internalType: "uint64", type: "uint64" },
          {
            name: "maxTokensPerAddress",
            internalType: "uint64",
            type: "uint64"
          },
          { name: "pricePerToken", internalType: "uint96", type: "uint96" },
          { name: "fundsRecipient", internalType: "address", type: "address" }
        ],
        indexed: false
      }
    ],
    name: "SaleSet"
  },
  { type: "error", inputs: [], name: "CallerNotZoraCreator1155" },
  {
    type: "error",
    inputs: [
      { name: "mintTo", internalType: "address", type: "address" },
      { name: "merkleProof", internalType: "bytes32[]", type: "bytes32[]" },
      { name: "merkleRoot", internalType: "bytes32", type: "bytes32" }
    ],
    name: "InvalidMerkleProof"
  },
  { type: "error", inputs: [], name: "MinterContractAlreadyExists" },
  { type: "error", inputs: [], name: "MinterContractDoesNotExist" },
  { type: "error", inputs: [], name: "SaleEnded" },
  { type: "error", inputs: [], name: "SaleHasNotStarted" },
  {
    type: "error",
    inputs: [
      { name: "user", internalType: "address", type: "address" },
      { name: "limit", internalType: "uint256", type: "uint256" },
      { name: "requestedAmount", internalType: "uint256", type: "uint256" }
    ],
    name: "UserExceedsMintLimit"
  },
  { type: "error", inputs: [], name: "WrongValueSent" }
];
var zoraCreatorFixedPriceSaleStrategyAddress = {
  1: "0x04E2516A2c207E84a1839755675dfd8eF6302F0a",
  10: "0x3678862f04290E565cCA2EF163BAeb92Bb76790C",
  999: "0x04E2516A2c207E84a1839755675dfd8eF6302F0a",
  8453: "0x04E2516A2c207E84a1839755675dfd8eF6302F0a",
  42161: "0x1Cd1C1f3b8B779B50Db23155F2Cb244FCcA06B21",
  81457: "0x3EB144aee170BF62FdA1536e38aF51f08e34A5D0",
  84532: "0xd34872BE0cdb6b09d45FCa067B07f04a1A9aE1aE",
  421614: "0x1Cd1C1f3b8B779B50Db23155F2Cb244FCcA06B21",
  7777777: "0x04E2516A2c207E84a1839755675dfd8eF6302F0a",
  11155111: "0x1Cd1C1f3b8B779B50Db23155F2Cb244FCcA06B21",
  168587773: "0x3EB144aee170BF62FdA1536e38aF51f08e34A5D0",
  999999999: "0x6d28164C3CE04A190D5F9f0f8881fc807EAD975A"
};
var zoraCreatorFixedPriceSaleStrategyConfig = {
  address: zoraCreatorFixedPriceSaleStrategyAddress,
  abi: zoraCreatorFixedPriceSaleStrategyABI
};
var zoraCreatorMerkleMinterStrategyABI = [
  {
    type: "function",
    inputs: [
      { name: "", internalType: "address", type: "address" },
      { name: "", internalType: "uint256", type: "uint256" }
    ],
    name: "allowedMerkles",
    outputs: [
      { name: "presaleStart", internalType: "uint64", type: "uint64" },
      { name: "presaleEnd", internalType: "uint64", type: "uint64" },
      { name: "fundsRecipient", internalType: "address", type: "address" },
      { name: "merkleRoot", internalType: "bytes32", type: "bytes32" }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "contractName",
    outputs: [{ name: "", internalType: "string", type: "string" }],
    stateMutability: "pure"
  },
  {
    type: "function",
    inputs: [],
    name: "contractURI",
    outputs: [{ name: "", internalType: "string", type: "string" }],
    stateMutability: "pure"
  },
  {
    type: "function",
    inputs: [],
    name: "contractVersion",
    outputs: [{ name: "", internalType: "string", type: "string" }],
    stateMutability: "pure"
  },
  {
    type: "function",
    inputs: [
      { name: "tokenContract", internalType: "address", type: "address" },
      { name: "tokenId", internalType: "uint256", type: "uint256" },
      { name: "wallet", internalType: "address", type: "address" }
    ],
    name: "getMintedPerWallet",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [
      { name: "", internalType: "address", type: "address" },
      { name: "tokenId", internalType: "uint256", type: "uint256" },
      { name: "quantity", internalType: "uint256", type: "uint256" },
      { name: "ethValueSent", internalType: "uint256", type: "uint256" },
      { name: "minterArguments", internalType: "bytes", type: "bytes" }
    ],
    name: "requestMint",
    outputs: [
      {
        name: "commands",
        internalType: "struct ICreatorCommands.CommandSet",
        type: "tuple",
        components: [
          {
            name: "commands",
            internalType: "struct ICreatorCommands.Command[]",
            type: "tuple[]",
            components: [
              {
                name: "method",
                internalType: "enum ICreatorCommands.CreatorActions",
                type: "uint8"
              },
              { name: "args", internalType: "bytes", type: "bytes" }
            ]
          },
          { name: "at", internalType: "uint256", type: "uint256" }
        ]
      }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [{ name: "tokenId", internalType: "uint256", type: "uint256" }],
    name: "resetSale",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [
      { name: "tokenContract", internalType: "address", type: "address" },
      { name: "tokenId", internalType: "uint256", type: "uint256" }
    ],
    name: "sale",
    outputs: [
      {
        name: "",
        internalType: "struct ZoraCreatorMerkleMinterStrategy.MerkleSaleSettings",
        type: "tuple",
        components: [
          { name: "presaleStart", internalType: "uint64", type: "uint64" },
          { name: "presaleEnd", internalType: "uint64", type: "uint64" },
          { name: "fundsRecipient", internalType: "address", type: "address" },
          { name: "merkleRoot", internalType: "bytes32", type: "bytes32" }
        ]
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [
      { name: "tokenId", internalType: "uint256", type: "uint256" },
      {
        name: "merkleSaleSettings",
        internalType: "struct ZoraCreatorMerkleMinterStrategy.MerkleSaleSettings",
        type: "tuple",
        components: [
          { name: "presaleStart", internalType: "uint64", type: "uint64" },
          { name: "presaleEnd", internalType: "uint64", type: "uint64" },
          { name: "fundsRecipient", internalType: "address", type: "address" },
          { name: "merkleRoot", internalType: "bytes32", type: "bytes32" }
        ]
      }
    ],
    name: "setSale",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [{ name: "interfaceId", internalType: "bytes4", type: "bytes4" }],
    name: "supportsInterface",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
    stateMutability: "pure"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "mediaContract",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "tokenId",
        internalType: "uint256",
        type: "uint256",
        indexed: true
      },
      {
        name: "merkleSaleSettings",
        internalType: "struct ZoraCreatorMerkleMinterStrategy.MerkleSaleSettings",
        type: "tuple",
        components: [
          { name: "presaleStart", internalType: "uint64", type: "uint64" },
          { name: "presaleEnd", internalType: "uint64", type: "uint64" },
          { name: "fundsRecipient", internalType: "address", type: "address" },
          { name: "merkleRoot", internalType: "bytes32", type: "bytes32" }
        ],
        indexed: false
      }
    ],
    name: "SaleSet"
  },
  { type: "error", inputs: [], name: "CallerNotZoraCreator1155" },
  {
    type: "error",
    inputs: [
      { name: "mintTo", internalType: "address", type: "address" },
      { name: "merkleProof", internalType: "bytes32[]", type: "bytes32[]" },
      { name: "merkleRoot", internalType: "bytes32", type: "bytes32" }
    ],
    name: "InvalidMerkleProof"
  },
  { type: "error", inputs: [], name: "MerkleClaimsExceeded" },
  { type: "error", inputs: [], name: "MinterContractAlreadyExists" },
  { type: "error", inputs: [], name: "MinterContractDoesNotExist" },
  { type: "error", inputs: [], name: "SaleEnded" },
  { type: "error", inputs: [], name: "SaleHasNotStarted" },
  {
    type: "error",
    inputs: [
      { name: "user", internalType: "address", type: "address" },
      { name: "limit", internalType: "uint256", type: "uint256" },
      { name: "requestedAmount", internalType: "uint256", type: "uint256" }
    ],
    name: "UserExceedsMintLimit"
  },
  { type: "error", inputs: [], name: "WrongValueSent" }
];
var zoraCreatorMerkleMinterStrategyAddress = {
  1: "0xf48172CA3B6068B20eE4917Eb27b5472f1f272C7",
  10: "0x899ce31dF6C6Af81203AcAaD285bF539234eF4b8",
  999: "0xf48172CA3B6068B20eE4917Eb27b5472f1f272C7",
  8453: "0xf48172CA3B6068B20eE4917Eb27b5472f1f272C7",
  42161: "0xe770E6f19aecF8ef3145A50087999b5556aB3610",
  81457: "0xB9C997FcC46a27331CC986cc2416ee99C1d506c3",
  84532: "0x3E8524770adD176bE381a0529E09f1c6c3502A5a",
  421614: "0xe770E6f19aecF8ef3145A50087999b5556aB3610",
  7777777: "0xf48172CA3B6068B20eE4917Eb27b5472f1f272C7",
  11155111: "0xe770E6f19aecF8ef3145A50087999b5556aB3610",
  168587773: "0xB9C997FcC46a27331CC986cc2416ee99C1d506c3",
  999999999: "0x5e5fD4b758076BAD940db0284b711A67E8a3B88c"
};
var zoraCreatorMerkleMinterStrategyConfig = {
  address: zoraCreatorMerkleMinterStrategyAddress,
  abi: zoraCreatorMerkleMinterStrategyABI
};
var zoraCreatorRedeemMinterFactoryABI = [
  { type: "constructor", inputs: [], stateMutability: "nonpayable" },
  {
    type: "function",
    inputs: [],
    name: "CONTRACT_BASE_ID",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "contractName",
    outputs: [{ name: "", internalType: "string", type: "string" }],
    stateMutability: "pure"
  },
  {
    type: "function",
    inputs: [],
    name: "contractURI",
    outputs: [{ name: "", internalType: "string", type: "string" }],
    stateMutability: "pure"
  },
  {
    type: "function",
    inputs: [],
    name: "contractVersion",
    outputs: [{ name: "", internalType: "string", type: "string" }],
    stateMutability: "pure"
  },
  {
    type: "function",
    inputs: [],
    name: "createMinterIfNoneExists",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [
      { name: "_creatorContract", internalType: "address", type: "address" }
    ],
    name: "doesRedeemMinterExistForCreatorContract",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [
      { name: "_creatorContract", internalType: "address", type: "address" }
    ],
    name: "getDeployedRedeemMinterForCreatorContract",
    outputs: [{ name: "", internalType: "address", type: "address" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [
      { name: "_creatorContract", internalType: "address", type: "address" }
    ],
    name: "predictMinterAddress",
    outputs: [{ name: "", internalType: "address", type: "address" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [
      { name: "sender", internalType: "address", type: "address" },
      { name: "tokenId", internalType: "uint256", type: "uint256" },
      { name: "quantity", internalType: "uint256", type: "uint256" },
      { name: "ethValueSent", internalType: "uint256", type: "uint256" },
      { name: "minterArguments", internalType: "bytes", type: "bytes" }
    ],
    name: "requestMint",
    outputs: [
      {
        name: "commands",
        internalType: "struct ICreatorCommands.CommandSet",
        type: "tuple",
        components: [
          {
            name: "commands",
            internalType: "struct ICreatorCommands.Command[]",
            type: "tuple[]",
            components: [
              {
                name: "method",
                internalType: "enum ICreatorCommands.CreatorActions",
                type: "uint8"
              },
              { name: "args", internalType: "bytes", type: "bytes" }
            ]
          },
          { name: "at", internalType: "uint256", type: "uint256" }
        ]
      }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [{ name: "interfaceId", internalType: "bytes4", type: "bytes4" }],
    name: "supportsInterface",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
    stateMutability: "pure"
  },
  {
    type: "function",
    inputs: [],
    name: "zoraRedeemMinterImplementation",
    outputs: [{ name: "", internalType: "address", type: "address" }],
    stateMutability: "view"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "creatorContract",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "minterContract",
        internalType: "address",
        type: "address",
        indexed: true
      }
    ],
    name: "RedeemMinterDeployed"
  },
  { type: "error", inputs: [], name: "CallerNotZoraCreator1155" },
  {
    type: "error",
    inputs: [
      { name: "mintTo", internalType: "address", type: "address" },
      { name: "merkleProof", internalType: "bytes32[]", type: "bytes32[]" },
      { name: "merkleRoot", internalType: "bytes32", type: "bytes32" }
    ],
    name: "InvalidMerkleProof"
  },
  { type: "error", inputs: [], name: "MinterContractAlreadyExists" },
  { type: "error", inputs: [], name: "MinterContractDoesNotExist" },
  { type: "error", inputs: [], name: "SaleEnded" },
  { type: "error", inputs: [], name: "SaleHasNotStarted" },
  { type: "error", inputs: [], name: "WrongValueSent" }
];
var zoraCreatorRedeemMinterFactoryAddress = {
  1: "0x78964965cF77850224513a367f899435C5B69174",
  10: "0x1B28A04b7eB7b93f920ddF2021aa3fAE065395f2",
  999: "0x78964965cF77850224513a367f899435C5B69174",
  8453: "0x78964965cF77850224513a367f899435C5B69174",
  42161: "0x69bB4A24EBD8b1B87AF4538E0Ca3075b7E398c3D",
  81457: "0x7A0dE1B1f5420Df5D946878fBe2cF109011BE614",
  84532: "0x805E0a08dE70f85C01F7848370d5e3fc08aAd0ea",
  421614: "0x69bB4A24EBD8b1B87AF4538E0Ca3075b7E398c3D",
  7777777: "0x78964965cF77850224513a367f899435C5B69174",
  11155111: "0x69bB4A24EBD8b1B87AF4538E0Ca3075b7E398c3D",
  168587773: "0x7A0dE1B1f5420Df5D946878fBe2cF109011BE614",
  999999999: "0x25cFb6dd9cDE8425e781d6718a29Ccbca3F038d6"
};
var zoraCreatorRedeemMinterFactoryConfig = {
  address: zoraCreatorRedeemMinterFactoryAddress,
  abi: zoraCreatorRedeemMinterFactoryABI
};
var zoraMints1155ABI = [
  { type: "constructor", inputs: [], stateMutability: "nonpayable" },
  {
    type: "function",
    inputs: [],
    name: "ETH_ADDRESS",
    outputs: [{ name: "", internalType: "address", type: "address" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "MINIMUM_ERC20_PRICE",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "MINIMUM_ETH_PRICE",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "NAME",
    outputs: [{ name: "", internalType: "string", type: "string" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "VERSION",
    outputs: [{ name: "", internalType: "string", type: "string" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "authority",
    outputs: [{ name: "", internalType: "address", type: "address" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [
      { name: "account", internalType: "address", type: "address" },
      { name: "id", internalType: "uint256", type: "uint256" }
    ],
    name: "balanceOf",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [{ name: "account", internalType: "address", type: "address" }],
    name: "balanceOfAccount",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [
      { name: "accounts", internalType: "address[]", type: "address[]" },
      { name: "ids", internalType: "uint256[]", type: "uint256[]" }
    ],
    name: "balanceOfBatch",
    outputs: [{ name: "", internalType: "uint256[]", type: "uint256[]" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "contractURI",
    outputs: [{ name: "", internalType: "string", type: "string" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [
      { name: "tokenId", internalType: "uint256", type: "uint256" },
      {
        name: "tokenConfig",
        internalType: "struct TokenConfig",
        type: "tuple",
        components: [
          { name: "price", internalType: "uint256", type: "uint256" },
          { name: "tokenAddress", internalType: "address", type: "address" },
          { name: "redeemHandler", internalType: "address", type: "address" }
        ]
      }
    ],
    name: "createToken",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [],
    name: "eip712Domain",
    outputs: [
      { name: "fields", internalType: "bytes1", type: "bytes1" },
      { name: "name", internalType: "string", type: "string" },
      { name: "version", internalType: "string", type: "string" },
      { name: "chainId", internalType: "uint256", type: "uint256" },
      { name: "verifyingContract", internalType: "address", type: "address" },
      { name: "salt", internalType: "bytes32", type: "bytes32" },
      { name: "extensions", internalType: "uint256[]", type: "uint256[]" }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "getManager",
    outputs: [{ name: "", internalType: "address", type: "address" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [{ name: "tokenId", internalType: "uint256", type: "uint256" }],
    name: "getTokenConfig",
    outputs: [
      {
        name: "",
        internalType: "struct TokenConfig",
        type: "tuple",
        components: [
          { name: "price", internalType: "uint256", type: "uint256" },
          { name: "tokenAddress", internalType: "address", type: "address" },
          { name: "redeemHandler", internalType: "address", type: "address" }
        ]
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [
      {
        name: "permit",
        internalType: "struct IZoraSparks1155Managed.PermitBatch",
        type: "tuple",
        components: [
          { name: "owner", internalType: "address", type: "address" },
          { name: "to", internalType: "address", type: "address" },
          { name: "tokenIds", internalType: "uint256[]", type: "uint256[]" },
          { name: "quantities", internalType: "uint256[]", type: "uint256[]" },
          { name: "safeTransferData", internalType: "bytes", type: "bytes" },
          { name: "deadline", internalType: "uint256", type: "uint256" },
          { name: "nonce", internalType: "uint256", type: "uint256" }
        ]
      }
    ],
    name: "hashPermitBatch",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [
      {
        name: "permit",
        internalType: "struct IZoraSparks1155Managed.PermitSingle",
        type: "tuple",
        components: [
          { name: "owner", internalType: "address", type: "address" },
          { name: "to", internalType: "address", type: "address" },
          { name: "tokenId", internalType: "uint256", type: "uint256" },
          { name: "quantity", internalType: "uint256", type: "uint256" },
          { name: "safeTransferData", internalType: "bytes", type: "bytes" },
          { name: "deadline", internalType: "uint256", type: "uint256" },
          { name: "nonce", internalType: "uint256", type: "uint256" }
        ]
      }
    ],
    name: "hashPermitSingle",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [
      { name: "account", internalType: "address", type: "address" },
      { name: "operator", internalType: "address", type: "address" }
    ],
    name: "isApprovedForAll",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "isConsumingScheduledOp",
    outputs: [{ name: "", internalType: "bytes4", type: "bytes4" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [
      {
        name: "permit",
        internalType: "struct IZoraSparks1155Managed.PermitBatch",
        type: "tuple",
        components: [
          { name: "owner", internalType: "address", type: "address" },
          { name: "to", internalType: "address", type: "address" },
          { name: "tokenIds", internalType: "uint256[]", type: "uint256[]" },
          { name: "quantities", internalType: "uint256[]", type: "uint256[]" },
          { name: "safeTransferData", internalType: "bytes", type: "bytes" },
          { name: "deadline", internalType: "uint256", type: "uint256" },
          { name: "nonce", internalType: "uint256", type: "uint256" }
        ]
      },
      { name: "signature", internalType: "bytes", type: "bytes" }
    ],
    name: "isValidSignatureTransferBatch",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [
      {
        name: "permit",
        internalType: "struct IZoraSparks1155Managed.PermitSingle",
        type: "tuple",
        components: [
          { name: "owner", internalType: "address", type: "address" },
          { name: "to", internalType: "address", type: "address" },
          { name: "tokenId", internalType: "uint256", type: "uint256" },
          { name: "quantity", internalType: "uint256", type: "uint256" },
          { name: "safeTransferData", internalType: "bytes", type: "bytes" },
          { name: "deadline", internalType: "uint256", type: "uint256" },
          { name: "nonce", internalType: "uint256", type: "uint256" }
        ]
      },
      { name: "signature", internalType: "bytes", type: "bytes" }
    ],
    name: "isValidSignatureTransferSingle",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [
      { name: "tokenId", internalType: "uint256", type: "uint256" },
      { name: "tokenAddress", internalType: "address", type: "address" },
      { name: "quantity", internalType: "uint256", type: "uint256" },
      { name: "recipient", internalType: "address", type: "address" },
      { name: "data", internalType: "bytes", type: "bytes" }
    ],
    name: "mintTokenWithERC20",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [
      { name: "tokenId", internalType: "uint256", type: "uint256" },
      { name: "quantity", internalType: "uint256", type: "uint256" },
      { name: "recipient", internalType: "address", type: "address" },
      { name: "data", internalType: "bytes", type: "bytes" }
    ],
    name: "mintTokenWithEth",
    outputs: [],
    stateMutability: "payable"
  },
  {
    type: "function",
    inputs: [],
    name: "name",
    outputs: [{ name: "", internalType: "string", type: "string" }],
    stateMutability: "pure"
  },
  {
    type: "function",
    inputs: [
      { name: "owner", internalType: "address", type: "address" },
      { name: "nonce", internalType: "uint256", type: "uint256" }
    ],
    name: "nonceUsed",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [
      { name: "newContractURI", internalType: "string", type: "string" },
      { name: "newBaseURI", internalType: "string", type: "string" }
    ],
    name: "notifyURIsUpdated",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [
      { name: "newUri", internalType: "string", type: "string" },
      { name: "tokenId", internalType: "uint256", type: "uint256" }
    ],
    name: "notifyUpdatedTokenURI",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [
      {
        name: "permit",
        internalType: "struct IZoraSparks1155Managed.PermitSingle",
        type: "tuple",
        components: [
          { name: "owner", internalType: "address", type: "address" },
          { name: "to", internalType: "address", type: "address" },
          { name: "tokenId", internalType: "uint256", type: "uint256" },
          { name: "quantity", internalType: "uint256", type: "uint256" },
          { name: "safeTransferData", internalType: "bytes", type: "bytes" },
          { name: "deadline", internalType: "uint256", type: "uint256" },
          { name: "nonce", internalType: "uint256", type: "uint256" }
        ]
      },
      { name: "signature", internalType: "bytes", type: "bytes" }
    ],
    name: "permitSafeTransfer",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [
      {
        name: "permit",
        internalType: "struct IZoraSparks1155Managed.PermitBatch",
        type: "tuple",
        components: [
          { name: "owner", internalType: "address", type: "address" },
          { name: "to", internalType: "address", type: "address" },
          { name: "tokenIds", internalType: "uint256[]", type: "uint256[]" },
          { name: "quantities", internalType: "uint256[]", type: "uint256[]" },
          { name: "safeTransferData", internalType: "bytes", type: "bytes" },
          { name: "deadline", internalType: "uint256", type: "uint256" },
          { name: "nonce", internalType: "uint256", type: "uint256" }
        ]
      },
      { name: "signature", internalType: "bytes", type: "bytes" }
    ],
    name: "permitSafeTransferBatch",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [
      { name: "tokenId", internalType: "uint256", type: "uint256" },
      { name: "quantity", internalType: "uint256", type: "uint256" },
      { name: "recipient", internalType: "address", type: "address" }
    ],
    name: "redeem",
    outputs: [
      {
        name: "",
        internalType: "struct Redemption",
        type: "tuple",
        components: [
          { name: "tokenAddress", internalType: "address", type: "address" },
          { name: "valueRedeemed", internalType: "uint256", type: "uint256" }
        ]
      }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [
      { name: "tokenIds", internalType: "uint256[]", type: "uint256[]" },
      { name: "quantities", internalType: "uint256[]", type: "uint256[]" },
      { name: "recipient", internalType: "address", type: "address" }
    ],
    name: "redeemBatch",
    outputs: [
      {
        name: "redemptions",
        internalType: "struct Redemption[]",
        type: "tuple[]",
        components: [
          { name: "tokenAddress", internalType: "address", type: "address" },
          { name: "valueRedeemed", internalType: "uint256", type: "uint256" }
        ]
      }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [
      { name: "from", internalType: "address", type: "address" },
      { name: "to", internalType: "address", type: "address" },
      { name: "ids", internalType: "uint256[]", type: "uint256[]" },
      { name: "values", internalType: "uint256[]", type: "uint256[]" },
      { name: "data", internalType: "bytes", type: "bytes" }
    ],
    name: "safeBatchTransferFrom",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [
      { name: "from", internalType: "address", type: "address" },
      { name: "to", internalType: "address", type: "address" },
      { name: "id", internalType: "uint256", type: "uint256" },
      { name: "value", internalType: "uint256", type: "uint256" },
      { name: "data", internalType: "bytes", type: "bytes" }
    ],
    name: "safeTransferFrom",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [
      { name: "operator", internalType: "address", type: "address" },
      { name: "approved", internalType: "bool", type: "bool" }
    ],
    name: "setApprovalForAll",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [
      { name: "newAuthority", internalType: "address", type: "address" }
    ],
    name: "setAuthority",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [{ name: "interfaceId", internalType: "bytes4", type: "bytes4" }],
    name: "supportsInterface",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "symbol",
    outputs: [{ name: "", internalType: "string", type: "string" }],
    stateMutability: "pure"
  },
  {
    type: "function",
    inputs: [{ name: "tokenId", internalType: "uint256", type: "uint256" }],
    name: "tokenExists",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [{ name: "tokenId", internalType: "uint256", type: "uint256" }],
    name: "tokenPrice",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [
      { name: "tokenIds", internalType: "uint256[]", type: "uint256[]" },
      { name: "quantities", internalType: "uint256[]", type: "uint256[]" },
      { name: "call", internalType: "bytes", type: "bytes" }
    ],
    name: "transferBatchToManagerAndCall",
    outputs: [{ name: "callReturn", internalType: "bytes", type: "bytes" }],
    stateMutability: "payable"
  },
  {
    type: "function",
    inputs: [{ name: "tokenId", internalType: "uint256", type: "uint256" }],
    name: "uri",
    outputs: [{ name: "", internalType: "string", type: "string" }],
    stateMutability: "view"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "account",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "operator",
        internalType: "address",
        type: "address",
        indexed: true
      },
      { name: "approved", internalType: "bool", type: "bool", indexed: false }
    ],
    name: "ApprovalForAll"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "authority",
        internalType: "address",
        type: "address",
        indexed: false
      }
    ],
    name: "AuthorityUpdated"
  },
  { type: "event", anonymous: false, inputs: [], name: "ContractURIUpdated" },
  { type: "event", anonymous: false, inputs: [], name: "EIP712DomainChanged" },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "tokenId",
        internalType: "uint256",
        type: "uint256",
        indexed: true
      },
      {
        name: "price",
        internalType: "uint256",
        type: "uint256",
        indexed: true
      },
      {
        name: "tokenAddress",
        internalType: "address",
        type: "address",
        indexed: true
      }
    ],
    name: "TokenCreated"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "operator",
        internalType: "address",
        type: "address",
        indexed: true
      },
      { name: "from", internalType: "address", type: "address", indexed: true },
      { name: "to", internalType: "address", type: "address", indexed: true },
      {
        name: "ids",
        internalType: "uint256[]",
        type: "uint256[]",
        indexed: false
      },
      {
        name: "values",
        internalType: "uint256[]",
        type: "uint256[]",
        indexed: false
      }
    ],
    name: "TransferBatch"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "operator",
        internalType: "address",
        type: "address",
        indexed: true
      },
      { name: "from", internalType: "address", type: "address", indexed: true },
      { name: "to", internalType: "address", type: "address", indexed: true },
      { name: "id", internalType: "uint256", type: "uint256", indexed: false },
      {
        name: "value",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      }
    ],
    name: "TransferSingle"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "value", internalType: "string", type: "string", indexed: false },
      { name: "id", internalType: "uint256", type: "uint256", indexed: true }
    ],
    name: "URI"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "contractURI",
        internalType: "string",
        type: "string",
        indexed: false
      },
      {
        name: "baseURI",
        internalType: "string",
        type: "string",
        indexed: false
      }
    ],
    name: "URIsUpdated"
  },
  {
    type: "error",
    inputs: [{ name: "authority", internalType: "address", type: "address" }],
    name: "AccessManagedInvalidAuthority"
  },
  {
    type: "error",
    inputs: [
      { name: "caller", internalType: "address", type: "address" },
      { name: "delay", internalType: "uint32", type: "uint32" }
    ],
    name: "AccessManagedRequiredDelay"
  },
  {
    type: "error",
    inputs: [{ name: "caller", internalType: "address", type: "address" }],
    name: "AccessManagedUnauthorized"
  },
  {
    type: "error",
    inputs: [{ name: "target", internalType: "address", type: "address" }],
    name: "AddressEmptyCode"
  },
  {
    type: "error",
    inputs: [{ name: "account", internalType: "address", type: "address" }],
    name: "AddressInsufficientBalance"
  },
  {
    type: "error",
    inputs: [
      { name: "lengthA", internalType: "uint256", type: "uint256" },
      { name: "lengthB", internalType: "uint256", type: "uint256" }
    ],
    name: "ArrayLengthMismatch"
  },
  {
    type: "error",
    inputs: [{ name: "returnData", internalType: "bytes", type: "bytes" }],
    name: "CallFailed"
  },
  {
    type: "error",
    inputs: [
      { name: "sender", internalType: "address", type: "address" },
      { name: "balance", internalType: "uint256", type: "uint256" },
      { name: "needed", internalType: "uint256", type: "uint256" },
      { name: "tokenId", internalType: "uint256", type: "uint256" }
    ],
    name: "ERC1155InsufficientBalance"
  },
  {
    type: "error",
    inputs: [{ name: "approver", internalType: "address", type: "address" }],
    name: "ERC1155InvalidApprover"
  },
  {
    type: "error",
    inputs: [
      { name: "idsLength", internalType: "uint256", type: "uint256" },
      { name: "valuesLength", internalType: "uint256", type: "uint256" }
    ],
    name: "ERC1155InvalidArrayLength"
  },
  {
    type: "error",
    inputs: [{ name: "operator", internalType: "address", type: "address" }],
    name: "ERC1155InvalidOperator"
  },
  {
    type: "error",
    inputs: [{ name: "receiver", internalType: "address", type: "address" }],
    name: "ERC1155InvalidReceiver"
  },
  {
    type: "error",
    inputs: [{ name: "sender", internalType: "address", type: "address" }],
    name: "ERC1155InvalidSender"
  },
  {
    type: "error",
    inputs: [
      { name: "operator", internalType: "address", type: "address" },
      { name: "owner", internalType: "address", type: "address" }
    ],
    name: "ERC1155MissingApprovalForAll"
  },
  { type: "error", inputs: [], name: "ERC20TransferSlippage" },
  {
    type: "error",
    inputs: [{ name: "deadline", internalType: "uint256", type: "uint256" }],
    name: "ERC2612ExpiredSignature"
  },
  { type: "error", inputs: [], name: "ETHTransferFailed" },
  { type: "error", inputs: [], name: "FailedInnerCall" },
  { type: "error", inputs: [], name: "IncorrectAmountSent" },
  {
    type: "error",
    inputs: [
      { name: "account", internalType: "address", type: "address" },
      { name: "currentNonce", internalType: "uint256", type: "uint256" }
    ],
    name: "InvalidAccountNonce"
  },
  { type: "error", inputs: [], name: "InvalidRecipient" },
  { type: "error", inputs: [], name: "InvalidShortString" },
  { type: "error", inputs: [], name: "InvalidSignature" },
  { type: "error", inputs: [], name: "InvalidTokenPrice" },
  { type: "error", inputs: [], name: "NoUriForNonexistentToken" },
  {
    type: "error",
    inputs: [{ name: "handler", internalType: "address", type: "address" }],
    name: "NotARedeemHandler"
  },
  {
    type: "error",
    inputs: [{ name: "token", internalType: "address", type: "address" }],
    name: "SafeERC20FailedOperation"
  },
  {
    type: "error",
    inputs: [{ name: "str", internalType: "string", type: "string" }],
    name: "StringTooLong"
  },
  { type: "error", inputs: [], name: "TokenAlreadyCreated" },
  { type: "error", inputs: [], name: "TokenDoesNotExist" },
  {
    type: "error",
    inputs: [
      { name: "storedTokenAddress", internalType: "address", type: "address" },
      {
        name: "expectedTokenAddress",
        internalType: "address",
        type: "address"
      }
    ],
    name: "TokenMismatch"
  },
  { type: "error", inputs: [], name: "TokenNotMintable" }
];
var zoraMints1155Address = {
  7777777: "0x7777777d57c1C6e472fa379b7b3B6c6ba3835073",
  999999999: "0x7777777d57c1C6e472fa379b7b3B6c6ba3835073"
};
var zoraMints1155Config = {
  address: zoraMints1155Address,
  abi: zoraMints1155ABI
};
var zoraMintsManagerImplABI = [
  {
    type: "constructor",
    inputs: [
      {
        name: "_premintExecutor",
        internalType: "contract IZoraCreator1155PremintExecutorAllVersions",
        type: "address"
      }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [],
    name: "UPGRADE_INTERFACE_VERSION",
    outputs: [{ name: "", internalType: "string", type: "string" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "acceptOwnership",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [
      { name: "callFrom", internalType: "address", type: "address" },
      { name: "tokenIds", internalType: "uint256[]", type: "uint256[]" },
      { name: "quantities", internalType: "uint256[]", type: "uint256[]" },
      { name: "call", internalType: "bytes", type: "bytes" }
    ],
    name: "callWithTransferTokens",
    outputs: [
      { name: "success", internalType: "bool", type: "bool" },
      { name: "result", internalType: "bytes", type: "bytes" }
    ],
    stateMutability: "payable"
  },
  {
    type: "function",
    inputs: [
      { name: "caller", internalType: "address", type: "address" },
      { name: "", internalType: "address", type: "address" },
      { name: "", internalType: "bytes4", type: "bytes4" }
    ],
    name: "canCall",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [
      {
        name: "zoraCreator1155Contract",
        internalType: "contract IMintWithSparks",
        type: "address"
      },
      { name: "minter", internalType: "contract IMinter1155", type: "address" },
      {
        name: "zoraCreator1155TokenId",
        internalType: "uint256",
        type: "uint256"
      },
      {
        name: "collectMintArguments",
        internalType: "struct ICollectWithZoraSparks.CollectMintArguments",
        type: "tuple",
        components: [
          {
            name: "mintRewardsRecipients",
            internalType: "address[]",
            type: "address[]"
          },
          { name: "minterArguments", internalType: "bytes", type: "bytes" },
          { name: "mintComment", internalType: "string", type: "string" }
        ]
      }
    ],
    name: "collect",
    outputs: [],
    stateMutability: "payable"
  },
  {
    type: "function",
    inputs: [
      {
        name: "contractConfig",
        internalType: "struct ContractWithAdditionalAdminsCreationConfig",
        type: "tuple",
        components: [
          { name: "contractAdmin", internalType: "address", type: "address" },
          { name: "contractURI", internalType: "string", type: "string" },
          { name: "contractName", internalType: "string", type: "string" },
          {
            name: "additionalAdmins",
            internalType: "address[]",
            type: "address[]"
          }
        ]
      },
      { name: "tokenContract", internalType: "address", type: "address" },
      {
        name: "premintConfig",
        internalType: "struct PremintConfigEncoded",
        type: "tuple",
        components: [
          { name: "uid", internalType: "uint32", type: "uint32" },
          { name: "version", internalType: "uint32", type: "uint32" },
          { name: "deleted", internalType: "bool", type: "bool" },
          { name: "tokenConfig", internalType: "bytes", type: "bytes" },
          {
            name: "premintConfigVersion",
            internalType: "bytes32",
            type: "bytes32"
          }
        ]
      },
      { name: "signature", internalType: "bytes", type: "bytes" },
      {
        name: "mintArguments",
        internalType: "struct MintArguments",
        type: "tuple",
        components: [
          { name: "mintRecipient", internalType: "address", type: "address" },
          { name: "mintComment", internalType: "string", type: "string" },
          {
            name: "mintRewardsRecipients",
            internalType: "address[]",
            type: "address[]"
          }
        ]
      },
      { name: "firstMinter", internalType: "address", type: "address" },
      { name: "signerContract", internalType: "address", type: "address" }
    ],
    name: "collectPremint",
    outputs: [
      {
        name: "result",
        internalType: "struct PremintResult",
        type: "tuple",
        components: [
          { name: "contractAddress", internalType: "address", type: "address" },
          { name: "tokenId", internalType: "uint256", type: "uint256" },
          { name: "createdNewContract", internalType: "bool", type: "bool" }
        ]
      }
    ],
    stateMutability: "payable"
  },
  {
    type: "function",
    inputs: [
      {
        name: "contractConfig",
        internalType: "struct ContractCreationConfig",
        type: "tuple",
        components: [
          { name: "contractAdmin", internalType: "address", type: "address" },
          { name: "contractURI", internalType: "string", type: "string" },
          { name: "contractName", internalType: "string", type: "string" }
        ]
      },
      {
        name: "premintConfig",
        internalType: "struct PremintConfigV2",
        type: "tuple",
        components: [
          {
            name: "tokenConfig",
            internalType: "struct TokenCreationConfigV2",
            type: "tuple",
            components: [
              { name: "tokenURI", internalType: "string", type: "string" },
              { name: "maxSupply", internalType: "uint256", type: "uint256" },
              {
                name: "maxTokensPerAddress",
                internalType: "uint64",
                type: "uint64"
              },
              { name: "pricePerToken", internalType: "uint96", type: "uint96" },
              { name: "mintStart", internalType: "uint64", type: "uint64" },
              { name: "mintDuration", internalType: "uint64", type: "uint64" },
              { name: "royaltyBPS", internalType: "uint32", type: "uint32" },
              {
                name: "payoutRecipient",
                internalType: "address",
                type: "address"
              },
              {
                name: "fixedPriceMinter",
                internalType: "address",
                type: "address"
              },
              {
                name: "createReferral",
                internalType: "address",
                type: "address"
              }
            ]
          },
          { name: "uid", internalType: "uint32", type: "uint32" },
          { name: "version", internalType: "uint32", type: "uint32" },
          { name: "deleted", internalType: "bool", type: "bool" }
        ]
      },
      { name: "signature", internalType: "bytes", type: "bytes" },
      {
        name: "mintArguments",
        internalType: "struct MintArguments",
        type: "tuple",
        components: [
          { name: "mintRecipient", internalType: "address", type: "address" },
          { name: "mintComment", internalType: "string", type: "string" },
          {
            name: "mintRewardsRecipients",
            internalType: "address[]",
            type: "address[]"
          }
        ]
      },
      { name: "signerContract", internalType: "address", type: "address" }
    ],
    name: "collectPremintV2",
    outputs: [
      {
        name: "result",
        internalType: "struct PremintResult",
        type: "tuple",
        components: [
          { name: "contractAddress", internalType: "address", type: "address" },
          { name: "tokenId", internalType: "uint256", type: "uint256" },
          { name: "createdNewContract", internalType: "bool", type: "bool" }
        ]
      }
    ],
    stateMutability: "payable"
  },
  {
    type: "function",
    inputs: [],
    name: "contractName",
    outputs: [{ name: "", internalType: "string", type: "string" }],
    stateMutability: "pure"
  },
  {
    type: "function",
    inputs: [],
    name: "contractURI",
    outputs: [{ name: "", internalType: "string", type: "string" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "contractVersion",
    outputs: [{ name: "", internalType: "string", type: "string" }],
    stateMutability: "pure"
  },
  {
    type: "function",
    inputs: [
      { name: "tokenId", internalType: "uint256", type: "uint256" },
      {
        name: "tokenConfig",
        internalType: "struct TokenConfig",
        type: "tuple",
        components: [
          { name: "price", internalType: "uint256", type: "uint256" },
          { name: "tokenAddress", internalType: "address", type: "address" },
          { name: "redeemHandler", internalType: "address", type: "address" }
        ]
      },
      { name: "defaultMintable", internalType: "bool", type: "bool" }
    ],
    name: "createToken",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [{ name: "minterArguments", internalType: "bytes", type: "bytes" }],
    name: "decodeMintRecipientAndComment",
    outputs: [
      { name: "mintTo", internalType: "address", type: "address" },
      { name: "mintComment", internalType: "string", type: "string" }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    inputs: [],
    name: "getEthPrice",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "implementation",
    outputs: [{ name: "", internalType: "address", type: "address" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [
      { name: "defaultOwner", internalType: "address", type: "address" },
      { name: "zoraSparksSalt", internalType: "bytes32", type: "bytes32" },
      { name: "zoraSparksCreationCode", internalType: "bytes", type: "bytes" },
      { name: "initialEthTokenId", internalType: "uint256", type: "uint256" },
      {
        name: "initialEthTokenPrice",
        internalType: "uint256",
        type: "uint256"
      },
      { name: "newBaseURI", internalType: "string", type: "string" },
      { name: "newContractURI", internalType: "string", type: "string" }
    ],
    name: "initialize",
    outputs: [
      {
        name: "mints",
        internalType: "contract IZoraSparks1155",
        type: "address"
      }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [
      { name: "tokenAddress", internalType: "address", type: "address" },
      { name: "quantity", internalType: "uint256", type: "uint256" },
      { name: "recipient", internalType: "address", type: "address" }
    ],
    name: "mintWithERC20",
    outputs: [
      { name: "mintableTokenId", internalType: "uint256", type: "uint256" }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [
      { name: "quantity", internalType: "uint256", type: "uint256" },
      { name: "recipient", internalType: "address", type: "address" }
    ],
    name: "mintWithEth",
    outputs: [
      { name: "mintableTokenId", internalType: "uint256", type: "uint256" }
    ],
    stateMutability: "payable"
  },
  {
    type: "function",
    inputs: [],
    name: "mintableEthToken",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [
      { name: "", internalType: "address", type: "address" },
      { name: "from", internalType: "address", type: "address" },
      { name: "ids", internalType: "uint256[]", type: "uint256[]" },
      { name: "values", internalType: "uint256[]", type: "uint256[]" },
      { name: "data", internalType: "bytes", type: "bytes" }
    ],
    name: "onERC1155BatchReceived",
    outputs: [{ name: "", internalType: "bytes4", type: "bytes4" }],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [
      { name: "", internalType: "address", type: "address" },
      { name: "from", internalType: "address", type: "address" },
      { name: "id", internalType: "uint256", type: "uint256" },
      { name: "value", internalType: "uint256", type: "uint256" },
      { name: "data", internalType: "bytes", type: "bytes" }
    ],
    name: "onERC1155Received",
    outputs: [{ name: "", internalType: "bytes4", type: "bytes4" }],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [],
    name: "owner",
    outputs: [{ name: "", internalType: "address", type: "address" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "pendingOwner",
    outputs: [{ name: "", internalType: "address", type: "address" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "proxiableUUID",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [
      { name: "tokenAddress", internalType: "address", type: "address" },
      { name: "tokenId", internalType: "uint256", type: "uint256" }
    ],
    name: "setDefaultMintable",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [
      { name: "newContractURI", internalType: "string", type: "string" },
      { name: "newBaseURI", internalType: "string", type: "string" },
      {
        name: "tokenIdsToNotifyUpdate",
        internalType: "uint256[]",
        type: "uint256[]"
      }
    ],
    name: "setMetadataURIs",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [{ name: "newOwner", internalType: "address", type: "address" }],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [
      { name: "newImplementation", internalType: "address", type: "address" },
      { name: "data", internalType: "bytes", type: "bytes" }
    ],
    name: "upgradeToAndCall",
    outputs: [],
    stateMutability: "payable"
  },
  {
    type: "function",
    inputs: [{ name: "tokenId", internalType: "uint256", type: "uint256" }],
    name: "uri",
    outputs: [{ name: "", internalType: "string", type: "string" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "zoraSparks1155",
    outputs: [
      { name: "", internalType: "contract IZoraSparks1155", type: "address" }
    ],
    stateMutability: "view"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "tokenIds",
        internalType: "uint256[]",
        type: "uint256[]",
        indexed: true
      },
      {
        name: "quantities",
        internalType: "uint256[]",
        type: "uint256[]",
        indexed: false
      },
      {
        name: "zoraCreator1155Contract",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "zoraCreator1155TokenId",
        internalType: "uint256",
        type: "uint256",
        indexed: true
      }
    ],
    name: "Collected"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "tokenAddress",
        internalType: "address",
        type: "address",
        indexed: false
      },
      {
        name: "tokenId",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      }
    ],
    name: "DefaultMintableTokenSet"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "version",
        internalType: "uint64",
        type: "uint64",
        indexed: false
      }
    ],
    name: "Initialized"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "sender",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "tokenContract",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "tokenId",
        internalType: "uint256",
        type: "uint256",
        indexed: true
      },
      {
        name: "quantity",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      },
      {
        name: "comment",
        internalType: "string",
        type: "string",
        indexed: false
      }
    ],
    name: "MintComment"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "previousOwner",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "newOwner",
        internalType: "address",
        type: "address",
        indexed: true
      }
    ],
    name: "OwnershipTransferStarted"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "previousOwner",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "newOwner",
        internalType: "address",
        type: "address",
        indexed: true
      }
    ],
    name: "OwnershipTransferred"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "contractURI",
        internalType: "string",
        type: "string",
        indexed: false
      },
      {
        name: "baseURI",
        internalType: "string",
        type: "string",
        indexed: false
      }
    ],
    name: "URIsUpdated"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "implementation",
        internalType: "address",
        type: "address",
        indexed: true
      }
    ],
    name: "Upgraded"
  },
  {
    type: "error",
    inputs: [{ name: "target", internalType: "address", type: "address" }],
    name: "AddressEmptyCode"
  },
  {
    type: "error",
    inputs: [{ name: "account", internalType: "address", type: "address" }],
    name: "AddressInsufficientBalance"
  },
  {
    type: "error",
    inputs: [
      { name: "lengthA", internalType: "uint256", type: "uint256" },
      { name: "lengthB", internalType: "uint256", type: "uint256" }
    ],
    name: "ArrayLengthMismatch"
  },
  {
    type: "error",
    inputs: [
      { name: "operator", internalType: "address", type: "address" },
      { name: "user", internalType: "address", type: "address" }
    ],
    name: "Burn_NotOwnerOrApproved"
  },
  {
    type: "error",
    inputs: [{ name: "reason", internalType: "bytes", type: "bytes" }],
    name: "CallFailed"
  },
  { type: "error", inputs: [], name: "Call_TokenIdMismatch" },
  { type: "error", inputs: [], name: "CallerNotZoraCreator1155" },
  {
    type: "error",
    inputs: [
      { name: "tokenId", internalType: "uint256", type: "uint256" },
      { name: "quantity", internalType: "uint256", type: "uint256" },
      { name: "totalMinted", internalType: "uint256", type: "uint256" },
      { name: "maxSupply", internalType: "uint256", type: "uint256" }
    ],
    name: "CannotMintMoreTokens"
  },
  {
    type: "error",
    inputs: [
      { name: "proposedAddress", internalType: "address", type: "address" }
    ],
    name: "Config_TransferHookNotSupported"
  },
  { type: "error", inputs: [], name: "Create2EmptyBytecode" },
  { type: "error", inputs: [], name: "Create2FailedDeployment" },
  {
    type: "error",
    inputs: [
      { name: "balance", internalType: "uint256", type: "uint256" },
      { name: "needed", internalType: "uint256", type: "uint256" }
    ],
    name: "Create2InsufficientBalance"
  },
  { type: "error", inputs: [], name: "DefaultOwnerCannotBeZero" },
  { type: "error", inputs: [], name: "ERC1155BatchReceivedCallFailed" },
  { type: "error", inputs: [], name: "ERC1155_MINT_TO_ZERO_ADDRESS" },
  {
    type: "error",
    inputs: [
      { name: "implementation", internalType: "address", type: "address" }
    ],
    name: "ERC1967InvalidImplementation"
  },
  { type: "error", inputs: [], name: "ERC1967NonPayable" },
  { type: "error", inputs: [], name: "ERC20TransferSlippage" },
  { type: "error", inputs: [], name: "ETHTransferFailed" },
  {
    type: "error",
    inputs: [
      { name: "recipient", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" }
    ],
    name: "ETHWithdrawFailed"
  },
  { type: "error", inputs: [], name: "FailedInnerCall" },
  { type: "error", inputs: [], name: "FirstMinterAddressZero" },
  {
    type: "error",
    inputs: [
      { name: "amount", internalType: "uint256", type: "uint256" },
      { name: "contractValue", internalType: "uint256", type: "uint256" }
    ],
    name: "FundsWithdrawInsolvent"
  },
  { type: "error", inputs: [], name: "IncorrectAmountSent" },
  { type: "error", inputs: [], name: "InvalidAdminAction" },
  { type: "error", inputs: [], name: "InvalidInitialization" },
  {
    type: "error",
    inputs: [
      { name: "mintTo", internalType: "address", type: "address" },
      { name: "merkleProof", internalType: "bytes32[]", type: "bytes32[]" },
      { name: "merkleRoot", internalType: "bytes32", type: "bytes32" }
    ],
    name: "InvalidMerkleProof"
  },
  { type: "error", inputs: [], name: "InvalidMintSchedule" },
  { type: "error", inputs: [], name: "InvalidOwnerForAssociatedZoraSparks" },
  { type: "error", inputs: [], name: "InvalidPremintVersion" },
  { type: "error", inputs: [], name: "InvalidRecipient" },
  { type: "error", inputs: [], name: "InvalidSignature" },
  { type: "error", inputs: [], name: "InvalidSignatureVersion" },
  {
    type: "error",
    inputs: [{ name: "magicValue", internalType: "bytes4", type: "bytes4" }],
    name: "InvalidSigner"
  },
  { type: "error", inputs: [], name: "InvalidTokenPrice" },
  { type: "error", inputs: [], name: "MintNotYetStarted" },
  { type: "error", inputs: [], name: "MintWithSparksNotSupportedOnContract" },
  { type: "error", inputs: [], name: "Mint_InsolventSaleTransfer" },
  { type: "error", inputs: [], name: "Mint_InvalidMintArrayLength" },
  { type: "error", inputs: [], name: "Mint_TokenIDMintNotAllowed" },
  { type: "error", inputs: [], name: "Mint_UnknownCommand" },
  { type: "error", inputs: [], name: "Mint_ValueTransferFail" },
  { type: "error", inputs: [], name: "MinterContractAlreadyExists" },
  { type: "error", inputs: [], name: "MinterContractDoesNotExist" },
  { type: "error", inputs: [], name: "NewOwnerNeedsToBeAdmin" },
  { type: "error", inputs: [], name: "NoTokensTransferred" },
  { type: "error", inputs: [], name: "NoUriForNonexistentToken" },
  { type: "error", inputs: [], name: "NonEthRedemption" },
  {
    type: "error",
    inputs: [{ name: "handler", internalType: "address", type: "address" }],
    name: "NotARedeemHandler"
  },
  { type: "error", inputs: [], name: "NotInitializing" },
  { type: "error", inputs: [], name: "NotSelfCall" },
  { type: "error", inputs: [], name: "NotZoraSparks1155" },
  { type: "error", inputs: [], name: "OnlyTransfersFromZoraSparks" },
  {
    type: "error",
    inputs: [{ name: "owner", internalType: "address", type: "address" }],
    name: "OwnableInvalidOwner"
  },
  {
    type: "error",
    inputs: [{ name: "account", internalType: "address", type: "address" }],
    name: "OwnableUnauthorizedAccount"
  },
  { type: "error", inputs: [], name: "PremintDeleted" },
  { type: "error", inputs: [], name: "PremintExecutorCannotBeZero" },
  {
    type: "error",
    inputs: [
      { name: "caller", internalType: "address", type: "address" },
      { name: "recipient", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" }
    ],
    name: "ProtocolRewardsWithdrawFailed"
  },
  { type: "error", inputs: [], name: "ReentrancyGuardReentrantCall" },
  { type: "error", inputs: [], name: "Renderer_NotValidRendererContract" },
  {
    type: "error",
    inputs: [{ name: "token", internalType: "address", type: "address" }],
    name: "SafeERC20FailedOperation"
  },
  { type: "error", inputs: [], name: "SaleEnded" },
  { type: "error", inputs: [], name: "SaleHasNotStarted" },
  {
    type: "error",
    inputs: [
      { name: "targetContract", internalType: "address", type: "address" }
    ],
    name: "Sale_CannotCallNonSalesContract"
  },
  { type: "error", inputs: [], name: "TokenAlreadyCreated" },
  { type: "error", inputs: [], name: "TokenDoesNotExist" },
  {
    type: "error",
    inputs: [
      { name: "expected", internalType: "uint256", type: "uint256" },
      { name: "actual", internalType: "uint256", type: "uint256" }
    ],
    name: "TokenIdMismatch"
  },
  {
    type: "error",
    inputs: [
      { name: "storedTokenAddress", internalType: "address", type: "address" },
      {
        name: "expectedTokenAddress",
        internalType: "address",
        type: "address"
      }
    ],
    name: "TokenMismatch"
  },
  { type: "error", inputs: [], name: "TokenNotMintable" },
  { type: "error", inputs: [], name: "UUPSUnauthorizedCallContext" },
  {
    type: "error",
    inputs: [{ name: "slot", internalType: "bytes32", type: "bytes32" }],
    name: "UUPSUnsupportedProxiableUUID"
  },
  {
    type: "error",
    inputs: [{ name: "selector", internalType: "bytes4", type: "bytes4" }],
    name: "UnknownUserAction"
  },
  {
    type: "error",
    inputs: [
      { name: "expected", internalType: "string", type: "string" },
      { name: "actual", internalType: "string", type: "string" }
    ],
    name: "UpgradeToMismatchedContractName"
  },
  {
    type: "error",
    inputs: [
      { name: "user", internalType: "address", type: "address" },
      { name: "limit", internalType: "uint256", type: "uint256" },
      { name: "requestedAmount", internalType: "uint256", type: "uint256" }
    ],
    name: "UserExceedsMintLimit"
  },
  {
    type: "error",
    inputs: [
      { name: "user", internalType: "address", type: "address" },
      { name: "tokenId", internalType: "uint256", type: "uint256" },
      { name: "role", internalType: "uint256", type: "uint256" }
    ],
    name: "UserMissingRoleForToken"
  },
  { type: "error", inputs: [], name: "WrongValueSent" },
  {
    type: "error",
    inputs: [],
    name: "premintSignerContractFailedToRecoverSigner"
  },
  { type: "error", inputs: [], name: "premintSignerContractNotAContract" }
];
var zoraMintsManagerImplAddress = {
  7777777: "0x77777770cA269366c7208aFcF36FE2C6F7f7608B",
  999999999: "0x77777770cA269366c7208aFcF36FE2C6F7f7608B"
};
var zoraMintsManagerImplConfig = {
  address: zoraMintsManagerImplAddress,
  abi: zoraMintsManagerImplABI
};
var zoraSparks1155ABI = [
  { type: "constructor", inputs: [], stateMutability: "nonpayable" },
  {
    type: "function",
    inputs: [],
    name: "ETH_ADDRESS",
    outputs: [{ name: "", internalType: "address", type: "address" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "MINIMUM_ERC20_PRICE",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "MINIMUM_ETH_PRICE",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "NAME",
    outputs: [{ name: "", internalType: "string", type: "string" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "VERSION",
    outputs: [{ name: "", internalType: "string", type: "string" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "authority",
    outputs: [{ name: "", internalType: "address", type: "address" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [
      { name: "account", internalType: "address", type: "address" },
      { name: "id", internalType: "uint256", type: "uint256" }
    ],
    name: "balanceOf",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [{ name: "account", internalType: "address", type: "address" }],
    name: "balanceOfAccount",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [
      { name: "accounts", internalType: "address[]", type: "address[]" },
      { name: "ids", internalType: "uint256[]", type: "uint256[]" }
    ],
    name: "balanceOfBatch",
    outputs: [{ name: "", internalType: "uint256[]", type: "uint256[]" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "contractURI",
    outputs: [{ name: "", internalType: "string", type: "string" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [
      { name: "tokenId", internalType: "uint256", type: "uint256" },
      {
        name: "tokenConfig",
        internalType: "struct TokenConfig",
        type: "tuple",
        components: [
          { name: "price", internalType: "uint256", type: "uint256" },
          { name: "tokenAddress", internalType: "address", type: "address" },
          { name: "redeemHandler", internalType: "address", type: "address" }
        ]
      }
    ],
    name: "createToken",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [],
    name: "eip712Domain",
    outputs: [
      { name: "fields", internalType: "bytes1", type: "bytes1" },
      { name: "name", internalType: "string", type: "string" },
      { name: "version", internalType: "string", type: "string" },
      { name: "chainId", internalType: "uint256", type: "uint256" },
      { name: "verifyingContract", internalType: "address", type: "address" },
      { name: "salt", internalType: "bytes32", type: "bytes32" },
      { name: "extensions", internalType: "uint256[]", type: "uint256[]" }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [{ name: "tokenId", internalType: "uint256", type: "uint256" }],
    name: "getTokenConfig",
    outputs: [
      {
        name: "",
        internalType: "struct TokenConfig",
        type: "tuple",
        components: [
          { name: "price", internalType: "uint256", type: "uint256" },
          { name: "tokenAddress", internalType: "address", type: "address" },
          { name: "redeemHandler", internalType: "address", type: "address" }
        ]
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [
      {
        name: "permit",
        internalType: "struct IZoraSparks1155Managed.PermitBatch",
        type: "tuple",
        components: [
          { name: "owner", internalType: "address", type: "address" },
          { name: "to", internalType: "address", type: "address" },
          { name: "tokenIds", internalType: "uint256[]", type: "uint256[]" },
          { name: "quantities", internalType: "uint256[]", type: "uint256[]" },
          { name: "safeTransferData", internalType: "bytes", type: "bytes" },
          { name: "deadline", internalType: "uint256", type: "uint256" },
          { name: "nonce", internalType: "uint256", type: "uint256" }
        ]
      }
    ],
    name: "hashPermitBatch",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [
      {
        name: "permit",
        internalType: "struct IZoraSparks1155Managed.PermitSingle",
        type: "tuple",
        components: [
          { name: "owner", internalType: "address", type: "address" },
          { name: "to", internalType: "address", type: "address" },
          { name: "tokenId", internalType: "uint256", type: "uint256" },
          { name: "quantity", internalType: "uint256", type: "uint256" },
          { name: "safeTransferData", internalType: "bytes", type: "bytes" },
          { name: "deadline", internalType: "uint256", type: "uint256" },
          { name: "nonce", internalType: "uint256", type: "uint256" }
        ]
      }
    ],
    name: "hashPermitSingle",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [
      { name: "account", internalType: "address", type: "address" },
      { name: "operator", internalType: "address", type: "address" }
    ],
    name: "isApprovedForAll",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "isConsumingScheduledOp",
    outputs: [{ name: "", internalType: "bytes4", type: "bytes4" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [
      {
        name: "permit",
        internalType: "struct IZoraSparks1155Managed.PermitBatch",
        type: "tuple",
        components: [
          { name: "owner", internalType: "address", type: "address" },
          { name: "to", internalType: "address", type: "address" },
          { name: "tokenIds", internalType: "uint256[]", type: "uint256[]" },
          { name: "quantities", internalType: "uint256[]", type: "uint256[]" },
          { name: "safeTransferData", internalType: "bytes", type: "bytes" },
          { name: "deadline", internalType: "uint256", type: "uint256" },
          { name: "nonce", internalType: "uint256", type: "uint256" }
        ]
      },
      { name: "signature", internalType: "bytes", type: "bytes" }
    ],
    name: "isValidSignatureTransferBatch",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [
      {
        name: "permit",
        internalType: "struct IZoraSparks1155Managed.PermitSingle",
        type: "tuple",
        components: [
          { name: "owner", internalType: "address", type: "address" },
          { name: "to", internalType: "address", type: "address" },
          { name: "tokenId", internalType: "uint256", type: "uint256" },
          { name: "quantity", internalType: "uint256", type: "uint256" },
          { name: "safeTransferData", internalType: "bytes", type: "bytes" },
          { name: "deadline", internalType: "uint256", type: "uint256" },
          { name: "nonce", internalType: "uint256", type: "uint256" }
        ]
      },
      { name: "signature", internalType: "bytes", type: "bytes" }
    ],
    name: "isValidSignatureTransferSingle",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [
      { name: "tokenId", internalType: "uint256", type: "uint256" },
      { name: "tokenAddress", internalType: "address", type: "address" },
      { name: "quantity", internalType: "uint256", type: "uint256" },
      { name: "recipient", internalType: "address", type: "address" },
      { name: "data", internalType: "bytes", type: "bytes" }
    ],
    name: "mintTokenWithERC20",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [
      { name: "tokenId", internalType: "uint256", type: "uint256" },
      { name: "quantity", internalType: "uint256", type: "uint256" },
      { name: "recipient", internalType: "address", type: "address" },
      { name: "data", internalType: "bytes", type: "bytes" }
    ],
    name: "mintTokenWithEth",
    outputs: [],
    stateMutability: "payable"
  },
  {
    type: "function",
    inputs: [],
    name: "name",
    outputs: [{ name: "", internalType: "string", type: "string" }],
    stateMutability: "pure"
  },
  {
    type: "function",
    inputs: [
      { name: "owner", internalType: "address", type: "address" },
      { name: "nonce", internalType: "uint256", type: "uint256" }
    ],
    name: "nonceUsed",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [
      { name: "newContractURI", internalType: "string", type: "string" },
      { name: "newBaseURI", internalType: "string", type: "string" }
    ],
    name: "notifyURIsUpdated",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [
      { name: "newUri", internalType: "string", type: "string" },
      { name: "tokenId", internalType: "uint256", type: "uint256" }
    ],
    name: "notifyUpdatedTokenURI",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [
      {
        name: "permit",
        internalType: "struct IZoraSparks1155Managed.PermitSingle",
        type: "tuple",
        components: [
          { name: "owner", internalType: "address", type: "address" },
          { name: "to", internalType: "address", type: "address" },
          { name: "tokenId", internalType: "uint256", type: "uint256" },
          { name: "quantity", internalType: "uint256", type: "uint256" },
          { name: "safeTransferData", internalType: "bytes", type: "bytes" },
          { name: "deadline", internalType: "uint256", type: "uint256" },
          { name: "nonce", internalType: "uint256", type: "uint256" }
        ]
      },
      { name: "signature", internalType: "bytes", type: "bytes" }
    ],
    name: "permitSafeTransfer",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [
      {
        name: "permit",
        internalType: "struct IZoraSparks1155Managed.PermitBatch",
        type: "tuple",
        components: [
          { name: "owner", internalType: "address", type: "address" },
          { name: "to", internalType: "address", type: "address" },
          { name: "tokenIds", internalType: "uint256[]", type: "uint256[]" },
          { name: "quantities", internalType: "uint256[]", type: "uint256[]" },
          { name: "safeTransferData", internalType: "bytes", type: "bytes" },
          { name: "deadline", internalType: "uint256", type: "uint256" },
          { name: "nonce", internalType: "uint256", type: "uint256" }
        ]
      },
      { name: "signature", internalType: "bytes", type: "bytes" }
    ],
    name: "permitSafeTransferBatch",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [
      { name: "tokenId", internalType: "uint256", type: "uint256" },
      { name: "quantity", internalType: "uint256", type: "uint256" },
      { name: "recipient", internalType: "address", type: "address" }
    ],
    name: "redeem",
    outputs: [
      {
        name: "",
        internalType: "struct Redemption",
        type: "tuple",
        components: [
          { name: "tokenAddress", internalType: "address", type: "address" },
          { name: "valueRedeemed", internalType: "uint256", type: "uint256" }
        ]
      }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [
      { name: "tokenIds", internalType: "uint256[]", type: "uint256[]" },
      { name: "quantities", internalType: "uint256[]", type: "uint256[]" },
      { name: "recipient", internalType: "address", type: "address" }
    ],
    name: "redeemBatch",
    outputs: [
      {
        name: "redemptions",
        internalType: "struct Redemption[]",
        type: "tuple[]",
        components: [
          { name: "tokenAddress", internalType: "address", type: "address" },
          { name: "valueRedeemed", internalType: "uint256", type: "uint256" }
        ]
      }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [
      { name: "from", internalType: "address", type: "address" },
      { name: "to", internalType: "address", type: "address" },
      { name: "ids", internalType: "uint256[]", type: "uint256[]" },
      { name: "values", internalType: "uint256[]", type: "uint256[]" },
      { name: "data", internalType: "bytes", type: "bytes" }
    ],
    name: "safeBatchTransferFrom",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [
      { name: "from", internalType: "address", type: "address" },
      { name: "to", internalType: "address", type: "address" },
      { name: "id", internalType: "uint256", type: "uint256" },
      { name: "value", internalType: "uint256", type: "uint256" },
      { name: "data", internalType: "bytes", type: "bytes" }
    ],
    name: "safeTransferFrom",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [
      { name: "operator", internalType: "address", type: "address" },
      { name: "approved", internalType: "bool", type: "bool" }
    ],
    name: "setApprovalForAll",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [
      { name: "newAuthority", internalType: "address", type: "address" }
    ],
    name: "setAuthority",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [{ name: "interfaceId", internalType: "bytes4", type: "bytes4" }],
    name: "supportsInterface",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "symbol",
    outputs: [{ name: "", internalType: "string", type: "string" }],
    stateMutability: "pure"
  },
  {
    type: "function",
    inputs: [{ name: "tokenId", internalType: "uint256", type: "uint256" }],
    name: "tokenExists",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [{ name: "tokenId", internalType: "uint256", type: "uint256" }],
    name: "tokenPrice",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [{ name: "tokenId", internalType: "uint256", type: "uint256" }],
    name: "uri",
    outputs: [{ name: "", internalType: "string", type: "string" }],
    stateMutability: "view"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "account",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "operator",
        internalType: "address",
        type: "address",
        indexed: true
      },
      { name: "approved", internalType: "bool", type: "bool", indexed: false }
    ],
    name: "ApprovalForAll"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "authority",
        internalType: "address",
        type: "address",
        indexed: false
      }
    ],
    name: "AuthorityUpdated"
  },
  { type: "event", anonymous: false, inputs: [], name: "ContractURIUpdated" },
  { type: "event", anonymous: false, inputs: [], name: "EIP712DomainChanged" },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "tokenId",
        internalType: "uint256",
        type: "uint256",
        indexed: true
      },
      {
        name: "price",
        internalType: "uint256",
        type: "uint256",
        indexed: true
      },
      {
        name: "tokenAddress",
        internalType: "address",
        type: "address",
        indexed: true
      }
    ],
    name: "TokenCreated"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "operator",
        internalType: "address",
        type: "address",
        indexed: true
      },
      { name: "from", internalType: "address", type: "address", indexed: true },
      { name: "to", internalType: "address", type: "address", indexed: true },
      {
        name: "ids",
        internalType: "uint256[]",
        type: "uint256[]",
        indexed: false
      },
      {
        name: "values",
        internalType: "uint256[]",
        type: "uint256[]",
        indexed: false
      }
    ],
    name: "TransferBatch"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "from",
        internalType: "address",
        type: "address",
        indexed: false
      },
      { name: "to", internalType: "address", type: "address", indexed: false },
      {
        name: "tokenIds",
        internalType: "uint256[]",
        type: "uint256[]",
        indexed: false
      },
      {
        name: "quantities",
        internalType: "uint256[]",
        type: "uint256[]",
        indexed: false
      },
      { name: "data", internalType: "bytes", type: "bytes", indexed: false }
    ],
    name: "TransferBatchWithData"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "operator",
        internalType: "address",
        type: "address",
        indexed: true
      },
      { name: "from", internalType: "address", type: "address", indexed: true },
      { name: "to", internalType: "address", type: "address", indexed: true },
      { name: "id", internalType: "uint256", type: "uint256", indexed: false },
      {
        name: "value",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      }
    ],
    name: "TransferSingle"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "from",
        internalType: "address",
        type: "address",
        indexed: false
      },
      { name: "to", internalType: "address", type: "address", indexed: false },
      {
        name: "tokenId",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      },
      {
        name: "quantity",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      },
      { name: "data", internalType: "bytes", type: "bytes", indexed: false }
    ],
    name: "TransferSingleWithData"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "value", internalType: "string", type: "string", indexed: false },
      { name: "id", internalType: "uint256", type: "uint256", indexed: true }
    ],
    name: "URI"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "contractURI",
        internalType: "string",
        type: "string",
        indexed: false
      },
      {
        name: "baseURI",
        internalType: "string",
        type: "string",
        indexed: false
      }
    ],
    name: "URIsUpdated"
  },
  {
    type: "error",
    inputs: [{ name: "authority", internalType: "address", type: "address" }],
    name: "AccessManagedInvalidAuthority"
  },
  {
    type: "error",
    inputs: [
      { name: "caller", internalType: "address", type: "address" },
      { name: "delay", internalType: "uint32", type: "uint32" }
    ],
    name: "AccessManagedRequiredDelay"
  },
  {
    type: "error",
    inputs: [{ name: "caller", internalType: "address", type: "address" }],
    name: "AccessManagedUnauthorized"
  },
  {
    type: "error",
    inputs: [{ name: "target", internalType: "address", type: "address" }],
    name: "AddressEmptyCode"
  },
  {
    type: "error",
    inputs: [{ name: "account", internalType: "address", type: "address" }],
    name: "AddressInsufficientBalance"
  },
  {
    type: "error",
    inputs: [
      { name: "lengthA", internalType: "uint256", type: "uint256" },
      { name: "lengthB", internalType: "uint256", type: "uint256" }
    ],
    name: "ArrayLengthMismatch"
  },
  {
    type: "error",
    inputs: [{ name: "returnData", internalType: "bytes", type: "bytes" }],
    name: "CallFailed"
  },
  {
    type: "error",
    inputs: [
      { name: "sender", internalType: "address", type: "address" },
      { name: "balance", internalType: "uint256", type: "uint256" },
      { name: "needed", internalType: "uint256", type: "uint256" },
      { name: "tokenId", internalType: "uint256", type: "uint256" }
    ],
    name: "ERC1155InsufficientBalance"
  },
  {
    type: "error",
    inputs: [{ name: "approver", internalType: "address", type: "address" }],
    name: "ERC1155InvalidApprover"
  },
  {
    type: "error",
    inputs: [
      { name: "idsLength", internalType: "uint256", type: "uint256" },
      { name: "valuesLength", internalType: "uint256", type: "uint256" }
    ],
    name: "ERC1155InvalidArrayLength"
  },
  {
    type: "error",
    inputs: [{ name: "operator", internalType: "address", type: "address" }],
    name: "ERC1155InvalidOperator"
  },
  {
    type: "error",
    inputs: [{ name: "receiver", internalType: "address", type: "address" }],
    name: "ERC1155InvalidReceiver"
  },
  {
    type: "error",
    inputs: [{ name: "sender", internalType: "address", type: "address" }],
    name: "ERC1155InvalidSender"
  },
  {
    type: "error",
    inputs: [
      { name: "operator", internalType: "address", type: "address" },
      { name: "owner", internalType: "address", type: "address" }
    ],
    name: "ERC1155MissingApprovalForAll"
  },
  { type: "error", inputs: [], name: "ERC20TransferSlippage" },
  {
    type: "error",
    inputs: [{ name: "deadline", internalType: "uint256", type: "uint256" }],
    name: "ERC2612ExpiredSignature"
  },
  { type: "error", inputs: [], name: "ETHTransferFailed" },
  { type: "error", inputs: [], name: "FailedInnerCall" },
  { type: "error", inputs: [], name: "IncorrectAmountSent" },
  {
    type: "error",
    inputs: [
      { name: "account", internalType: "address", type: "address" },
      { name: "currentNonce", internalType: "uint256", type: "uint256" }
    ],
    name: "InvalidAccountNonce"
  },
  { type: "error", inputs: [], name: "InvalidRecipient" },
  { type: "error", inputs: [], name: "InvalidShortString" },
  { type: "error", inputs: [], name: "InvalidSignature" },
  { type: "error", inputs: [], name: "InvalidTokenPrice" },
  { type: "error", inputs: [], name: "NoUriForNonexistentToken" },
  {
    type: "error",
    inputs: [{ name: "handler", internalType: "address", type: "address" }],
    name: "NotARedeemHandler"
  },
  {
    type: "error",
    inputs: [{ name: "token", internalType: "address", type: "address" }],
    name: "SafeERC20FailedOperation"
  },
  {
    type: "error",
    inputs: [{ name: "str", internalType: "string", type: "string" }],
    name: "StringTooLong"
  },
  { type: "error", inputs: [], name: "TokenAlreadyCreated" },
  { type: "error", inputs: [], name: "TokenDoesNotExist" },
  {
    type: "error",
    inputs: [
      { name: "storedTokenAddress", internalType: "address", type: "address" },
      {
        name: "expectedTokenAddress",
        internalType: "address",
        type: "address"
      }
    ],
    name: "TokenMismatch"
  },
  { type: "error", inputs: [], name: "TokenNotMintable" }
];
var zoraSparks1155Address = {
  8453: "0x7777777b3eA6C126942BB14dD5C3C11D365C385D",
  84532: "0x7777777b3eA6C126942BB14dD5C3C11D365C385D",
  7777777: "0x7777777b3eA6C126942BB14dD5C3C11D365C385D",
  999999999: "0x7777777b3eA6C126942BB14dD5C3C11D365C385D"
};
var zoraSparks1155Config = {
  address: zoraSparks1155Address,
  abi: zoraSparks1155ABI
};
var zoraSparksManagerImplABI = [
  { type: "constructor", inputs: [], stateMutability: "nonpayable" },
  {
    type: "function",
    inputs: [],
    name: "UPGRADE_INTERFACE_VERSION",
    outputs: [{ name: "", internalType: "string", type: "string" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "acceptOwnership",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [
      { name: "caller", internalType: "address", type: "address" },
      { name: "", internalType: "address", type: "address" },
      { name: "", internalType: "bytes4", type: "bytes4" }
    ],
    name: "canCall",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "contractName",
    outputs: [{ name: "", internalType: "string", type: "string" }],
    stateMutability: "pure"
  },
  {
    type: "function",
    inputs: [],
    name: "contractURI",
    outputs: [{ name: "", internalType: "string", type: "string" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "contractVersion",
    outputs: [{ name: "", internalType: "string", type: "string" }],
    stateMutability: "pure"
  },
  {
    type: "function",
    inputs: [
      { name: "tokenId", internalType: "uint256", type: "uint256" },
      {
        name: "tokenConfig",
        internalType: "struct TokenConfig",
        type: "tuple",
        components: [
          { name: "price", internalType: "uint256", type: "uint256" },
          { name: "tokenAddress", internalType: "address", type: "address" },
          { name: "redeemHandler", internalType: "address", type: "address" }
        ]
      }
    ],
    name: "createToken",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [],
    name: "implementation",
    outputs: [{ name: "", internalType: "address", type: "address" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [
      { name: "defaultOwner", internalType: "address", type: "address" },
      { name: "zoraSparksSalt", internalType: "bytes32", type: "bytes32" },
      { name: "zoraSparksCreationCode", internalType: "bytes", type: "bytes" },
      { name: "initialEthTokenId", internalType: "uint256", type: "uint256" },
      {
        name: "initialEthTokenPrice",
        internalType: "uint256",
        type: "uint256"
      },
      { name: "newBaseURI", internalType: "string", type: "string" },
      { name: "newContractURI", internalType: "string", type: "string" }
    ],
    name: "initialize",
    outputs: [
      {
        name: "sparks",
        internalType: "contract IZoraSparks1155",
        type: "address"
      }
    ],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [
      { name: "tokenId", internalType: "uint256", type: "uint256" },
      { name: "tokenAddress", internalType: "address", type: "address" },
      { name: "quantity", internalType: "uint256", type: "uint256" },
      { name: "recipient", internalType: "address", type: "address" }
    ],
    name: "mintWithERC20",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [
      { name: "tokenId", internalType: "uint256", type: "uint256" },
      { name: "quantity", internalType: "uint256", type: "uint256" },
      { name: "recipient", internalType: "address", type: "address" }
    ],
    name: "mintWithEth",
    outputs: [],
    stateMutability: "payable"
  },
  {
    type: "function",
    inputs: [],
    name: "owner",
    outputs: [{ name: "", internalType: "address", type: "address" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "pendingOwner",
    outputs: [{ name: "", internalType: "address", type: "address" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "proxiableUUID",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [
      { name: "newContractURI", internalType: "string", type: "string" },
      { name: "newBaseURI", internalType: "string", type: "string" },
      {
        name: "tokenIdsToNotifyUpdate",
        internalType: "uint256[]",
        type: "uint256[]"
      }
    ],
    name: "setMetadataURIs",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [{ name: "newOwner", internalType: "address", type: "address" }],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [
      { name: "newImplementation", internalType: "address", type: "address" },
      { name: "data", internalType: "bytes", type: "bytes" }
    ],
    name: "upgradeToAndCall",
    outputs: [],
    stateMutability: "payable"
  },
  {
    type: "function",
    inputs: [{ name: "tokenId", internalType: "uint256", type: "uint256" }],
    name: "uri",
    outputs: [{ name: "", internalType: "string", type: "string" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "zoraSparks1155",
    outputs: [
      { name: "", internalType: "contract IZoraSparks1155", type: "address" }
    ],
    stateMutability: "view"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "version",
        internalType: "uint64",
        type: "uint64",
        indexed: false
      }
    ],
    name: "Initialized"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "previousOwner",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "newOwner",
        internalType: "address",
        type: "address",
        indexed: true
      }
    ],
    name: "OwnershipTransferStarted"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "previousOwner",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "newOwner",
        internalType: "address",
        type: "address",
        indexed: true
      }
    ],
    name: "OwnershipTransferred"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "contractURI",
        internalType: "string",
        type: "string",
        indexed: false
      },
      {
        name: "baseURI",
        internalType: "string",
        type: "string",
        indexed: false
      }
    ],
    name: "URIsUpdated"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "implementation",
        internalType: "address",
        type: "address",
        indexed: true
      }
    ],
    name: "Upgraded"
  },
  {
    type: "error",
    inputs: [{ name: "target", internalType: "address", type: "address" }],
    name: "AddressEmptyCode"
  },
  {
    type: "error",
    inputs: [{ name: "account", internalType: "address", type: "address" }],
    name: "AddressInsufficientBalance"
  },
  {
    type: "error",
    inputs: [
      { name: "lengthA", internalType: "uint256", type: "uint256" },
      { name: "lengthB", internalType: "uint256", type: "uint256" }
    ],
    name: "ArrayLengthMismatch"
  },
  { type: "error", inputs: [], name: "Create2EmptyBytecode" },
  { type: "error", inputs: [], name: "Create2FailedDeployment" },
  {
    type: "error",
    inputs: [
      { name: "balance", internalType: "uint256", type: "uint256" },
      { name: "needed", internalType: "uint256", type: "uint256" }
    ],
    name: "Create2InsufficientBalance"
  },
  { type: "error", inputs: [], name: "DefaultOwnerCannotBeZero" },
  {
    type: "error",
    inputs: [
      { name: "implementation", internalType: "address", type: "address" }
    ],
    name: "ERC1967InvalidImplementation"
  },
  { type: "error", inputs: [], name: "ERC1967NonPayable" },
  { type: "error", inputs: [], name: "ERC20TransferSlippage" },
  { type: "error", inputs: [], name: "ETHTransferFailed" },
  { type: "error", inputs: [], name: "FailedInnerCall" },
  { type: "error", inputs: [], name: "IncorrectAmountSent" },
  { type: "error", inputs: [], name: "InvalidAdminAction" },
  { type: "error", inputs: [], name: "InvalidInitialization" },
  { type: "error", inputs: [], name: "InvalidOwnerForAssociatedZoraSparks" },
  { type: "error", inputs: [], name: "InvalidRecipient" },
  { type: "error", inputs: [], name: "InvalidTokenPrice" },
  { type: "error", inputs: [], name: "NoUriForNonexistentToken" },
  {
    type: "error",
    inputs: [{ name: "handler", internalType: "address", type: "address" }],
    name: "NotARedeemHandler"
  },
  { type: "error", inputs: [], name: "NotInitializing" },
  {
    type: "error",
    inputs: [{ name: "owner", internalType: "address", type: "address" }],
    name: "OwnableInvalidOwner"
  },
  {
    type: "error",
    inputs: [{ name: "account", internalType: "address", type: "address" }],
    name: "OwnableUnauthorizedAccount"
  },
  { type: "error", inputs: [], name: "PremintExecutorCannotBeZero" },
  { type: "error", inputs: [], name: "ReentrancyGuardReentrantCall" },
  {
    type: "error",
    inputs: [{ name: "token", internalType: "address", type: "address" }],
    name: "SafeERC20FailedOperation"
  },
  { type: "error", inputs: [], name: "TokenAlreadyCreated" },
  { type: "error", inputs: [], name: "TokenDoesNotExist" },
  {
    type: "error",
    inputs: [
      { name: "storedTokenAddress", internalType: "address", type: "address" },
      {
        name: "expectedTokenAddress",
        internalType: "address",
        type: "address"
      }
    ],
    name: "TokenMismatch"
  },
  { type: "error", inputs: [], name: "TokenNotMintable" },
  { type: "error", inputs: [], name: "UUPSUnauthorizedCallContext" },
  {
    type: "error",
    inputs: [{ name: "slot", internalType: "bytes32", type: "bytes32" }],
    name: "UUPSUnsupportedProxiableUUID"
  },
  {
    type: "error",
    inputs: [
      { name: "expected", internalType: "string", type: "string" },
      { name: "actual", internalType: "string", type: "string" }
    ],
    name: "UpgradeToMismatchedContractName"
  }
];
var zoraSparksManagerImplAddress = {
  8453: "0x77777779acd6a96C0c57272112921A0b833c38fD",
  84532: "0x77777779acd6a96C0c57272112921A0b833c38fD",
  7777777: "0x77777779acd6a96C0c57272112921A0b833c38fD",
  999999999: "0x77777779acd6a96C0c57272112921A0b833c38fD"
};
var zoraSparksManagerImplConfig = {
  address: zoraSparksManagerImplAddress,
  abi: zoraSparksManagerImplABI
};
var zoraTimedSaleStrategyABI = [
  { type: "constructor", inputs: [], stateMutability: "nonpayable" },
  {
    type: "function",
    inputs: [],
    name: "UPGRADE_INTERFACE_VERSION",
    outputs: [{ name: "", internalType: "string", type: "string" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "acceptOwnership",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [
      { name: "collection", internalType: "address", type: "address" },
      { name: "tokenId", internalType: "uint256", type: "uint256" },
      { name: "erc20zAddress", internalType: "address", type: "address" }
    ],
    name: "calculateERC20zActivate",
    outputs: [
      {
        name: "",
        internalType: "struct IZoraTimedSaleStrategy.ERC20zActivate",
        type: "tuple",
        components: [
          {
            name: "finalTotalERC20ZSupply",
            internalType: "uint256",
            type: "uint256"
          },
          { name: "erc20Reserve", internalType: "uint256", type: "uint256" },
          { name: "erc20Liquidity", internalType: "uint256", type: "uint256" },
          { name: "excessERC20", internalType: "uint256", type: "uint256" },
          { name: "excessERC1155", internalType: "uint256", type: "uint256" },
          {
            name: "additionalERC1155ToMint",
            internalType: "uint256",
            type: "uint256"
          },
          { name: "final1155Supply", internalType: "uint256", type: "uint256" }
        ]
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [{ name: "quantity", internalType: "uint256", type: "uint256" }],
    name: "computeRewards",
    outputs: [
      {
        name: "",
        internalType: "struct IZoraTimedSaleStrategy.RewardsSettings",
        type: "tuple",
        components: [
          { name: "totalReward", internalType: "uint256", type: "uint256" },
          { name: "creatorReward", internalType: "uint256", type: "uint256" },
          {
            name: "createReferralReward",
            internalType: "uint256",
            type: "uint256"
          },
          {
            name: "mintReferralReward",
            internalType: "uint256",
            type: "uint256"
          },
          { name: "marketReward", internalType: "uint256", type: "uint256" },
          { name: "zoraReward", internalType: "uint256", type: "uint256" }
        ]
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    inputs: [{ name: "quantity", internalType: "uint256", type: "uint256" }],
    name: "computeRewardsV2",
    outputs: [
      {
        name: "",
        internalType: "struct IZoraTimedSaleStrategy.RewardsSettings",
        type: "tuple",
        components: [
          { name: "totalReward", internalType: "uint256", type: "uint256" },
          { name: "creatorReward", internalType: "uint256", type: "uint256" },
          {
            name: "createReferralReward",
            internalType: "uint256",
            type: "uint256"
          },
          {
            name: "mintReferralReward",
            internalType: "uint256",
            type: "uint256"
          },
          { name: "marketReward", internalType: "uint256", type: "uint256" },
          { name: "zoraReward", internalType: "uint256", type: "uint256" }
        ]
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    inputs: [],
    name: "contractName",
    outputs: [{ name: "", internalType: "string", type: "string" }],
    stateMutability: "pure"
  },
  {
    type: "function",
    inputs: [],
    name: "contractURI",
    outputs: [{ name: "", internalType: "string", type: "string" }],
    stateMutability: "pure"
  },
  {
    type: "function",
    inputs: [],
    name: "contractVersion",
    outputs: [{ name: "", internalType: "string", type: "string" }],
    stateMutability: "pure"
  },
  {
    type: "function",
    inputs: [],
    name: "erc20zImpl",
    outputs: [{ name: "", internalType: "address", type: "address" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [
      { name: "collection", internalType: "address", type: "address" },
      { name: "tokenId", internalType: "uint256", type: "uint256" }
    ],
    name: "getCreateReferral",
    outputs: [
      { name: "createReferral", internalType: "address", type: "address" }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "implementation",
    outputs: [{ name: "", internalType: "address", type: "address" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [
      { name: "_defaultOwner", internalType: "address", type: "address" },
      {
        name: "_zoraRewardRecipient",
        internalType: "address",
        type: "address"
      },
      { name: "_erc20zImpl", internalType: "address", type: "address" },
      {
        name: "_protocolRewards",
        internalType: "contract IProtocolRewards",
        type: "address"
      }
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [
      { name: "collection", internalType: "address", type: "address" },
      { name: "tokenId", internalType: "uint256", type: "uint256" }
    ],
    name: "launchMarket",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [
      { name: "mintTo", internalType: "address", type: "address" },
      { name: "quantity", internalType: "uint256", type: "uint256" },
      { name: "collection", internalType: "address", type: "address" },
      { name: "tokenId", internalType: "uint256", type: "uint256" },
      { name: "mintReferral", internalType: "address", type: "address" },
      { name: "comment", internalType: "string", type: "string" }
    ],
    name: "mint",
    outputs: [],
    stateMutability: "payable"
  },
  {
    type: "function",
    inputs: [],
    name: "owner",
    outputs: [{ name: "", internalType: "address", type: "address" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "pendingOwner",
    outputs: [{ name: "", internalType: "address", type: "address" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "protocolRewards",
    outputs: [
      { name: "", internalType: "contract IProtocolRewards", type: "address" }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "proxiableUUID",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [
      { name: "", internalType: "address", type: "address" },
      { name: "", internalType: "uint256", type: "uint256" },
      { name: "", internalType: "uint256", type: "uint256" },
      { name: "", internalType: "uint256", type: "uint256" },
      { name: "", internalType: "bytes", type: "bytes" }
    ],
    name: "requestMint",
    outputs: [
      {
        name: "",
        internalType: "struct ICreatorCommands.CommandSet",
        type: "tuple",
        components: [
          {
            name: "commands",
            internalType: "struct ICreatorCommands.Command[]",
            type: "tuple[]",
            components: [
              {
                name: "method",
                internalType: "enum ICreatorCommands.CreatorActions",
                type: "uint8"
              },
              { name: "args", internalType: "bytes", type: "bytes" }
            ]
          },
          { name: "at", internalType: "uint256", type: "uint256" }
        ]
      }
    ],
    stateMutability: "pure"
  },
  {
    type: "function",
    inputs: [
      { name: "collection", internalType: "address", type: "address" },
      { name: "tokenId", internalType: "uint256", type: "uint256" }
    ],
    name: "sale",
    outputs: [
      {
        name: "",
        internalType: "struct IZoraTimedSaleStrategy.SaleStorage",
        type: "tuple",
        components: [
          {
            name: "erc20zAddress",
            internalType: "address payable",
            type: "address"
          },
          { name: "saleStart", internalType: "uint64", type: "uint64" },
          { name: "poolAddress", internalType: "address", type: "address" },
          { name: "saleEnd", internalType: "uint64", type: "uint64" },
          { name: "secondaryActivated", internalType: "bool", type: "bool" }
        ]
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [
      { name: "collection", internalType: "address", type: "address" },
      { name: "tokenId", internalType: "uint256", type: "uint256" }
    ],
    name: "saleV2",
    outputs: [
      {
        name: "",
        internalType: "struct IZoraTimedSaleStrategy.SaleData",
        type: "tuple",
        components: [
          { name: "saleStart", internalType: "uint64", type: "uint64" },
          { name: "marketCountdown", internalType: "uint64", type: "uint64" },
          { name: "saleEnd", internalType: "uint64", type: "uint64" },
          { name: "secondaryActivated", internalType: "bool", type: "bool" },
          {
            name: "minimumMarketEth",
            internalType: "uint256",
            type: "uint256"
          },
          { name: "poolAddress", internalType: "address", type: "address" },
          {
            name: "erc20zAddress",
            internalType: "address payable",
            type: "address"
          },
          { name: "name", internalType: "string", type: "string" },
          { name: "symbol", internalType: "string", type: "string" }
        ]
      }
    ],
    stateMutability: "view"
  },
  {
    type: "function",
    inputs: [
      { name: "tokenId", internalType: "uint256", type: "uint256" },
      {
        name: "salesConfig",
        internalType: "struct IZoraTimedSaleStrategy.SalesConfig",
        type: "tuple",
        components: [
          { name: "saleStart", internalType: "uint64", type: "uint64" },
          { name: "saleEnd", internalType: "uint64", type: "uint64" },
          { name: "name", internalType: "string", type: "string" },
          { name: "symbol", internalType: "string", type: "string" }
        ]
      }
    ],
    name: "setSale",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [
      { name: "tokenId", internalType: "uint256", type: "uint256" },
      {
        name: "salesConfig",
        internalType: "struct IZoraTimedSaleStrategy.SalesConfigV2",
        type: "tuple",
        components: [
          { name: "saleStart", internalType: "uint64", type: "uint64" },
          { name: "marketCountdown", internalType: "uint64", type: "uint64" },
          {
            name: "minimumMarketEth",
            internalType: "uint256",
            type: "uint256"
          },
          { name: "name", internalType: "string", type: "string" },
          { name: "symbol", internalType: "string", type: "string" }
        ]
      }
    ],
    name: "setSaleV2",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [{ name: "recipient", internalType: "address", type: "address" }],
    name: "setZoraRewardRecipient",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [{ name: "interfaceId", internalType: "bytes4", type: "bytes4" }],
    name: "supportsInterface",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
    stateMutability: "pure"
  },
  {
    type: "function",
    inputs: [{ name: "newOwner", internalType: "address", type: "address" }],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [
      { name: "amount0Delta", internalType: "int256", type: "int256" },
      { name: "amount1Delta", internalType: "int256", type: "int256" },
      { name: "", internalType: "bytes", type: "bytes" }
    ],
    name: "uniswapV3SwapCallback",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [
      { name: "tokenId", internalType: "uint256", type: "uint256" },
      { name: "newStartTime", internalType: "uint64", type: "uint64" },
      { name: "newMarketCountdown", internalType: "uint64", type: "uint64" }
    ],
    name: "updateSale",
    outputs: [],
    stateMutability: "nonpayable"
  },
  {
    type: "function",
    inputs: [
      { name: "newImplementation", internalType: "address", type: "address" },
      { name: "data", internalType: "bytes", type: "bytes" }
    ],
    name: "upgradeToAndCall",
    outputs: [],
    stateMutability: "payable"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "version",
        internalType: "uint64",
        type: "uint64",
        indexed: false
      }
    ],
    name: "Initialized"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "collection",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "tokenId",
        internalType: "uint256",
        type: "uint256",
        indexed: true
      },
      {
        name: "erc20zAddress",
        internalType: "address",
        type: "address",
        indexed: false
      },
      {
        name: "poolAddress",
        internalType: "address",
        type: "address",
        indexed: false
      }
    ],
    name: "MarketLaunched"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "sender",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "collection",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "tokenId",
        internalType: "uint256",
        type: "uint256",
        indexed: true
      },
      {
        name: "quantity",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      },
      {
        name: "comment",
        internalType: "string",
        type: "string",
        indexed: false
      }
    ],
    name: "MintComment"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "previousOwner",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "newOwner",
        internalType: "address",
        type: "address",
        indexed: true
      }
    ],
    name: "OwnershipTransferStarted"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "previousOwner",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "newOwner",
        internalType: "address",
        type: "address",
        indexed: true
      }
    ],
    name: "OwnershipTransferred"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "collection",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "tokenId",
        internalType: "uint256",
        type: "uint256",
        indexed: true
      },
      {
        name: "salesConfig",
        internalType: "struct IZoraTimedSaleStrategy.SalesConfig",
        type: "tuple",
        components: [
          { name: "saleStart", internalType: "uint64", type: "uint64" },
          { name: "saleEnd", internalType: "uint64", type: "uint64" },
          { name: "name", internalType: "string", type: "string" },
          { name: "symbol", internalType: "string", type: "string" }
        ],
        indexed: false
      },
      {
        name: "erc20zAddress",
        internalType: "address",
        type: "address",
        indexed: false
      },
      {
        name: "poolAddress",
        internalType: "address",
        type: "address",
        indexed: false
      },
      {
        name: "mintFee",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      }
    ],
    name: "SaleSet"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "collection",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "tokenId",
        internalType: "uint256",
        type: "uint256",
        indexed: true
      },
      {
        name: "saleData",
        internalType: "struct IZoraTimedSaleStrategy.SaleData",
        type: "tuple",
        components: [
          { name: "saleStart", internalType: "uint64", type: "uint64" },
          { name: "marketCountdown", internalType: "uint64", type: "uint64" },
          { name: "saleEnd", internalType: "uint64", type: "uint64" },
          { name: "secondaryActivated", internalType: "bool", type: "bool" },
          {
            name: "minimumMarketEth",
            internalType: "uint256",
            type: "uint256"
          },
          { name: "poolAddress", internalType: "address", type: "address" },
          {
            name: "erc20zAddress",
            internalType: "address payable",
            type: "address"
          },
          { name: "name", internalType: "string", type: "string" },
          { name: "symbol", internalType: "string", type: "string" }
        ],
        indexed: false
      },
      {
        name: "mintFee",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      }
    ],
    name: "SaleSetV2"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "implementation",
        internalType: "address",
        type: "address",
        indexed: true
      }
    ],
    name: "Upgraded"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "prevRecipient",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "newRecipient",
        internalType: "address",
        type: "address",
        indexed: true
      }
    ],
    name: "ZoraRewardRecipientUpdated"
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "collection",
        internalType: "address",
        type: "address",
        indexed: true
      },
      {
        name: "tokenId",
        internalType: "uint256",
        type: "uint256",
        indexed: true
      },
      {
        name: "creator",
        internalType: "address",
        type: "address",
        indexed: false
      },
      {
        name: "creatorReward",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      },
      {
        name: "createReferral",
        internalType: "address",
        type: "address",
        indexed: false
      },
      {
        name: "createReferralReward",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      },
      {
        name: "mintReferral",
        internalType: "address",
        type: "address",
        indexed: false
      },
      {
        name: "mintReferralReward",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      },
      {
        name: "market",
        internalType: "address",
        type: "address",
        indexed: false
      },
      {
        name: "marketReward",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      },
      {
        name: "zoraRecipient",
        internalType: "address",
        type: "address",
        indexed: false
      },
      {
        name: "zoraReward",
        internalType: "uint256",
        type: "uint256",
        indexed: false
      }
    ],
    name: "ZoraTimedSaleStrategyRewards"
  },
  {
    type: "error",
    inputs: [{ name: "target", internalType: "address", type: "address" }],
    name: "AddressEmptyCode"
  },
  {
    type: "error",
    inputs: [{ name: "account", internalType: "address", type: "address" }],
    name: "AddressInsufficientBalance"
  },
  { type: "error", inputs: [], name: "AddressZero" },
  { type: "error", inputs: [], name: "ERC1167FailedCreateClone" },
  {
    type: "error",
    inputs: [
      { name: "implementation", internalType: "address", type: "address" }
    ],
    name: "ERC1967InvalidImplementation"
  },
  { type: "error", inputs: [], name: "ERC1967NonPayable" },
  { type: "error", inputs: [], name: "EndTimeCannotBeInThePast" },
  { type: "error", inputs: [], name: "FailedInnerCall" },
  { type: "error", inputs: [], name: "InsufficientFunds" },
  { type: "error", inputs: [], name: "InvalidInitialization" },
  { type: "error", inputs: [], name: "MarketAlreadyLaunched" },
  { type: "error", inputs: [], name: "MarketMinimumNotReached" },
  { type: "error", inputs: [], name: "MinimumMarketEthNotMet" },
  { type: "error", inputs: [], name: "NeedsToBeAtLeastOneSaleToStartMarket" },
  { type: "error", inputs: [], name: "NotInitializing" },
  { type: "error", inputs: [], name: "OnlyZoraRewardRecipient" },
  {
    type: "error",
    inputs: [{ name: "owner", internalType: "address", type: "address" }],
    name: "OwnableInvalidOwner"
  },
  {
    type: "error",
    inputs: [{ name: "account", internalType: "address", type: "address" }],
    name: "OwnableUnauthorizedAccount"
  },
  { type: "error", inputs: [], name: "ReentrancyGuardReentrantCall" },
  { type: "error", inputs: [], name: "RequestMintInvalidUseMint" },
  { type: "error", inputs: [], name: "ResetSaleNotAvailable" },
  { type: "error", inputs: [], name: "SaleAlreadySet" },
  { type: "error", inputs: [], name: "SaleEnded" },
  { type: "error", inputs: [], name: "SaleHasNotStarted" },
  { type: "error", inputs: [], name: "SaleInProgress" },
  { type: "error", inputs: [], name: "SaleNotSet" },
  { type: "error", inputs: [], name: "SaleV2AlreadyStarted" },
  { type: "error", inputs: [], name: "SaleV2Ended" },
  { type: "error", inputs: [], name: "SaleV2NotSet" },
  { type: "error", inputs: [], name: "StartTimeCannotBeAfterEndTime" },
  { type: "error", inputs: [], name: "UUPSUnauthorizedCallContext" },
  {
    type: "error",
    inputs: [{ name: "slot", internalType: "bytes32", type: "bytes32" }],
    name: "UUPSUnsupportedProxiableUUID"
  },
  { type: "error", inputs: [], name: "WrongValueSent" },
  {
    type: "error",
    inputs: [],
    name: "ZoraCreator1155ContractNeedsToSupportReduceSupply"
  }
];
var zoraTimedSaleStrategyAddress = {
  1: "0x777777722D078c97c6ad07d9f36801e653E356Ae",
  10: "0x777777722D078c97c6ad07d9f36801e653E356Ae",
  8453: "0x777777722D078c97c6ad07d9f36801e653E356Ae",
  42161: "0x777777722D078c97c6ad07d9f36801e653E356Ae",
  81457: "0x777777722D078c97c6ad07d9f36801e653E356Ae",
  84532: "0x777777722D078c97c6ad07d9f36801e653E356Ae",
  421614: "0x777777722D078c97c6ad07d9f36801e653E356Ae",
  7777777: "0x777777722D078c97c6ad07d9f36801e653E356Ae",
  11155111: "0x777777722D078c97c6ad07d9f36801e653E356Ae",
  999999999: "0x777777722D078c97c6ad07d9f36801e653E356Ae"
};
var zoraTimedSaleStrategyConfig = {
  address: zoraTimedSaleStrategyAddress,
  abi: zoraTimedSaleStrategyABI
};

// ../../node_modules/.pnpm/viem@2.22.12_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.1/node_modules/viem/_esm/errors/unit.js
var InvalidDecimalNumberError = class extends BaseError {
  constructor({ value }) {
    super(`Number \`${value}\` is not a valid decimal number.`, {
      name: "InvalidDecimalNumberError"
    });
  }
};

// ../../node_modules/.pnpm/viem@2.22.12_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.1/node_modules/viem/_esm/utils/unit/parseUnits.js
function parseUnits(value, decimals) {
  if (!/^(-?)([0-9]*)\.?([0-9]*)$/.test(value))
    throw new InvalidDecimalNumberError({ value });
  let [integer, fraction = "0"] = value.split(".");
  const negative = integer.startsWith("-");
  if (negative)
    integer = integer.slice(1);
  fraction = fraction.replace(/(0+)$/, "");
  if (decimals === 0) {
    if (Math.round(Number(`.${fraction}`)) === 1)
      integer = `${BigInt(integer) + 1n}`;
    fraction = "";
  } else if (fraction.length > decimals) {
    const [left, unit, right] = [
      fraction.slice(0, decimals - 1),
      fraction.slice(decimals - 1, decimals),
      fraction.slice(decimals)
    ];
    const rounded = Math.round(Number(`${unit}.${right}`));
    if (rounded > 9)
      fraction = `${BigInt(left) + BigInt(1)}0`.padStart(left.length + 1, "0");
    else
      fraction = `${left}${rounded}`;
    if (fraction.length > decimals) {
      fraction = fraction.slice(1);
      integer = `${BigInt(integer) + 1n}`;
    }
    fraction = fraction.slice(0, decimals);
  } else {
    fraction = fraction.padEnd(decimals, "0");
  }
  return BigInt(`${negative ? "-" : ""}${integer}${fraction}`);
}

// ../../node_modules/.pnpm/viem@2.22.12_bufferutil@4.0.9_typescript@5.8.3_utf-8-validate@5.0.10_zod@3.24.1/node_modules/viem/_esm/utils/unit/parseEther.js
function parseEther(ether, unit = "wei") {
  return parseUnits(ether, etherUnits[unit]);
}

// src/types.ts
var PremintConfigVersion = /* @__PURE__ */ ((PremintConfigVersion2) => {
  PremintConfigVersion2["V1"] = "1";
  PremintConfigVersion2["V2"] = "2";
  PremintConfigVersion2["V3"] = "3";
  return PremintConfigVersion2;
})(PremintConfigVersion || {});
var emptyCommentIdentifier = () => {
  const zeroAddress = "0x0000000000000000000000000000000000000000";
  const zeroHash = "0x0000000000000000000000000000000000000000000000000000000000000000";
  return {
    commenter: zeroAddress,
    contractAddress: zeroAddress,
    tokenId: 0n,
    nonce: zeroHash
  };
};

// src/typedData.ts
var premintTypedDataDomain = ({
  chainId,
  version,
  creator1155Contract: verifyingContract
}) => ({
  chainId,
  name: "Preminter",
  version,
  verifyingContract
});
var premintV1TypedDataType = {
  CreatorAttribution: [
    { name: "tokenConfig", type: "TokenCreationConfig" },
    // unique id scoped to the contract and token to create.
    // ensure that a signature can be replaced, as long as the replacement
    // has the same uid, and a newer version.
    { name: "uid", type: "uint32" },
    { name: "version", type: "uint32" },
    // if this update should result in the signature being deleted.
    { name: "deleted", type: "bool" }
  ],
  TokenCreationConfig: [
    { name: "tokenURI", type: "string" },
    { name: "maxSupply", type: "uint256" },
    { name: "maxTokensPerAddress", type: "uint64" },
    { name: "pricePerToken", type: "uint96" },
    { name: "mintStart", type: "uint64" },
    { name: "mintDuration", type: "uint64" },
    { name: "royaltyMintSchedule", type: "uint32" },
    { name: "royaltyBPS", type: "uint32" },
    { name: "royaltyRecipient", type: "address" },
    { name: "fixedPriceMinter", type: "address" }
  ]
};
var encodeTokenConfigV1 = (config) => {
  const abiItem = getAbiItem({
    abi: iPremintDefinitionsABI,
    name: "tokenConfigV1Definition"
  });
  return encodeAbiParameters(abiItem.inputs, [config]);
};
var encodeTokenConfigV2 = (config) => {
  const abiItem = getAbiItem({
    abi: iPremintDefinitionsABI,
    name: "tokenConfigV2Definition"
  });
  return encodeAbiParameters(abiItem.inputs, [config]);
};
var encodeTokenConfigV3 = (config) => {
  const abiItem = getAbiItem({
    abi: iPremintDefinitionsABI,
    name: "tokenConfigV3Definition"
  });
  return encodeAbiParameters(abiItem.inputs, [config]);
};
var encodeTokenConfig = ({
  tokenConfig,
  premintConfigVersion
}) => {
  if (premintConfigVersion === "1" /* V1 */) {
    return encodeTokenConfigV1(tokenConfig);
  }
  if (premintConfigVersion === "2" /* V2 */) {
    return encodeTokenConfigV2(tokenConfig);
  }
  if (premintConfigVersion === "3" /* V3 */) {
    return encodeTokenConfigV3(tokenConfig);
  }
  throw new Error("Invalid PremintConfigVersion: " + premintConfigVersion);
};
var encodePremintConfig = ({
  premintConfig,
  premintConfigVersion
}) => {
  const encodedTokenConfig = encodeTokenConfig({
    premintConfigVersion,
    tokenConfig: premintConfig.tokenConfig
  });
  return {
    deleted: premintConfig.deleted,
    uid: premintConfig.uid,
    version: premintConfig.version,
    premintConfigVersion: keccak256(toHex(premintConfigVersion)),
    tokenConfig: encodedTokenConfig
  };
};
var premintV1TypedDataDefinition = ({
  chainId,
  creator1155Contract,
  message
}) => ({
  types: premintV1TypedDataType,
  primaryType: "CreatorAttribution",
  domain: premintTypedDataDomain({
    chainId,
    version: "1" /* V1 */,
    creator1155Contract
  }),
  message
});
var premintV2TypedDataType = {
  CreatorAttribution: [
    { name: "tokenConfig", type: "TokenCreationConfig" },
    // unique id scoped to the contract and token to create.
    // ensure that a signature can be replaced, as long as the replacement
    // has the same uid, and a newer version.
    { name: "uid", type: "uint32" },
    { name: "version", type: "uint32" },
    // if this update should result in the signature being deleted.
    { name: "deleted", type: "bool" }
  ],
  TokenCreationConfig: [
    { name: "tokenURI", type: "string" },
    { name: "maxSupply", type: "uint256" },
    { name: "maxTokensPerAddress", type: "uint64" },
    { name: "pricePerToken", type: "uint96" },
    { name: "mintStart", type: "uint64" },
    { name: "mintDuration", type: "uint64" },
    { name: "royaltyBPS", type: "uint32" },
    { name: "payoutRecipient", type: "address" },
    { name: "fixedPriceMinter", type: "address" },
    { name: "createReferral", type: "address" }
  ]
};
var premintV2TypedDataDefinition = ({
  chainId,
  creator1155Contract,
  message
}) => ({
  types: premintV2TypedDataType,
  primaryType: "CreatorAttribution",
  domain: premintTypedDataDomain({
    chainId,
    version: "2" /* V2 */,
    creator1155Contract
  }),
  message
});
var premintTypedDataDefinition = ({
  verifyingContract,
  chainId,
  premintConfigVersion: version,
  premintConfig
}) => {
  if (version === "1" /* V1 */)
    return premintV1TypedDataDefinition({
      chainId,
      creator1155Contract: verifyingContract,
      message: premintConfig
    });
  if (version === "2" /* V2 */) {
    return premintV2TypedDataDefinition({
      chainId,
      creator1155Contract: verifyingContract,
      message: premintConfig
    });
  }
  throw new Error(`Invalid version ${version}`);
};
var permitSafeTransferTypedDataType = {
  PermitSafeTransfer: [
    { name: "owner", type: "address" },
    { name: "to", type: "address" },
    { name: "tokenId", type: "uint256" },
    { name: "quantity", type: "uint256" },
    { name: "safeTransferData", type: "bytes" },
    { name: "nonce", type: "uint256" },
    { name: "deadline", type: "uint256" }
  ]
};
var mintsSafeTransferTypedDataDefinition = ({
  chainId,
  message
}) => ({
  types: permitSafeTransferTypedDataType,
  message,
  primaryType: "PermitSafeTransfer",
  domain: {
    chainId,
    name: "Mints",
    version: "1",
    verifyingContract: zoraMints1155Address[chainId]
  }
});
var permitSafeBatchTransferTypedDataType = {
  Permit: [
    {
      name: "owner",
      type: "address"
    },
    {
      name: "to",
      type: "address"
    },
    {
      name: "tokenIds",
      type: "uint256[]"
    },
    {
      name: "quantities",
      type: "uint256[]"
    },
    {
      name: "safeTransferData",
      type: "bytes"
    },
    {
      name: "nonce",
      type: "uint256"
    },
    {
      name: "deadline",
      type: "uint256"
    }
  ]
};
var mintsSafeTransferBatchTypedDataDefinition = ({
  chainId,
  message
}) => ({
  types: permitSafeBatchTransferTypedDataType,
  message,
  primaryType: "Permit",
  domain: {
    chainId,
    name: "Mints",
    version: "1",
    verifyingContract: zoraMints1155Address[chainId]
  }
});
var sponsoredSparksBatchTransferTypedDataType = {
  SponsoredMintBatch: [
    {
      name: "verifier",
      type: "address"
    },
    {
      name: "from",
      type: "address"
    },
    {
      name: "destination",
      type: "address"
    },
    {
      name: "data",
      type: "bytes"
    },
    {
      name: "expectedRedeemAmount",
      type: "uint256"
    },
    {
      name: "totalAmount",
      type: "uint256"
    },
    {
      name: "ids",
      type: "uint256[]"
    },
    {
      name: "quantities",
      type: "uint256[]"
    },
    {
      name: "nonce",
      type: "uint256"
    },
    {
      name: "deadline",
      type: "uint256"
    }
  ]
};
var sponsoredSparksBatchTypedDataDefinition = ({
  chainId,
  message
}) => ({
  types: sponsoredSparksBatchTransferTypedDataType,
  message,
  primaryType: "SponsoredMintBatch",
  domain: {
    chainId,
    name: "SponsoredSparksSpender",
    version: "1",
    verifyingContract: sponsoredSparksSpenderAddress[chainId]
  }
});
var commentIdentifierType = [
  { name: "contractAddress", type: "address" },
  { name: "tokenId", type: "uint256" },
  { name: "commenter", type: "address" },
  { name: "nonce", type: "bytes32" }
];
var commentsDomain = ({
  signingChainId,
  destinationChainId
}) => ({
  chainId: signingChainId,
  name: "Comments",
  version: "1",
  verifyingContract: commentsAddress[destinationChainId]
});
var permitCommentTypedDataDefinition = (message, signingAccount) => {
  const permitCommentTypedDataType = {
    PermitComment: [
      { name: "contractAddress", type: "address" },
      { name: "tokenId", type: "uint256" },
      { name: "commenter", type: "address" },
      { name: "replyTo", type: "CommentIdentifier" },
      { name: "text", type: "string" },
      { name: "deadline", type: "uint256" },
      { name: "nonce", type: "bytes32" },
      { name: "commenterSmartWallet", type: "address" },
      { name: "referrer", type: "address" },
      { name: "sourceChainId", type: "uint32" },
      { name: "destinationChainId", type: "uint32" }
    ],
    CommentIdentifier: commentIdentifierType
  };
  return {
    types: permitCommentTypedDataType,
    message,
    primaryType: "PermitComment",
    domain: commentsDomain({
      signingChainId: message.sourceChainId,
      destinationChainId: message.destinationChainId
    }),
    account: signingAccount || message.commenter
  };
};
var permitSparkCommentTypedDataDefinition = (message, signingAccount) => {
  const permitSparkCommentTypedDataType = {
    PermitSparkComment: [
      { name: "comment", type: "CommentIdentifier" },
      { name: "sparker", type: "address" },
      { name: "sparksQuantity", type: "uint256" },
      { name: "deadline", type: "uint256" },
      { name: "nonce", type: "bytes32" },
      { name: "referrer", type: "address" },
      { name: "sourceChainId", type: "uint32" },
      { name: "destinationChainId", type: "uint32" }
    ],
    CommentIdentifier: commentIdentifierType
  };
  return {
    types: permitSparkCommentTypedDataType,
    message,
    primaryType: "PermitSparkComment",
    domain: commentsDomain({
      signingChainId: message.sourceChainId,
      destinationChainId: message.destinationChainId
    }),
    account: signingAccount || message.sparker
  };
};
var sparkValue = () => parseEther("0.000001");
var permitMintAndCommentTypedDataDefinition = (message, signingAccount) => {
  const permitTimedSaleMintAndCommentTypedDataType = {
    PermitTimedSaleMintAndComment: [
      { name: "commenter", type: "address" },
      { name: "quantity", type: "uint256" },
      { name: "collection", type: "address" },
      { name: "tokenId", type: "uint256" },
      { name: "mintReferral", type: "address" },
      { name: "comment", type: "string" },
      { name: "deadline", type: "uint256" },
      { name: "nonce", type: "bytes32" },
      { name: "sourceChainId", type: "uint32" },
      { name: "destinationChainId", type: "uint32" }
    ]
  };
  const callerAndCommenterDomain = ({
    signingChainId,
    destinationChainId
  }) => ({
    name: "CallerAndCommenter",
    version: "1",
    chainId: signingChainId,
    verifyingContract: callerAndCommenterAddress[destinationChainId]
  });
  return {
    types: permitTimedSaleMintAndCommentTypedDataType,
    message,
    primaryType: "PermitTimedSaleMintAndComment",
    domain: callerAndCommenterDomain({
      signingChainId: message.sourceChainId,
      destinationChainId: message.destinationChainId
    }),
    account: signingAccount || message.commenter
  };
};
var permitBuyOnSecondaryAndCommentTypedDataDefinition = (message, signingAccount) => {
  const permitBuyOnSecondaryAndCommentTypedDataType = {
    PermitBuyOnSecondaryAndComment: [
      { name: "commenter", type: "address" },
      { name: "quantity", type: "uint256" },
      { name: "collection", type: "address" },
      { name: "tokenId", type: "uint256" },
      { name: "maxEthToSpend", type: "uint256" },
      { name: "sqrtPriceLimitX96", type: "uint160" },
      { name: "comment", type: "string" },
      { name: "deadline", type: "uint256" },
      { name: "nonce", type: "bytes32" },
      { name: "sourceChainId", type: "uint32" },
      { name: "destinationChainId", type: "uint32" }
    ]
  };
  const callerAndCommenterDomain = ({
    signingChainId,
    destinationChainId
  }) => ({
    name: "CallerAndCommenter",
    version: "1",
    chainId: signingChainId,
    verifyingContract: callerAndCommenterAddress[destinationChainId]
  });
  return {
    types: permitBuyOnSecondaryAndCommentTypedDataType,
    message,
    primaryType: "PermitBuyOnSecondaryAndComment",
    domain: callerAndCommenterDomain({
      signingChainId: message.sourceChainId,
      destinationChainId: message.destinationChainId
    }),
    account: signingAccount || message.commenter
  };
};

// src/encoding.ts
var safeTransferSwapAbiParameters = [
  { name: "recipient", internalType: "address payable", type: "address" },
  { name: "minEthToAcquire", internalType: "uint256", type: "uint256" },
  { name: "sqrtPriceLimitX96", internalType: "uint160", type: "uint160" }
];
var buySupplyWithSwapRouterHookAbiParameters = [
  { name: "buyRecipient", internalType: "address", type: "address" },
  { name: "swapRouterCall", internalType: "bytes", type: "bytes" }
];
var buySupplyWithSwapRouterHookReturnParameters = [
  { name: "amountCurrency", internalType: "uint256", type: "uint256" },
  { name: "coinsPurchased", internalType: "uint256", type: "uint256" }
];
var encodeBuySupplyWithSwapRouterHookCalldata = (buyRecipient, swapRouterCall) => {
  return encodeAbiParameters(buySupplyWithSwapRouterHookAbiParameters, [
    buyRecipient,
    swapRouterCall
  ]);
};
var encodeBuySupplyWithSingleHopSwapRouterHookCall = ({
  buyRecipient,
  exactInputSingleParams,
  chainId,
  ethValue
}) => {
  const hook = buySupplyWithSwapRouterHookAddress[chainId];
  const callToSwapRouter = encodeFunctionData({
    abi: uniswapV3SwapRouterABI,
    functionName: "exactInputSingle",
    args: [
      {
        recipient: hook,
        ...exactInputSingleParams
      }
    ]
  });
  return {
    hook,
    hookData: encodeBuySupplyWithSwapRouterHookCalldata(
      buyRecipient,
      callToSwapRouter
    ),
    value: ethValue
  };
};
var encodeBuySupplyWithMultiHopSwapRouterHookCall = ({
  buyRecipient,
  exactInputParams,
  chainId,
  ethValue
}) => {
  const hook = buySupplyWithSwapRouterHookAddress[chainId];
  const callToSwapRouter = encodeFunctionData({
    abi: uniswapV3SwapRouterABI,
    functionName: "exactInput",
    args: [
      {
        recipient: hook,
        ...exactInputParams
      }
    ]
  });
  return {
    hook,
    hookData: encodeBuySupplyWithSwapRouterHookCalldata(
      buyRecipient,
      callToSwapRouter
    ),
    value: ethValue
  };
};
var decodeBuySupplyWithSwapRouterHookReturn = (returnData) => {
  const result = decodeAbiParameters(
    buySupplyWithSwapRouterHookReturnParameters,
    returnData
  );
  return {
    amountCurrency: result[0],
    coinsPurchased: result[1]
  };
};
var UNISWAP_V4_MULTICURVE_POOL_VERSION = 4;
var encodeMultiCurvePoolConfig = ({
  currency,
  tickLower,
  tickUpper,
  numDiscoveryPositions,
  maxDiscoverySupplyShare
}) => {
  const abiItem = getAbiItem({
    abi: poolConfigEncodingABI,
    name: "encodeMultiCurvePoolConfig"
  });
  return encodeAbiParameters(abiItem.inputs, [
    UNISWAP_V4_MULTICURVE_POOL_VERSION,
    currency,
    tickLower,
    tickUpper,
    numDiscoveryPositions,
    maxDiscoverySupplyShare
  ]);
};

// src/generated/1155.ts
var __exports = {};
__export(__exports, {
  addresses: () => addresses,
  chainConfigs: () => chainConfigs
});
var chainConfigs = {
  1: {
    FACTORY_OWNER: "0xDB392f4391462d60B8B4413ef72018Ab595Af9D0",
    MINT_FEE_RECIPIENT: "0xd1d1D4e36117aB794ec5d4c78cBD3a8904E691D0",
    PROTOCOL_REWARDS: "0x7777777F279eba3d3Ad8F4E708545291A6fDBA8B"
  },
  10: {
    FACTORY_OWNER: "0x4c7f7b6067fac9a737ecf2ca1a733fc85dd65a2b",
    MINT_FEE_RECIPIENT: "0x7A810DCd0f8d83B20212326813Db6EF7E9FD030c",
    PROTOCOL_REWARDS: "0x7777777F279eba3d3Ad8F4E708545291A6fDBA8B"
  },
  999: {
    FACTORY_OWNER: "0xE84DBB2B25F761751231a9D0DAfbdD4dC3aa8252",
    MINT_FEE_RECIPIENT: "0xE84DBB2B25F761751231a9D0DAfbdD4dC3aa8252",
    PROTOCOL_REWARDS: "0x7777777F279eba3d3Ad8F4E708545291A6fDBA8B"
  },
  8453: {
    FACTORY_OWNER: "0x004d6611884B4A661749B64b2ADc78505c3e1AB3",
    MINT_FEE_RECIPIENT: "0x7bf90111Ad7C22bec9E9dFf8A01A44713CC1b1B6",
    PROTOCOL_REWARDS: "0x7777777F279eba3d3Ad8F4E708545291A6fDBA8B"
  },
  42161: {
    FACTORY_OWNER: "0xF7DafC329C93D84267c0E7B146C0bD68807f6A03",
    MINT_FEE_RECIPIENT: "0x10Fb02A68C3EA8bD439A6f515dcE07CC049f5c94",
    PROTOCOL_REWARDS: "0x7777777F279eba3d3Ad8F4E708545291A6fDBA8B"
  },
  81457: {
    FACTORY_OWNER: "0x5b297B1b87f8De28C9fA7AFe183Db9F9e6295523",
    MINT_FEE_RECIPIENT: "0x72E6394056f9152D3a41e5A25De383c191D16134",
    PROTOCOL_REWARDS: "0x7777777F279eba3d3Ad8F4E708545291A6fDBA8B"
  },
  84532: {
    FACTORY_OWNER: "0x5F14C23983c9e0840Dc60dA880349622f0785420",
    MINT_FEE_RECIPIENT: "0x5F14C23983c9e0840Dc60dA880349622f0785420",
    PROTOCOL_REWARDS: "0x7777777F279eba3d3Ad8F4E708545291A6fDBA8B"
  },
  421614: {
    FACTORY_OWNER: "0x256537b56007b32BabEB44E868EC8AA5cBF03D30",
    MINT_FEE_RECIPIENT: "0x256537b56007b32BabEB44E868EC8AA5cBF03D30",
    PROTOCOL_REWARDS: "0x7777777F279eba3d3Ad8F4E708545291A6fDBA8B"
  },
  7777777: {
    FACTORY_OWNER: "0xdEA20c96253dc2d64897D2b8d27A8d935dE74955",
    MINT_FEE_RECIPIENT: "0xEcfc2ee50409E459c554a2b0376F882Ce916D853",
    PROTOCOL_REWARDS: "0x7777777F279eba3d3Ad8F4E708545291A6fDBA8B"
  },
  11155111: {
    FACTORY_OWNER: "0xCE9F2e8EaFa11637F8A1CB60AE8AaC601Ae30f2D",
    MINT_FEE_RECIPIENT: "0xCE9F2e8EaFa11637F8A1CB60AE8AaC601Ae30f2D",
    PROTOCOL_REWARDS: "0x7777777F279eba3d3Ad8F4E708545291A6fDBA8B"
  },
  168587773: {
    FACTORY_OWNER: "0x8cF22F26d528B09b3cc54b7ff956630Bf741b773",
    MINT_FEE_RECIPIENT: "0x8cF22F26d528B09b3cc54b7ff956630Bf741b773",
    PROTOCOL_REWARDS: "0x7777777F279eba3d3Ad8F4E708545291A6fDBA8B"
  },
  999999999: {
    FACTORY_OWNER: "0xdae22ce69Afcb7f4bc37D32E267645722949DE0E",
    MINT_FEE_RECIPIENT: "0xdae22ce69Afcb7f4bc37D32E267645722949DE0E",
    PROTOCOL_REWARDS: "0x7777777F279eba3d3Ad8F4E708545291A6fDBA8B"
  }
};
var addresses = {
  1: {
    CONTRACT_1155_IMPL: "0x7FB277e8a6584D76bBbc72980719F36936825e29",
    CONTRACT_1155_IMPL_VERSION: "2.13.0",
    ERC20_MINTER: "0x777777E8850d8D6d98De2B5f64fae401F96eFF31",
    FACTORY_IMPL: "0x0379e37302e9d57fFd657F87e1180273826CE84F",
    FACTORY_PROXY: "0x777777C338d93e2C7adf08D102d45CA7CC4Ed021",
    FIXED_PRICE_SALE_STRATEGY: "0x04E2516A2c207E84a1839755675dfd8eF6302F0a",
    MERKLE_MINT_SALE_STRATEGY: "0xf48172CA3B6068B20eE4917Eb27b5472f1f272C7",
    PREMINTER_IMPL: "0xDfB3D291bA493e7a3c835F0EdBa0B1B52979609A",
    PREMINTER_PROXY: "0x7777773606e7e46C8Ba8B98C08f5cD218e31d340",
    REDEEM_MINTER_FACTORY: "0x78964965cF77850224513a367f899435C5B69174",
    UPGRADE_GATE: "0xbC50029836A59A4E5e1Bb8988272F46ebA0F9900",
    timestamp: 1730734767
  },
  10: {
    CONTRACT_1155_IMPL: "0xF77330C8b1c41f2e44470763Cf9E3ACa78Db4381",
    CONTRACT_1155_IMPL_VERSION: "2.13.2",
    ERC20_MINTER: "0x777777E8850d8D6d98De2B5f64fae401F96eFF31",
    FACTORY_IMPL: "0x2008C05685F9fA15BBD75d80e9A44ab0c7230577",
    FACTORY_PROXY: "0x777777C338d93e2C7adf08D102d45CA7CC4Ed021",
    FIXED_PRICE_SALE_STRATEGY: "0x3678862f04290E565cCA2EF163BAeb92Bb76790C",
    MERKLE_MINT_SALE_STRATEGY: "0x899ce31dF6C6Af81203AcAaD285bF539234eF4b8",
    PREMINTER_IMPL: "0xD8f6cf234eE4B689099677Bd94FbA0b1E005181d",
    PREMINTER_PROXY: "0x7777773606e7e46C8Ba8B98C08f5cD218e31d340",
    REDEEM_MINTER_FACTORY: "0x1B28A04b7eB7b93f920ddF2021aa3fAE065395f2",
    UPGRADE_GATE: "0xbC50029836A59A4E5e1Bb8988272F46ebA0F9900",
    timestamp: 1731019615
  },
  999: {
    CONTRACT_1155_IMPL: "0x2022AdEF470DA3543a19fac8c9be80618112704D",
    CONTRACT_1155_IMPL_VERSION: "2.7.0",
    FACTORY_IMPL: "0x4b0365Ec68C2D92Af2Fa56f120095F0859142Eff",
    FACTORY_PROXY: "0x777777C338d93e2C7adf08D102d45CA7CC4Ed021",
    FIXED_PRICE_SALE_STRATEGY: "0x04E2516A2c207E84a1839755675dfd8eF6302F0a",
    MERKLE_MINT_SALE_STRATEGY: "0xf48172CA3B6068B20eE4917Eb27b5472f1f272C7",
    PREMINTER_IMPL: "0x795Efc066f89DFB03048dDd0598F2D8521c99Df6",
    PREMINTER_PROXY: "0x7777773606e7e46C8Ba8B98C08f5cD218e31d340",
    REDEEM_MINTER_FACTORY: "0x78964965cF77850224513a367f899435C5B69174",
    UPGRADE_GATE: "0x0000000000000000000000000000000000000000",
    timestamp: 1704399834
  },
  8453: {
    CONTRACT_1155_IMPL: "0x5Eb5bABCEFEa846b220C82f222F00Df95934F5f0",
    CONTRACT_1155_IMPL_VERSION: "2.13.2",
    ERC20_MINTER: "0x777777E8850d8D6d98De2B5f64fae401F96eFF31",
    FACTORY_IMPL: "0x97898683c6950a986911fdfFEa12739bad5D2581",
    FACTORY_PROXY: "0x777777C338d93e2C7adf08D102d45CA7CC4Ed021",
    FIXED_PRICE_SALE_STRATEGY: "0x04E2516A2c207E84a1839755675dfd8eF6302F0a",
    MERKLE_MINT_SALE_STRATEGY: "0xf48172CA3B6068B20eE4917Eb27b5472f1f272C7",
    PREMINTER_IMPL: "0xDfB3D291bA493e7a3c835F0EdBa0B1B52979609A",
    PREMINTER_PROXY: "0x7777773606e7e46C8Ba8B98C08f5cD218e31d340",
    REDEEM_MINTER_FACTORY: "0x78964965cF77850224513a367f899435C5B69174",
    UPGRADE_GATE: "0xbC50029836A59A4E5e1Bb8988272F46ebA0F9900",
    timestamp: 1730931491
  },
  42161: {
    CONTRACT_1155_IMPL: "0xC04050e04708b33302E30E5A0fB1e8c38F4EBbB0",
    CONTRACT_1155_IMPL_VERSION: "2.13.2",
    ERC20_MINTER: "0x777777E8850d8D6d98De2B5f64fae401F96eFF31",
    FACTORY_IMPL: "0xe2606ac30752009ecec6FEaf5C2B4A6523256E7E",
    FACTORY_PROXY: "0x777777C338d93e2C7adf08D102d45CA7CC4Ed021",
    FIXED_PRICE_SALE_STRATEGY: "0x1Cd1C1f3b8B779B50Db23155F2Cb244FCcA06B21",
    MERKLE_MINT_SALE_STRATEGY: "0xe770E6f19aecF8ef3145A50087999b5556aB3610",
    PREMINTER_IMPL: "0xD8f6cf234eE4B689099677Bd94FbA0b1E005181d",
    PREMINTER_PROXY: "0x7777773606e7e46C8Ba8B98C08f5cD218e31d340",
    REDEEM_MINTER_FACTORY: "0x69bB4A24EBD8b1B87AF4538E0Ca3075b7E398c3D",
    UPGRADE_GATE: "0xbC50029836A59A4E5e1Bb8988272F46ebA0F9900",
    timestamp: 1730931657
  },
  81457: {
    CONTRACT_1155_IMPL: "0x16cFE884B49E68Cae854f12Ea419Fb1F6Ad290A8",
    CONTRACT_1155_IMPL_VERSION: "2.13.2",
    ERC20_MINTER: "0x777777E8850d8D6d98De2B5f64fae401F96eFF31",
    FACTORY_IMPL: "0x23150f60E233F519A01C735C29c1591f9E8353dE",
    FACTORY_PROXY: "0x777777C338d93e2C7adf08D102d45CA7CC4Ed021",
    FIXED_PRICE_SALE_STRATEGY: "0x3EB144aee170BF62FdA1536e38aF51f08e34A5D0",
    MERKLE_MINT_SALE_STRATEGY: "0xB9C997FcC46a27331CC986cc2416ee99C1d506c3",
    PREMINTER_IMPL: "0xD8f6cf234eE4B689099677Bd94FbA0b1E005181d",
    PREMINTER_PROXY: "0x7777773606e7e46C8Ba8B98C08f5cD218e31d340",
    REDEEM_MINTER_FACTORY: "0x7A0dE1B1f5420Df5D946878fBe2cF109011BE614",
    UPGRADE_GATE: "0xbC50029836A59A4E5e1Bb8988272F46ebA0F9900",
    timestamp: 1730931749
  },
  84532: {
    CONTRACT_1155_IMPL: "0x695C9A141748D308d26Bd4f8E9F9A5df5F0623f8",
    CONTRACT_1155_IMPL_VERSION: "2.13.2",
    ERC20_MINTER: "0x777777E8850d8D6d98De2B5f64fae401F96eFF31",
    FACTORY_IMPL: "0xd92F69d5581BF9536c77550aeA1d74DDaE88B5B7",
    FACTORY_PROXY: "0x777777C338d93e2C7adf08D102d45CA7CC4Ed021",
    FIXED_PRICE_SALE_STRATEGY: "0xd34872BE0cdb6b09d45FCa067B07f04a1A9aE1aE",
    MERKLE_MINT_SALE_STRATEGY: "0x3E8524770adD176bE381a0529E09f1c6c3502A5a",
    PREMINTER_IMPL: "0xD8f6cf234eE4B689099677Bd94FbA0b1E005181d",
    PREMINTER_PROXY: "0x7777773606e7e46C8Ba8B98C08f5cD218e31d340",
    REDEEM_MINTER_FACTORY: "0x805E0a08dE70f85C01F7848370d5e3fc08aAd0ea",
    UPGRADE_GATE: "0xbC50029836A59A4E5e1Bb8988272F46ebA0F9900",
    timestamp: 1730928936
  },
  421614: {
    CONTRACT_1155_IMPL: "0x3Ed969bf88166B85608C13b633242611F6220a14",
    CONTRACT_1155_IMPL_VERSION: "2.13.2",
    ERC20_MINTER: "0x777777E8850d8D6d98De2B5f64fae401F96eFF31",
    FACTORY_IMPL: "0xA75f980Fdf9F02718423FDFDFf1fccc74bdDBa95",
    FACTORY_PROXY: "0x777777C338d93e2C7adf08D102d45CA7CC4Ed021",
    FIXED_PRICE_SALE_STRATEGY: "0x1Cd1C1f3b8B779B50Db23155F2Cb244FCcA06B21",
    MERKLE_MINT_SALE_STRATEGY: "0xe770E6f19aecF8ef3145A50087999b5556aB3610",
    PREMINTER_IMPL: "0xD8f6cf234eE4B689099677Bd94FbA0b1E005181d",
    PREMINTER_PROXY: "0x7777773606e7e46C8Ba8B98C08f5cD218e31d340",
    REDEEM_MINTER_FACTORY: "0x69bB4A24EBD8b1B87AF4538E0Ca3075b7E398c3D",
    UPGRADE_GATE: "0xbC50029836A59A4E5e1Bb8988272F46ebA0F9900",
    timestamp: 1730928848
  },
  7777777: {
    CONTRACT_1155_IMPL: "0xDB07C4525E82340A27077Ad258160928f271BB7F",
    CONTRACT_1155_IMPL_VERSION: "2.13.2",
    ERC20_MINTER: "0x777777E8850d8D6d98De2B5f64fae401F96eFF31",
    FACTORY_IMPL: "0x517Ce60C6e66a4DB1ea705C98250770d01f9d0AE",
    FACTORY_PROXY: "0x777777C338d93e2C7adf08D102d45CA7CC4Ed021",
    FIXED_PRICE_SALE_STRATEGY: "0x04E2516A2c207E84a1839755675dfd8eF6302F0a",
    MERKLE_MINT_SALE_STRATEGY: "0xf48172CA3B6068B20eE4917Eb27b5472f1f272C7",
    PREMINTER_IMPL: "0xa79928cCc270b0208e56BfF0e927ff55034e7C35",
    PREMINTER_PROXY: "0x7777773606e7e46C8Ba8B98C08f5cD218e31d340",
    REDEEM_MINTER_FACTORY: "0x78964965cF77850224513a367f899435C5B69174",
    UPGRADE_GATE: "0xbC50029836A59A4E5e1Bb8988272F46ebA0F9900",
    timestamp: 1730930939
  },
  11155111: {
    CONTRACT_1155_IMPL: "0x9b24FD165a371042e5CA81e8d066d25CAD11EDE7",
    CONTRACT_1155_IMPL_VERSION: "2.13.2",
    ERC20_MINTER: "0x777777E8850d8D6d98De2B5f64fae401F96eFF31",
    FACTORY_IMPL: "0x3AE2804De4A54283601Db24a897856D9772eA0D8",
    FACTORY_PROXY: "0x777777C338d93e2C7adf08D102d45CA7CC4Ed021",
    FIXED_PRICE_SALE_STRATEGY: "0x1Cd1C1f3b8B779B50Db23155F2Cb244FCcA06B21",
    MERKLE_MINT_SALE_STRATEGY: "0xe770E6f19aecF8ef3145A50087999b5556aB3610",
    PREMINTER_IMPL: "0xa79928cCc270b0208e56BfF0e927ff55034e7C35",
    PREMINTER_PROXY: "0x7777773606e7e46C8Ba8B98C08f5cD218e31d340",
    REDEEM_MINTER_FACTORY: "0x69bB4A24EBD8b1B87AF4538E0Ca3075b7E398c3D",
    UPGRADE_GATE: "0xbC50029836A59A4E5e1Bb8988272F46ebA0F9900",
    timestamp: 1730928528
  },
  168587773: {
    CONTRACT_1155_IMPL: "0x192D663C3D6813a24a24582A76B8d872c4F6F7f9",
    CONTRACT_1155_IMPL_VERSION: "2.12.3",
    ERC20_MINTER: "0x0000000000000000000000000000000000000000",
    FACTORY_IMPL: "0x46E772210f01647FA573b915bE287Ff9b65AD4B0",
    FACTORY_PROXY: "0x777777C338d93e2C7adf08D102d45CA7CC4Ed021",
    FIXED_PRICE_SALE_STRATEGY: "0x3EB144aee170BF62FdA1536e38aF51f08e34A5D0",
    MERKLE_MINT_SALE_STRATEGY: "0xB9C997FcC46a27331CC986cc2416ee99C1d506c3",
    PREMINTER_IMPL: "0xe3150ab94e3730D4B157ffD31Ad042323E122b4C",
    PREMINTER_PROXY: "0x7777773606e7e46C8Ba8B98C08f5cD218e31d340",
    REDEEM_MINTER_FACTORY: "0x7A0dE1B1f5420Df5D946878fBe2cF109011BE614",
    UPGRADE_GATE: "0xbC50029836A59A4E5e1Bb8988272F46ebA0F9900",
    timestamp: 1722525339
  },
  999999999: {
    CONTRACT_1155_IMPL: "0x695C9A141748D308d26Bd4f8E9F9A5df5F0623f8",
    CONTRACT_1155_IMPL_VERSION: "2.13.2",
    ERC20_MINTER: "0x8Ec7f068A77fa5FC1925110f82381374BA054Ff2",
    FACTORY_IMPL: "0xd92F69d5581BF9536c77550aeA1d74DDaE88B5B7",
    FACTORY_PROXY: "0x777777C338d93e2C7adf08D102d45CA7CC4Ed021",
    FIXED_PRICE_SALE_STRATEGY: "0x6d28164C3CE04A190D5F9f0f8881fc807EAD975A",
    MERKLE_MINT_SALE_STRATEGY: "0x5e5fD4b758076BAD940db0284b711A67E8a3B88c",
    PREMINTER_IMPL: "0xD8f6cf234eE4B689099677Bd94FbA0b1E005181d",
    PREMINTER_PROXY: "0x7777773606e7e46C8Ba8B98C08f5cD218e31d340",
    REDEEM_MINTER_FACTORY: "0x25cFb6dd9cDE8425e781d6718a29Ccbca3F038d6",
    UPGRADE_GATE: "0x0000000000000000000000000000000000000000",
    timestamp: 1730928726
  }
};

// src/generated/sparks.ts
var sparks_exports = {};
__export(sparks_exports, {
  addresses: () => addresses2,
  chainConfigs: () => chainConfigs2
});
var chainConfigs2 = {
  1: {
    NONFUNGIBLE_POSITION_MANAGER: "0xC36442b4a4522E871399CD717aBDD847Ab11FE88",
    UNISWAP_SWAP_ROUTER: "0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45",
    PROXY_ADMIN: "0xDB392f4391462d60B8B4413ef72018Ab595Af9D0",
    ZORA_RECIPIENT: "0xd1d1D4e36117aB794ec5d4c78cBD3a8904E691D0",
    WETH: "0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2"
  },
  10: {
    NONFUNGIBLE_POSITION_MANAGER: "0xC36442b4a4522E871399CD717aBDD847Ab11FE88",
    UNISWAP_SWAP_ROUTER: "0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45",
    PROXY_ADMIN: "0x4c7f7b6067fac9a737ecf2ca1a733fc85dd65a2b",
    ZORA_RECIPIENT: "0x7A810DCd0f8d83B20212326813Db6EF7E9FD030c",
    WETH: "0x4200000000000000000000000000000000000006"
  },
  8453: {
    NONFUNGIBLE_POSITION_MANAGER: "0x03a520b32C04BF3bEEf7BEb72E919cf822Ed34f1",
    UNISWAP_SWAP_ROUTER: "0x2626664c2603336E57B271c5C0b26F421741e481",
    UNISWAP_V3_FACTORY: "0x33128a8fC17869897dcE68Ed026d694621f6FDfD",
    DOPPLER_AIRLOCK: "0x660eAaEdEBc968f8f3694354FA8EC0b4c5Ba8D12",
    PROXY_ADMIN: "0x004d6611884B4A661749B64b2ADc78505c3e1AB3",
    ZORA_RECIPIENT: "0x7bf90111Ad7C22bec9E9dFf8A01A44713CC1b1B6",
    WETH: "0x4200000000000000000000000000000000000006",
    UNISWAP_V4_POOL_MANAGER: "0x498581ff718922c3f8e6a244956af099b2652b2b",
    UNISWAP_V4_POSITION_MANAGER: "0x7c5f5a4bbd8fd63184577525326123b519429bdc",
    UNISWAP_PERMIT2: "0x000000000022D473030F116dDEE9F6B43aC78BA3",
    UNISWAP_UNIVERSAL_ROUTER: "0x6ff5693b99212da76ad316178a184ab56d299b43"
  },
  42161: {
    NONFUNGIBLE_POSITION_MANAGER: "0xC36442b4a4522E871399CD717aBDD847Ab11FE88",
    UNISWAP_SWAP_ROUTER: "0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45",
    PROXY_ADMIN: "0xF7DafC329C93D84267c0E7B146C0bD68807f6A03",
    ZORA_RECIPIENT: "0x10Fb02A68C3EA8bD439A6f515dcE07CC049f5c94",
    WETH: "0x82af49447d8a07e3bd95bd0d56f35241523fbab1"
  },
  81457: {
    NONFUNGIBLE_POSITION_MANAGER: "0xB218e4f7cF0533d4696fDfC419A0023D33345F28",
    UNISWAP_SWAP_ROUTER: "0x549FEB8c9bd4c12Ad2AB27022dA12492aC452B66",
    PROXY_ADMIN: "0x5b297B1b87f8De28C9fA7AFe183Db9F9e6295523",
    ZORA_RECIPIENT: "0x72E6394056f9152D3a41e5A25De383c191D16134",
    WETH: "0x4300000000000000000000000000000000000004"
  },
  84532: {
    NONFUNGIBLE_POSITION_MANAGER: "0x27F971cb582BF9E50F397e4d29a5C7A34f11faA2",
    UNISWAP_SWAP_ROUTER: "0x94cC0AaC535CCDB3C01d6787D6413C739ae12bc4",
    UNISWAP_V3_FACTORY: "0x4752ba5DBc23f44D87826276BF6Fd6b1C372aD24",
    DOPPLER_AIRLOCK: "0xa24E35a5d71d02a59b41E7c93567626302da1958",
    PROXY_ADMIN: "0x5F14C23983c9e0840Dc60dA880349622f0785420",
    ZORA_RECIPIENT: "0x5F14C23983c9e0840Dc60dA880349622f0785420",
    WETH: "0x4200000000000000000000000000000000000006",
    UNISWAP_V4_POOL_MANAGER: "0x05E73354cFDd6745C338b50BcFDfA3Aa6fA03408",
    UNISWAP_V4_POSITION_MANAGER: "0x4b2c77d209d3405f41a037ec6c77f7f5b8e2ca80",
    UNISWAP_PERMIT2: "0x000000000022D473030F116dDEE9F6B43aC78BA3",
    UNISWAP_UNIVERSAL_ROUTER: "0x492E6456D9528771018DeB9E87ef7750EF184104"
  },
  421614: {
    NONFUNGIBLE_POSITION_MANAGER: "0x6b2937Bde17889EDCf8fbD8dE31C3C2a70Bc4d65",
    UNISWAP_SWAP_ROUTER: "0x101F443B4d1b059569D643917553c771E1b9663E",
    PROXY_ADMIN: "0x256537b56007b32BabEB44E868EC8AA5cBF03D30",
    ZORA_RECIPIENT: "0x256537b56007b32BabEB44E868EC8AA5cBF03D30",
    WETH: "0xc556bae1e86b2ae9c22ea5e036b07e55e7596074"
  },
  7777777: {
    NONFUNGIBLE_POSITION_MANAGER: "0xbC91e8DfA3fF18De43853372A3d7dfe585137D78",
    UNISWAP_SWAP_ROUTER: "0x7De04c96BE5159c3b5CeffC82aa176dc81281557",
    PROXY_ADMIN: "0xdEA20c96253dc2d64897D2b8d27A8d935dE74955",
    ZORA_RECIPIENT: "0xEcfc2ee50409E459c554a2b0376F882Ce916D853",
    WETH: "0x4200000000000000000000000000000000000006"
  },
  11155111: {
    NONFUNGIBLE_POSITION_MANAGER: "0x1238536071E1c677A632429e3655c799b22cDA52",
    UNISWAP_SWAP_ROUTER: "0x3bFA4769FB09eefC5a80d6E87c3B9C650f7Ae48E",
    PROXY_ADMIN: "0xCE9F2e8EaFa11637F8A1CB60AE8AaC601Ae30f2D",
    ZORA_RECIPIENT: "0xCE9F2e8EaFa11637F8A1CB60AE8AaC601Ae30f2D",
    WETH: "0x7b79995e5f793A07Bc00c21412e50Ecae098E7f9"
  },
  11155420: {
    NONFUNGIBLE_POSITION_MANAGER: "0xdA75cEf1C93078e8b736FCA5D5a30adb97C8957d",
    UNISWAP_SWAP_ROUTER: "0x94cC0AaC535CCDB3C01d6787D6413C739ae12bc4",
    PROXY_ADMIN: "0xFA3748b2dcF94a9CBdb5087333E9F093476e8389",
    ZORA_RECIPIENT: "0xFA3748b2dcF94a9CBdb5087333E9F093476e8389",
    WETH: "0x4200000000000000000000000000000000000006"
  },
  999999999: {
    NONFUNGIBLE_POSITION_MANAGER: "0xB8458EaAe43292e3c1F7994EFd016bd653d23c20",
    UNISWAP_SWAP_ROUTER: "0x6B36d761981d82B1e07cF3c4daF4cB4615c4850a",
    PROXY_ADMIN: "0xdae22ce69Afcb7f4bc37D32E267645722949DE0E",
    ZORA_RECIPIENT: "0xdae22ce69Afcb7f4bc37D32E267645722949DE0E",
    WETH: "0x4200000000000000000000000000000000000006"
  }
};
var addresses2 = {
  10: {
    MINTS_ETH_UNWRAPPER_AND_CALLER: "0x0000000000000000000000000000000000000000",
    SPARKS_MANAGER_IMPL: "0x0000000000000000000000000000000000000000",
    SPARKS_MANAGER_IMPL_VERSION: "",
    SPONSORED_SPARKS_SPENDER: "0x35ca784918bf11692708c1D530691704AAcEA95E",
    SPONSORED_SPARKS_SPENDER_VERSION: "2.0.0"
  },
  8453: {
    MINTS_1155: "0x0000000000000000000000000000000000000000",
    MINTS_ETH_UNWRAPPER_AND_CALLER: "0x0000000000000000000000000000000000000000",
    MINTS_MANAGER: "0x0000000000000000000000000000000000000000",
    SPARKS_1155: "0x7777777b3eA6C126942BB14dD5C3C11D365C385D",
    SPARKS_MANAGER: "0x77777779acd6a96C0c57272112921A0b833c38fD",
    SPARKS_MANAGER_IMPL: "0x122648369E390009F18c1B2b9B100AfB09B982fc",
    SPARKS_MANAGER_IMPL_VERSION: "0.2.4",
    SPONSORED_SPARKS_SPENDER: "0x6958A8866A40118e2CC21ab4752353835321b5e6",
    SPONSORED_SPARKS_SPENDER_VERSION: "2.0.0"
  },
  42161: {
    MINTS_ETH_UNWRAPPER_AND_CALLER: "0x0000000000000000000000000000000000000000",
    SPARKS_MANAGER_IMPL: "0x0000000000000000000000000000000000000000",
    SPARKS_MANAGER_IMPL_VERSION: "",
    SPONSORED_SPARKS_SPENDER: "0x2fBdBc34B6015e7b40638179Aa05a2D2267452c7",
    SPONSORED_SPARKS_SPENDER_VERSION: "2.0.0"
  },
  81457: {
    MINTS_ETH_UNWRAPPER_AND_CALLER: "0x0000000000000000000000000000000000000000",
    SPARKS_MANAGER_IMPL: "0x0000000000000000000000000000000000000000",
    SPARKS_MANAGER_IMPL_VERSION: "",
    SPONSORED_SPARKS_SPENDER: "0x786F0f6aE196715Cd6d65693f06DA57426ac8463",
    SPONSORED_SPARKS_SPENDER_VERSION: "2.0.0"
  },
  84532: {
    MINTS_1155: "0x0000000000000000000000000000000000000000",
    MINTS_ETH_UNWRAPPER_AND_CALLER: "0x0000000000000000000000000000000000000000",
    MINTS_MANAGER: "0x0000000000000000000000000000000000000000",
    SPARKS_1155: "0x7777777b3eA6C126942BB14dD5C3C11D365C385D",
    SPARKS_MANAGER: "0x77777779acd6a96C0c57272112921A0b833c38fD",
    SPARKS_MANAGER_IMPL: "0x122648369E390009F18c1B2b9B100AfB09B982fc",
    SPARKS_MANAGER_IMPL_VERSION: "0.2.4",
    SPONSORED_SPARKS_SPENDER: "0x23150f60E233F519A01C735C29c1591f9E8353dE",
    SPONSORED_SPARKS_SPENDER_VERSION: "2.0.0"
  },
  7777777: {
    MINTS_ETH_UNWRAPPER_AND_CALLER: "0xb0994EB9520C98C97e1F3953a5964535C2bd271A",
    SPARKS_MANAGER_IMPL: "0xFB854463800d09B89682746c37A3AE696C92193D",
    SPARKS_MANAGER_IMPL_VERSION: "0.1.4",
    SPARKS_MANAGER: "0x77777779acd6a96C0c57272112921A0b833c38fD",
    SPARKS_1155: "0x7777777b3eA6C126942BB14dD5C3C11D365C385D",
    MINTS_MANAGER: "0x77777770cA269366c7208aFcF36FE2C6F7f7608B",
    MINTS_1155: "0x7777777d57c1C6e472fa379b7b3B6c6ba3835073",
    SPONSORED_SPARKS_SPENDER: "0x362Ef86acAD2FAa66A28Ee8d1F5a835ac0BBD11d",
    SPONSORED_SPARKS_SPENDER_VERSION: "2.0.0"
  },
  999999999: {
    MINTS_ETH_UNWRAPPER_AND_CALLER: "0xb0994EB9520C98C97e1F3953a5964535C2bd271A",
    SPARKS_MANAGER_IMPL: "0xf7D8d07267E840aE466E5f2fe8b089F4DE79c7da",
    SPARKS_MANAGER_IMPL_VERSION: "0.1.4",
    SPARKS_MANAGER: "0x77777779acd6a96C0c57272112921A0b833c38fD",
    SPARKS_1155: "0x7777777b3eA6C126942BB14dD5C3C11D365C385D",
    MINTS_MANAGER: "0x77777770cA269366c7208aFcF36FE2C6F7f7608B",
    MINTS_1155: "0x7777777d57c1C6e472fa379b7b3B6c6ba3835073",
    SPONSORED_SPARKS_SPENDER: "0x3A98313fB00918a81d98f9986aED089365428293",
    SPONSORED_SPARKS_SPENDER_VERSION: "2.0.0"
  }
};
export {
  PremintConfigVersion,
  buySupplyWithSwapRouterHookABI,
  buySupplyWithSwapRouterHookAbiParameters,
  buySupplyWithSwapRouterHookAddress,
  buySupplyWithSwapRouterHookConfig,
  buySupplyWithSwapRouterHookReturnParameters,
  callerAndCommenterABI,
  callerAndCommenterAddress,
  callerAndCommenterConfig,
  coinABI,
  coinFactoryABI,
  coinFactoryAddress,
  coinFactoryConfig,
  coinV4ABI,
  cointagABI,
  cointagFactoryABI,
  cointagFactoryAddress,
  cointagFactoryConfig,
  commentsABI,
  commentsAddress,
  commentsConfig,
  __exports as contracts1155,
  decodeBuySupplyWithSwapRouterHookReturn,
  devBuySupplyWithSwapRouterHookABI,
  devBuySupplyWithSwapRouterHookAddress,
  devBuySupplyWithSwapRouterHookConfig,
  devCoinFactoryABI,
  devCoinFactoryAddress,
  devCoinFactoryConfig,
  emptyCommentIdentifier,
  encodeBuySupplyWithMultiHopSwapRouterHookCall,
  encodeBuySupplyWithSingleHopSwapRouterHookCall,
  encodeBuySupplyWithSwapRouterHookCalldata,
  encodeMultiCurvePoolConfig,
  encodePremintConfig,
  erc20MinterABI,
  erc20MinterAddress,
  erc20MinterConfig,
  erc20ZABI,
  erc20ZRoyaltiesABI,
  erc20ZRoyaltiesAddress,
  erc20ZRoyaltiesConfig,
  iPremintDefinitionsABI,
  iSponsoredSparksSpenderActionABI,
  iUniswapV3PoolABI,
  iUnwrapAndForwardActionABI,
  mintsEthUnwrapperAndCallerABI,
  mintsEthUnwrapperAndCallerAddress,
  mintsEthUnwrapperAndCallerConfig,
  mintsSafeTransferBatchTypedDataDefinition,
  mintsSafeTransferTypedDataDefinition,
  permit2ABI,
  permit2Address,
  permit2Config,
  permitBuyOnSecondaryAndCommentTypedDataDefinition,
  permitCommentTypedDataDefinition,
  permitMintAndCommentTypedDataDefinition,
  permitSparkCommentTypedDataDefinition,
  poolConfigEncodingABI,
  premintTypedDataDefinition,
  premintV1TypedDataDefinition,
  premintV2TypedDataDefinition,
  protocolRewardsABI,
  protocolRewardsAddress,
  protocolRewardsConfig,
  safeTransferSwapAbiParameters,
  secondarySwapABI,
  secondarySwapAddress,
  secondarySwapConfig,
  sparkValue,
  sparks_exports as sparks,
  sponsoredSparksBatchTransferTypedDataType,
  sponsoredSparksBatchTypedDataDefinition,
  sponsoredSparksSpenderABI,
  sponsoredSparksSpenderAddress,
  sponsoredSparksSpenderConfig,
  uniswapUniversalRouterABI,
  uniswapUniversalRouterAddress,
  uniswapUniversalRouterConfig,
  uniswapV3SwapRouterABI,
  uniswapV3SwapRouterAddress,
  uniswapV3SwapRouterConfig,
  upgradeGateABI,
  upgradeGateAddress,
  upgradeGateConfig,
  wethABI,
  wethAddress,
  wethConfig,
  zoraAccountManagerABI,
  zoraAccountManagerAddress,
  zoraAccountManagerConfig,
  zoraCreator1155FactoryImplABI,
  zoraCreator1155FactoryImplAddress,
  zoraCreator1155FactoryImplConfig,
  zoraCreator1155ImplABI,
  zoraCreator1155PremintExecutorImplABI,
  zoraCreator1155PremintExecutorImplAddress,
  zoraCreator1155PremintExecutorImplConfig,
  zoraCreatorFixedPriceSaleStrategyABI,
  zoraCreatorFixedPriceSaleStrategyAddress,
  zoraCreatorFixedPriceSaleStrategyConfig,
  zoraCreatorMerkleMinterStrategyABI,
  zoraCreatorMerkleMinterStrategyAddress,
  zoraCreatorMerkleMinterStrategyConfig,
  zoraCreatorRedeemMinterFactoryABI,
  zoraCreatorRedeemMinterFactoryAddress,
  zoraCreatorRedeemMinterFactoryConfig,
  zoraMints1155ABI,
  zoraMints1155Address,
  zoraMints1155Config,
  zoraMintsManagerImplABI,
  zoraMintsManagerImplAddress,
  zoraMintsManagerImplConfig,
  zoraSparks1155ABI,
  zoraSparks1155Address,
  zoraSparks1155Config,
  zoraSparksManagerImplABI,
  zoraSparksManagerImplAddress,
  zoraSparksManagerImplConfig,
  zoraTimedSaleStrategyABI,
  zoraTimedSaleStrategyAddress,
  zoraTimedSaleStrategyConfig
};
//# sourceMappingURL=index.js.map